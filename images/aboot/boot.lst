[Debugging turned on]
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 1
SYSFLG	MAC	11-Feb-88 23:38	

     1					; UPD ID= 8627, RIP:<7.MONITOR>SYSFLG.MAC.3,  11-Feb-88 18:38:04 by GSCOTT
     2					;TCO 7.1218 - Update copyright date.
     3					; UPD ID= 167, RIP:<7.MONITOR>SYSFLG.MAC.2,  19-Oct-87 17:17:17 by LOMARTIRE
     4					;TCO 7.1072 - Add CLEQIN for cluster-wide ENQ; defaults to "on"
     5					; UPD ID= 2191, SNARK:<6.1.MONITOR>SYSFLG.MAC.7,   5-Jun-85 11:10:44 by MCCOLLUM
     6					;TCO 6.1.1406  - Update copyright notice.
     7					; UPD ID= 1338, SNARK:<6.1.MONITOR>SYSFLG.MAC.6,  15-Jan-85 14:10:52 by GROSSMAN
     8					;TCO 6.1.1136 - Remove references to KNIN.
     9					; UPD ID= 1309, SNARK:<6.1.MONITOR>SYSFLG.MAC.5,  11-Jan-85 14:06:17 by PAETZOLD
    10					;Remove symbols that should not be here.
    11					; UPD ID= 1179, SNARK:<6.1.MONITOR>SYSFLG.MAC.3,  11-Dec-84 14:09:13 by LEACHE
    12					;Change EHLJSB to EXTJSB for extended JSB
    13					; UPD ID= 1026, SNARK:<6.1.MONITOR>SYSFLG.MAC.2,  12-Nov-84 08:47:55 by GRANT
    14					;Remove FTCI, CFSCOD, and LCSFLG
    15					;SNARK:<6.1.MONITOR.CFS>SYSFLG.MAC.11  7-May-84 17:13:45, Edit by DMCDANIEL
    16					;Turn LAT on via LAHFLG.
    17					;SNARK:<6.1.MONITOR.CFS>SYSFLG.MAC.9  1-May-84 07:52:05, Edit by DMCDANIEL
    18					;Add LAHFLG for LATSRV.
    19					;SNARK:<6.1.MONITOR.KL>SYSFLG.MAC.11 15-Apr-84 14:07:50, Edit by GROSSMAN
    20					;Remove FTNIDLL
    21					;SNARK:<6.1.MONITOR.CFS>SYSFLG.MAC.7 15-Apr-84 08:47:17, Edit by GROSSMAN
    22					;Update from CFS60:
    23					;<6.MONITOR.KL>SYSFLG.MAC.26,  21-Mar-84 13:00:12, Edit by LOMARTIRE
    24					;Remove SCADBG and SCARNG and place them under DEBUG
    25					;Remove PIDBG because it is not needed anymore
    26					;<6.MONITOR.KL>SYSFLG.MAC.25,  12-Mar-84 16:12:32, Edit by LOMARTIRE
    27					;Add SCARNG
    28					;Remove KLPDBG, it's now under DEBUG
    29					;<6.MONITOR.KL>SYSFLG.MAC.21,  7-Nov-83 14:06:05, Edit by PURRETTA
    30					;Remove FTKEARLY
    31					;<6.MONITOR.KL>SYSFLG.MAC.20, 28-Oct-83 15:38:04, Edit by TGRADY
    32					; Set DYNFLG to 0, not needed for this release
    33					;Define CFSCOD and CFSSCA
    34					;SNARK:<6.MONITOR.KL>SYSFLG.MAC.15  4-May-83 08:49:19, Edit by MOSER
    35
    36					;	COPYRIGHT (c) DIGITAL EQUIPMENT CORPORATION 1976, 1988.
    37					;	ALL RIGHTS RESERVED.
    38					;
    39					;	THIS SOFTWARE IS FURNISHED UNDER A  LICENSE AND MAY BE USED AND  COPIED
    40					;	ONLY IN  ACCORDANCE  WITH  THE  TERMS OF  SUCH  LICENSE  AND  WITH  THE
    41					;	INCLUSION OF THE ABOVE  COPYRIGHT NOTICE.  THIS  SOFTWARE OR ANY  OTHER
    42					;	COPIES THEREOF MAY NOT BE PROVIDED  OR OTHERWISE MADE AVAILABLE TO  ANY
    43					;	OTHER PERSON.  NO  TITLE TO  AND OWNERSHIP  OF THE  SOFTWARE IS  HEREBY
    44					;	TRANSFERRED.
    45					;
    46					;	THE INFORMATION IN THIS  SOFTWARE IS SUBJECT  TO CHANGE WITHOUT  NOTICE
    47					;	AND SHOULD  NOT  BE CONSTRUED  AS  A COMMITMENT  BY  DIGITAL  EQUIPMENT
    48					;	CORPORATION.
    49					;
    50					;	DIGITAL ASSUMES NO  RESPONSIBILITY FOR  THE USE OR  RELIABILITY OF  ITS
    51					;	SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
    52
    53
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 2
SYSFLG	MAC	11-Feb-88 23:38	

    54
    55					;SPECIAL INSTALLATION DEPENDENT PARAMETERS NEEDED  FOR KL10
    56
    57		   	   000001	KLFLG==:1			;KL10
    58		   	   000000	SMFLG==:0			;NOT KS10
    59		   	   000000	KCFLG==:0			;NOT A KC10
    60		   	   000001	DTFLG==:1			;USE FE FOR ALL TTY
    61		   	   000000	DCFLG==:0			;NO DC10
    62		   	   000000	DYNFLG==:0			;Don't Allow Dynamic Libraries
    63		   	   000000	CTSFLG==:0			;Don't Allow Canonical Terminal Support
    64		   	   000000	FTNSPSRV==:0			;Don't use NSPSRV for release 6.1
    65		   	   000000	FTD36MM==:0			;Don't use DECNET-36 dull memory manager
    66									;Use ASGRES instead.
    67		   	   000001	LAHFLG==:1			;Include LAT host code
    68		   	   000000	EXTJSB==:0			;No extended JSB
    69
    70					;Note: At present you must have KLPDBG turned on if you intend to use
    71					;MSCDBG. It is OK to have KLPDBG turned on while MSCDBG is off however...
    72					;
    73		   	   000001	FTKLIPA==:1			;Include KLIPA code
    74		   	   000001	FTMSCP==:1			;Include MSCP code
    75		   	   000000	MSCDBG==:0			;Turn off MSCP debug code
    76		   	   000001	CFSSCA==:1			;SCA interface for CFS code
    77		   	   000001	CLEQIN==:1			;[7.1072] Assemble cluster-wide ENQ code
    78									;[7.1072] Note: Do not turn this off unless 
    79									;[7.1072] you have sources and can fully 
    80									;[7.1072] reassemble and relink your monitor.
    81
    82					;SPECIAL INSTALLATION DEPENDENT PARAMETERS NEEDED IN UNIVERSAL
    83					;FILE
    84
    85		   	   000000	DEBUG==:0			;TURN ON DEBUGGING STUFF
    86		   	   000000	SPTDSW==:0			;FORCE OFN LOCK DEBUGGING OFF
    87
    88					; 6.1 Specific parameters
    89
    90		   	   000001	FTP4R==:1			;Phase IV Router code from D36PAR
    91		   	   000001	FTRTST==:1			;Router message looper
    92
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 3
SYSFLG	MAC	11-Feb-88 23:38	

    93
    94		   	   000001	BDEBUG==:1
    95					; UPD ID= 8644, RIP:<7.MONITOR>BOOT.MAC.8,  16-Feb-88 15:26:09 by GSCOTT
    96					;TCO 7.1228 - Edit 315, IDXADR included bit 15, causing various math problems
    97					; in GETPGS and elsewhere when all disk addresses retrived from the XB have bit
    98					; 15 on.  Lowercasify some strings.  Prevent problems with RP07 dumping by
    99					; setting the maximum number of pages selected by GETPGS.
   100					; UPD ID= 8482, RIP:<7.MONITOR>BOOT.MAC.6,   9-Feb-88 12:16:57 by GSCOTT
   101					;TCO 7.1224 - Edit 314, save flags passed to us from KLI in BOOTFL for 
   102					; monitor's use in deciding if the "Why Reload?" question should be asked.
   103					; The monitor shold ask this question only if BOOTFL is positive (0 means 
   104					; BOOTFL wasn't set up and 1B0+anything means that no prompting is desired).
   105					; Also clean up a few little things, add TOC, etc.
   106					;TCO 7.1218 - Update copyright notice.
   107					; UPD ID= 25, RIP:<7.MONITOR>BOOT.MAC.5,  25-Jun-87 13:10:41 by PRATT
   108					;More of TCO 7.1001 - Fix up edit number for the last edit
   109					; UPD ID= 2, RIP:<7.MONITOR>BOOT.MAC.2,  28-May-87 15:38:38 by PRATT
   110					;TCO 7.1001 - Fix problems with holes in symbol table caused 
   111					;    by incorrectly handling zero pages above page 777 in G.DIR4 routine. 
   112					; UPD ID= 2243, SNARK:<6.1.MONITOR>BOOT.MAC.56,  19-Jun-85 15:14:08 by LEACHE
   113					;Edit 311 fix minor bug in edit 310
   114					;Also, make dump-file hole extend from LODBAS to MCEPAG
   115					; UPD ID= 2050, SNARK:<6.1.MONITOR>BOOT.MAC.55,   3-Jun-85 14:16:39 by MCCOLLUM
   116					;TCO 6.1.1406  - Update copyright notice.
   117					; UPD ID= 1754, SNARK:<6.1.MONITOR>BOOT.MAC.54,  14-Apr-85 16:28:43 by LEACHE
   118					;Edit 310 - Fix smashing of CX in RETRY
   119					;	    TCO 6.1.1321 Add BOOT homeblock parameters
   120					;	    TCO 6.1.1320 Reload DX20A's on autoreload
   121					;Edit 307 - Set up default prompt
   122					;Load DX20's once per BOOT invocation
   123					; UPD ID= 1639, SNARK:<6.1.MONITOR>BOOT.MAC.53,  14-Mar-85 16:02:26 by HAUDEL
   124					;TCO 6.1.1254 - Add space at end of BOOT for temporary EPT.
   125					; UPD ID= 1313, SNARK:<6.1.MONITOR>BOOT.MAC.50,  11-Jan-85 15:17:38 by LEACHE
   126					;Edit 306 - TCO 6.1.1131 Fix long-file problem in MTBOOT
   127					;<LEACHE>BOOT.MAC.32, 29-NOV-84 13:49:42, Edit by LEACHE
   128					;Edit 305 - Increase dumpable core to 4 meg
   129					;Make debugging work for 6.1
   130					;<DONAHUE.BOOT>BOOT.MAC.3, 21-Nov-84 19:50:12, Edit by DONAHUE
   131					;Edit 304 - Setup a valid pointer in TSTSLT after SETEPT - otherwise
   132					;a monitor that wants to load a page into this location hangs when it 
   133					;references the page
   134					;<DONAHUE.BOOT>TEST.MAC.3, 20-Nov-84 20:20:41, Edit by DONAHUE
   135					;Edit 303 - Fix SETEPT loop to check physical address at TSTMEM+3
   136					;	and change loop at SETPTB to setup page table for all of BOOT
   137					;<DONAHUE.BOOT>BOOT.MAC.8,  6-Nov-84 11:31:53, Edit by DONAHUE
   138					;Edit 302 - Change GETPGS to use DEVDSP, add label SAV.EX
   139					;Edit 301 - Change code at SETLCV to allow booting of a 5.1 monitor
   140					;Back Version number up to 11
   141					;Add missing edit history
   142					;<DONAHUE.BOOT>BOOT.MAC.4, 21-Sep-84 11:45:11, EDIT BY DONAHUE
   143					;Version 12, edit 300
   144					; Make changes to speed up dumping, including:
   145					;	Rewrite disk I/O code to write more than one page at a time
   146					;	Rewrite SAVE routine to scan the dump file's index block
   147					;	 checking for consecutive pages on the disk
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 1
BOOT	MAC	16-Feb-88 20:26	

   148					;	Allow simultaneous I/O on different channels
   149					; Also - Add a page for the CCW's (A%CCW)
   150					;	Add device dispatch tables for the different disk types
   151					;	Remove all references to KC/KS/RH11/RP10 etc...
   152					; UPD ID= 4852, SNARK:<6.MONITOR>BOOT.MAC.48,  17-Sep-84 12:07:13 by PURRETTA
   153					;Update copyright notice
   154					; UPD ID= 4773, SNARK:<6.MONITOR>BOOT.MAC.47,  29-Aug-84 16:55:23 by LEACHE
   155					;TCO 6.2207 - Stop output of null directory names on errors
   156					; UPD ID= 4722, SNARK:<6.MONITOR>BOOT.MAC.46,  21-Aug-84 12:21:27 by LEACHE
   157					;TCO 6.2179 - Teach BOOT to load long files
   158					; UPD ID= 4682, SNARK:<6.MONITOR>BOOT.MAC.45,  13-Aug-84 16:55:03 by LEACHE
   159					;TCO 6.2172  Clear channel before touching it in CHNRST
   160					; UPD ID= 4628, SNARK:<6.MONITOR>BOOT.MAC.44,  29-Jul-84 18:41:59 by LEACHE
   161					;Put PFERR code under debug conditional
   162					; UPD ID= 4627, SNARK:<6.MONITOR>BOOT.MAC.43,  29-Jul-84 18:30:11 by LEACHE
   163					;Fix CHNSAV,CHNRST routines
   164					;Add more debugging stuff
   165					; UPD ID= 4415, SNARK:<6.MONITOR>BOOT.MAC.42,   2-Jul-84 10:14:28 by LEACHE
   166					;TCO 6.2105  Teach BOOT to ignore PDV in EXE directory
   167					;Fix bugs in CHNSAV/CHNRST and CHKPG0
   168					;Fix off by 1 bug in DDT preamble code
   169					; UPD ID= 4368, SNARK:<6.MONITOR>BOOT.MAC.41,  20-Jun-84 17:01:36 by LEACHE
   170					;TCO 6.2051 Restart DX20B's after MTBOOT has halted them with channel reset
   171					;Define RP04 composite error bit correctly (was attention active)
   172					;Add real trap handling for debugging
   173					;Fix IOOP(CLEAR) to clear RAE
   174					;TCO 6.2007  Fix pager-clear problem
   175					;TCO 6.2011  Make BOOT unlock the port on dual-ported RP04567's
   176					;Add subdirectory-lookup code
   177					;Add debugging aids and support of new KDDT
   178					;Fix bug in GET logic for MTBOOT relating to old-style (2-pass) loads
   179					; UPD ID= 3835, SNARK:<6.MONITOR>BOOT.MAC.40,   1-Mar-84 13:15:19 by LEACHE
   180					;More of previous - restore previous value of default UBSTR (340)
   181					; UPD ID= 3812, SNARK:<6.MONITOR>BOOT.MAC.39,  29-Feb-84 16:43:53 by LEACHE
   182					;TCO 6.1969
   183					;Make BOOT load resident and swappable monitor in 1 pass
   184					;Make BOOT able to write monitor pages to memory above first 256K
   185					; UPD ID= 3651, SNARK:<6.MONITOR>BOOT.MAC.38,   2-Feb-84 16:55:47 by LEACHE
   186					;Reduce code pages from 5 to 4
   187					; UPD ID= 3639, SNARK:<6.MONITOR>BOOT.MAC.37,   2-Feb-84 11:52:53 by MURPHY
   188					;Put definitions of lower core cells in PROLOG.
   189					;Setup BUTSTA as start address instead of jump to lastpage+777 hack.
   190					; UPD ID= 3605, SNARK:<6.MONITOR>BOOT.MAC.36,  31-Jan-84 14:39:31 by MURPHY
   191					;TCO 6.1525 - Don't use .JBSYM to imply upper limit. POSTLD must know A%VFST.
   192					; UPD ID= 2405, SNARK:<6.MONITOR>BOOT.MAC.35,   3-May-83 15:58:36 by COBB
   193					;TCO 6.1639 - %s and ?s in PRINTX messages...
   194					; UPD ID= 2206, SNARK:<6.MONITOR>BOOT.MAC.34,   8-Apr-83 06:04:10 by WACHS
   195					;Remove TCO 6.1549 since HSC disks can't be PS:
   196					; UPD ID= 2002, SNARK:<6.MONITOR>BOOT.MAC.33,  16-Mar-83 04:11:08 by WACHS
   197					;TCO 6.1549 - Load KLIPA, KLNI microcode
   198					; UPD ID= 1827, SNARK:<6.MONITOR>BOOT.MAC.32,  18-Feb-83 10:59:22 by LEACHE
   199					;Replace error TAPHTE (removed in previous edit) 
   200					; UPD ID= 1824, SNARK:<6.MONITOR>BOOT.MAC.31,  18-Feb-83 09:51:41 by LEACHE
   201					;TCO 6.1498 - Increase IO retry count for disks, Add disk status
   202					; UPD ID= 1759, SNARK:<6.MONITOR>BOOT.MAC.30,   4-Feb-83 05:04:29 by WACHS
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 1-1
BOOT	MAC	16-Feb-88 20:26	

   203					;TCO 6.1495 - Don't attempt to use KLIPA/KLNI channels
   204					; UPD ID= 1457, SNARK:<6.MONITOR>BOOT.MAC.29,  17-Nov-82 21:01:26 by PAETZOLD
   205					;Add some comments
   206					; UPD ID= 1175, SNARK:<6.MONITOR>BOOT.MAC.28,  13-Sep-82 22:54:12 by MILLER
   207					;Fix up CST mask
   208					; UPD ID= 1174, SNARK:<6.MONITOR>BOOT.MAC.27,  13-Sep-82 21:47:49 by MILLER
   209					;And again
   210					; UPD ID= 1173, SNARK:<6.MONITOR>BOOT.MAC.26,  13-Sep-82 21:17:43 by MILLER
   211					;Once more on the previous edit
   212					; UPD ID= 1155, SNARK:<6.MONITOR>BOOT.MAC.25,   8-Sep-82 12:01:44 by MILLER
   213					;TCO 6.1094. Set CST write bit in all CST entries
   214					; UPD ID= 1076, SNARK:<6.MONITOR>BOOT.MAC.24,  10-Aug-82 19:17:14 by HALL
   215					;TCO 6.1000 - Support the 2080
   216					;	Make TYI wait until data is available
   217					; UPD ID= 1069, SNARK:<6.MONITOR>BOOT.MAC.23,  10-Aug-82 08:36:33 by HALL
   218					;TCO 6.1000 - Support the 2080
   219					;	Previous edit accidentally deleted a line
   220					; UPD ID= 1067, SNARK:<6.MONITOR>BOOT.MAC.22,   9-Aug-82 17:47:50 by HALL
   221					;TCO 6.1000 - Support the 2080
   222					;	Set up P before the first subroutine call near GETCM1
   223					; UPD ID= 1050, SNARK:<6.MONITOR>BOOT.MAC.21,   7-Aug-82 14:13:24 by HALL
   224					;TCO 6.1000 - Support the 2080
   225					;	At FNDDEV get the mask right for a physical address
   226					; UPD ID= 1041, SNARK:<6.MONITOR>BOOT.MAC.20,   5-Aug-82 06:37:27 by HALL
   227					;TCO 6.1000 - Support the 2080
   228					;	Previous edit failed to update P1  for the KC
   229					; UPD ID= 1039, SNARK:<6.MONITOR>BOOT.MAC.19,   4-Aug-82 14:47:01 by HALL
   230					;TCO 6.1000 - Support the 2080
   231					;	Add some console initialization functions
   232					;	Remove OPDEFs that are also defined in PROLOG
   233					; UPD ID= 1031, SNARK:<6.MONITOR>BOOT.MAC.18,   3-Aug-82 08:17:23 by HALL
   234					;TCO 6.1000 - Support the 2080
   235					;	On the KC, set CST base register to 0
   236					; UPD ID= 1029, SNARK:<6.MONITOR>BOOT.MAC.17,   3-Aug-82 07:20:17 by HALL
   237					;TCO 6.1000 - Support the 2080
   238					;	On the KC, map all of memory
   239					;	At TOP2, clear left half of P2 before setting bits
   240					;	Add support for the console
   241					;Also, fix definition of NCSTPG
   242					; UPD ID= 1024, SNARK:<6.MONITOR>BOOT.MAC.16,   2-Aug-82 07:05:28 by HALL
   243					;TCO 6.1000 - Support the 2080
   244					;	Typo in previous edit
   245					; UPD ID= 1023, SNARK:<6.MONITOR>BOOT.MAC.15,   1-Aug-82 10:46:29 by HALL
   246					;TCO 6.1000 - Support the 2080
   247					;	Search PROLOG
   248					;	Add APR stuff for the KC
   249					;	Change some bit numbers to symbol names
   250					; UPD ID= 559, SNARK:<6.MONITOR>BOOT.MAC.14,  31-Mar-82 11:55:06 by LEACHE
   251					;Update edit number for previous edit
   252					; UPD ID= 531, SNARK:<6.MONITOR>BOOT.MAC.13,  18-Mar-82 15:48:22 by MILLER
   253					;TCO 5.1762. Move code at start of FNDDEV to better place
   254					; UPD ID= 86, SNARK:<5.MONITOR>BOOT.MAC.12,  31-Jul-81 09:58:22 by LEACHE
   255					;Improve reporting of "structure not found" errors
   256					; UPD ID= 33, SNARK:<5.MONITOR>BOOT.MAC.11,  15-Jul-81 08:14:26 by LEACHE
   257					;More of previous edit
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 1-2
BOOT	MAC	16-Feb-88 20:26	

   258					; UPD ID= 30, SNARK:<5.MONITOR>BOOT.MAC.10,  14-Jul-81 10:56:33 by LEACHE
   259					;Remove all pretense of MTBOOT using a device name
   260					; UPD ID= 2292, SNARK:<5.MONITOR>BOOT.MAC.9,   2-Jul-81 15:29:17 by LEACHE
   261					;Correct debugging example
   262					; UPD ID= 2291, SNARK:<5.MONITOR>BOOT.MAC.8,   2-Jul-81 14:13:56 by LEACHE
   263					;Add /E switch (Load and go to location 141)
   264					;Move KDDT to 500000 when debugging
   265					; UPD ID= 2111, SNARK:<5.MONITOR>BOOT.MAC.7,  31-May-81 11:53:55 by LEACHE
   266					;Shorten assembly error-messages
   267					; UPD ID= 2110, SNARK:<5.MONITOR>BOOT.MAC.6,  31-May-81 11:43:46 by LEACHE
   268					;Make error routine use STRNAM if CURNAM zero
   269					;Force interactive mode on any error
   270					; UPD ID= 2080, SNARK:<5.MONITOR>BOOT.MAC.5,  26-May-81 09:52:01 by LEACHE
   271					;Display pass on swappable load
   272					; UPD ID= 1979, SNARK:<5.MONITOR>BOOT.MAC.4,  12-May-81 13:18:14 by LEACHE
   273					;Fix minor bug in MTBOOT
   274					; UPD ID= 1970, SNARK:<5.MONITOR>BOOT.MAC.3,  10-May-81 10:28:19 by LEACHE
   275					;Minor bug fix
   276					; UPD ID= 1965, SNARK:<5.MONITOR>BOOT.MAC.2,   8-May-81 10:39:34 by LEACHE
   277					;Rewrite error messages & error handling
   278					; UPD ID= 1567, SNARK:<5.MONITOR>BOOT.MAC.14,  19-Feb-81 11:35:20 by LEACHE
   279					;Bump maximum dumpable core to 3 meg
   280					; UPD ID= 1566, SNARK:<5.MONITOR>BOOT.MAC.13,  18-Feb-81 09:30:23 by LEACHE
   281					;Make BOOT complain if the dump file is too small
   282					;Make /D & /S noops for MTBOOT
   283					; UPD ID= 1518, SNARK:<5.MONITOR>BOOT.MAC.12,   4-Feb-81 21:04:23 by ZIMA
   284					;Adjust comments on previous.
   285					; UPD ID= 1517, SNARK:<5.MONITOR>BOOT.MAC.11,   4-Feb-81 17:40:44 by ZIMA
   286					;TCO 5.1257 - Handle uninitialized memory for KS:
   287					;  Put BLT of 20-23 under conditional for KL only
   288					;  Do DBE scan for low 256K at GOTCOR
   289					;  Do DBE scan for high memory at SETEP2
   290					;Fixes problems including trashed ROOT-DIRECTORY on powerfail and SWPPTP
   291					;BUGHLTs on reload.
   292					; UPD ID= 1492, SNARK:<5.MONITOR>BOOT.MAC.10,  26-Jan-81 12:08:55 by LEACHE
   293					;Increase code pages from 3 to 4
   294					; Add /I switch (Information)
   295					; Place following under control of feature test switch FT.RP2:
   296					;	(1) symbols from RP20 microcode
   297					;	(2) attempt/do not attempt to load DX20B's
   298					; UPD ID= 1369, SNARK:<5.MONITOR>BOOT.MAC.9,  18-Dec-80 11:36:58 by LEACHE
   299					;Fix bug that prevented all directory entries from being written to dump file
   300					; Section-align directory entries for dump file
   301					; Add symbols PHYPAG, PHYADR, NMEG.
   302					; UPD ID= 1270, SNARK:<4.RP20-UTILITIES>BOOT.MAC.6,  13-Nov-80 10:45:09 by WACHS
   303					;Add support for TM78/TU78, fix code for RP07, make the magtape stuff
   304					; table driven
   305					; UPD ID= 1251, SNARK:<5.MONITOR>BOOT.MAC.6,  10-Nov-80 11:44:52 by LEACHE
   306					;Stop BOOT from writing DX20 microcode to dump file.  Add diagrams + comments
   307					; Reload DX20 during auto-reload of monitor (currently for disk only)
   308					; Display DX20 "type" during microcode load
   309					; UPD ID= 732, SNARK:<5.MONITOR>BOOT.MAC.5,   5-Jul-80 22:15:17 by ZIMA
   310					;TCO 5.1095 - FIX BOOT TO HANDLE UNINITIALIZED MEMORY INSTEAD OF HANGING.
   311					; UPD ID= 657, SNARK:<5.MONITOR>BOOT.MAC.4,  16-Jun-80 17:22:54 by KONEN
   312					;TCO 5.1063 -
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 1-3
BOOT	MAC	16-Feb-88 20:26	

   313					;FIX BOOT TO LOOK AT APR SERIAL NUMBER ON HOME BLOCKS, BEFORE NAME 'PS'
   314					; UPD ID= 553, SNARK:<5.MONITOR>BOOT.MAC.3,  24-May-80 21:27:04 by ZIMA
   315					;TCO 5.1044 - FIX TYPO IN SETZM'ING 20-23.
   316					;TCO 5.1045 - FIX TYPO IN MTBOOT PROMPT.
   317					;TCO 5.1046 - INTERIM FIX FOR KS10 BOOT/MTBOOT HANGING, CLEAR KLINIK
   318					; OUTPUT WORD DURING STARTUP.
   319					; UPD ID= 547, SNARK:<5.MONITOR>BOOT.MAC.2,  21-May-80 16:18:11 by DBELL
   320					;TCO 5.1043 - LOAD DX20 MICROCODE FOR RP20 DISKS
   321					; UPD ID= 230, SNARK:<4.1.MONITOR>BOOT.MAC.63,  30-Jan-80 14:30:34 by ENGEL
   322					;FIX NCSTPG FOR KS
   323					; UPD ID= 229, SNARK:<4.1.MONITOR>BOOT.MAC.62,  30-Jan-80 08:12:35 by ENGEL
   324					; UPD ID= 198, SNARK:<4.1.MONITOR>BOOT.MAC.61,  10-Jan-80 08:34:04 by ENGEL
   325					;ADD <CR><LF> TO ERROR MESSAGES
   326					;<4.MONITOR>BOOT.MAC.60, 18-Oct-79 16:57:29, EDIT BY DBELL
   327					;TCO 4.2534 - DON'T LOAD DX20 MICROCODE IF DUMPING CORE OR AUTO-RELOADING
   328					;<4.MONITOR>BOOT.MAC.59, 11-Oct-79 13:47:20, EDIT BY ENGEL
   329					;MOVE PDL AWAY FROM LODTYP
   330					;<4.MONITOR>BOOT.MAC.58,  5-Oct-79 16:55:50, EDIT BY ENGEL
   331					;CHANGE EDDT TO KDDT IN LINK EXAMPLE
   332					;<4.MONITOR>BOOT.MAC.55, 19-Jul-79 07:48:02, EDIT BY ENGEL
   333					;<4.MONITOR>BOOT.MAC.54, 18-Jul-79 16:49:09, EDIT BY ENGEL
   334					;ADD HELP TEXT TO DEBUGGING BOOT WITH EDDT
   335					;<4.MONITOR>BOOT.MAC.53, 16-Jul-79 10:27:21, EDIT BY ENGEL
   336					;ALLOW SYSTEM TO BOOT WHEN DX20 IS BAD
   337					;<4.MONITOR>BOOT.MAC.52,  6-Jul-79 10:02:15, EDIT BY ENGEL
   338					;<4.MONITOR>BOOT.MAC.51,  5-Jul-79 13:21:23, EDIT BY ENGEL
   339					;FIX NCSTPG
   340					;<4.MONITOR>BOOT.MAC.50,  2-Jul-79 09:04:45, EDIT BY ENGEL
   341					;ADD HINTS FOR HOW TO DEBUG WITH EDDT
   342					;<4.MONITOR>BOOT.MAC.49, 27-Jun-79 15:48:54, Edit by KONEN
   343					;PRINT MTBOOT PROMPT
   344					;<4.MONITOR>BOOT.MAC.48, 25-Jun-79 16:41:08, EDIT BY ENGEL
   345					;DEFEND AGAINST MEMORY PARITY IN LOCATIONS 20-23
   346					;<4.MONITOR>BOOT.MAC.47, 22-Jun-79 14:30:16, EDIT BY ENGEL
   347					;ADD HIGH CORE SAVING AND RUBOUT CHANGES
   348					;<4.MONITOR>BOOT.MAC.46, 10-Jun-79 14:44:37, Edit by MCLEAN
   349					;<4.MONITOR>BOOT.MAC.45, 10-Jun-79 14:33:47, Edit by MCLEAN
   350					;MOVE DECISION ON LOAD TYPE FOR BOOT OF SM FOR MORE ROOM
   351					;<4.MONITOR>BOOT.MAC.44,  4-MAR-79 14:35:04, EDIT BY KONEN
   352					;UPDATE COPYRIGHT FOR RELEASE 4
   353					;<4.MONITOR>BOOT.MAC.43, 26-JAN-79 22:31:45, EDIT BY MCLEAN
   354					;GET CORRECT NUMBER OF CYLS PER UNIT FOR RP07
   355					;<4.MONITOR>BOOT.MAC.42, 26-JAN-79 22:25:14, EDIT BY MCLEAN
   356					;ADD RP07
   357					;<4.MONITOR>BOOT.MAC.41, 17-JAN-79 14:53:26, EDIT BY DBELL
   358					;PUT IN THE SYMBOL A%VFST FOR THE FIRST ADDRESS OF BOOT, AND FIX
   359					;TSTPAG AND SETLCV TO USE IT.
   360					;<4.MONITOR>BOOT.MAC.40, 16-JAN-79 10:05:44, EDIT BY DBELL
   361					;FIX TSTADR TO USE VFREE CORRECTLY.
   362					;<4.MONITOR>BOOT.MAC.39, 15-JAN-79 10:34:32, EDIT BY DBELL
   363					;TCO 4.2154 - MAKE THE UPPER LIMIT ON LOADING VARY ACCORDING TO .JBSYM,
   364					; AND ADD THE /A SWITCH TO FORCE LOADING OF ALL OF A PROGRAM.  CLEAN UP
   365					; THE PAGE DEFINITIONS.  EXTEND LOADING RANGE FROM 377 TO BOOT ITSELF.
   366					;<4.MONITOR>BOOT.MAC.37,  7-NOV-78 18:12:26, EDIT BY MCLEAN
   367					;FIX SAVING IF GT 512 K
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 1-4
BOOT	MAC	16-Feb-88 20:26	

   368
   369
   370					;	COPYRIGHT (c) DIGITAL EQUIPMENT CORPORATION 1976, 1988.
   371					;	ALL RIGHTS RESERVED.
   372					;
   373					;	THIS SOFTWARE IS FURNISHED UNDER A  LICENSE AND MAY BE USED AND  COPIED
   374					;	ONLY IN  ACCORDANCE  WITH  THE  TERMS OF  SUCH  LICENSE  AND  WITH  THE
   375					;	INCLUSION OF THE ABOVE  COPYRIGHT NOTICE.  THIS  SOFTWARE OR ANY  OTHER
   376					;	COPIES THEREOF MAY NOT BE PROVIDED  OR OTHERWISE MADE AVAILABLE TO  ANY
   377					;	OTHER PERSON.  NO  TITLE TO  AND OWNERSHIP  OF THE  SOFTWARE IS  HEREBY
   378					;	TRANSFERRED.
   379					;
   380					;	THE INFORMATION IN THIS  SOFTWARE IS SUBJECT  TO CHANGE WITHOUT  NOTICE
   381					;	AND SHOULD  NOT  BE CONSTRUED  AS  A COMMITMENT  BY  DIGITAL  EQUIPMENT
   382					;	CORPORATION.
   383					;
   384					;	DIGITAL ASSUMES NO  RESPONSIBILITY FOR  THE USE OR  RELIABILITY OF  ITS
   385					;	SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
   386
   387						TITLE BOOT - DISK AND TAPE BOOTSTRAP
   388						SALL
   389						SEARCH MONSYM,MACSYM,PROLOG
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 2
BOOT	MAC	16-Feb-88 20:26		Table of Contents

   390						Subttl	Table of Contents
   391
   392					;		     Table of Contents for BOOT
   393					;
   394					;				  Section		      Page
   395					;
   396					;
   397					;    1. Comments on Debugging  . . . . . . . . . . . . . . . .   4
   398					;    2. Definitions
   399					;        2.1    Version  . . . . . . . . . . . . . . . . . . .  11
   400					;        2.2    Assembly Parameters  . . . . . . . . . . . . .  12
   401					;        2.3    RH20 . . . . . . . . . . . . . . . . . . . . .  13
   402					;        2.4    DX20 . . . . . . . . . . . . . . . . . . . . .  14
   403					;        2.5    TM78 . . . . . . . . . . . . . . . . . . . . .  15
   404					;        2.6    RP04 . . . . . . . . . . . . . . . . . . . . .  16
   405					;        2.7    TOPS-20 Disks  . . . . . . . . . . . . . . . .  17
   406					;        2.8    Macros . . . . . . . . . . . . . . . . . . . .  19
   407					;        2.9    ACs and Flags  . . . . . . . . . . . . . . . .  20
   408					;        2.10   Physical Core Parameters . . . . . . . . . . .  21
   409					;        2.11   Pages used for BOOT  . . . . . . . . . . . . .  22
   410					;        2.12   Debugging  . . . . . . . . . . . . . . . . . .  23
   411					;        2.13   Storage  . . . . . . . . . . . . . . . . . . .  24
   412					;    3. Main Entry Point . . . . . . . . . . . . . . . . . . .  30
   413					;    4. Initialization
   414					;        4.1    Paging Off . . . . . . . . . . . . . . . . . .  31
   415					;        4.2    Paging On  . . . . . . . . . . . . . . . . . .  37
   416					;    5. Get A Command  . . . . . . . . . . . . . . . . . . . .  43
   417					;    6. Device Loop
   418					;        6.1    Find Disk  . . . . . . . . . . . . . . . . . .  46
   419					;        6.2    Check if Channel Present . . . . . . . . . . .  49
   420					;        6.3    Check if Unit Present  . . . . . . . . . . . .  50
   421					;        6.4    Perform RH20 I/O Instructions  . . . . . . . .  51
   422					;        6.5    Find Tape  . . . . . . . . . . . . . . . . . .  52
   423					;        6.6    DX20 Routines  . . . . . . . . . . . . . . . .  60
   424					;        6.7    KLIPA Routines . . . . . . . . . . . . . . . .  67
   425					;        6.8    Check Home Blocks  . . . . . . . . . . . . . .  68
   426					;        6.9    Read Primary/Secondary Home Blocks . . . . . .  69
   427					;    7. Page Fault Handler . . . . . . . . . . . . . . . . . .  71
   428					;    8. CTY I/O Routines
   429					;        8.1    Read String from CTY . . . . . . . . . . . . .  72
   430					;        8.2    KL10 Console Routines  . . . . . . . . . . . .  74
   431					;    9. Output Errors  . . . . . . . . . . . . . . . . . . . .  75
   432					;   10. VBOOT - Bootstrap Function Entry Point . . . . . . . .  76
   433					;   11. Command String Parser  . . . . . . . . . . . . . . . .  79
   434					;       11.1    State Machine  . . . . . . . . . . . . . . . .  81
   435					;       11.2    Default Values . . . . . . . . . . . . . . . .  82
   436					;       11.3    State Transition Tables  . . . . . . . . . . .  83
   437					;       11.4    Number Input Routines  . . . . . . . . . . . .  85
   438					;   12. Display Subroutines
   439					;       12.1    Output Boot Information  . . . . . . . . . . .  86
   440					;       12.2    Microcode Version  . . . . . . . . . . . . . .  87
   441					;       12.3    String and Number  . . . . . . . . . . . . . .  88
   442					;       12.4    Channel/Device Status  . . . . . . . . . . . .  89
   443					;       12.5    Structure/File Name  . . . . . . . . . . . . .  90
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 3
BOOT	MAC	16-Feb-88 20:26		Table of Contents (page 2)

   444						Subttl	Table of Contents (page 2)
   445
   446					;		     Table of Contents for BOOT
   447					;
   448					;				  Section		      Page
   449					;
   450					;
   451					;   13. Search Disks
   452					;       13.1    Map Directory/Index Page . . . . . . . . . . .  91
   453					;       13.2    Find Filename  . . . . . . . . . . . . . . . .  95
   454					;   14. Disk I/O Routines
   455					;       14.1    Write Pages  . . . . . . . . . . . . . . . . .  96
   456					;       14.2    Read Page  . . . . . . . . . . . . . . . . . .  97
   457					;       14.3    Setup for I/O Retry  . . . . . . . . . . . . .  98
   458					;       14.4    Perform I/O  . . . . . . . . . . . . . . . . .  99
   459					;       14.5    Wait For I/O Completion  . . . . . . . . . . . 100
   460					;       14.6    Perform Retry  . . . . . . . . . . . . . . . . 101
   461					;       14.7    Setup Channel for I/O  . . . . . . . . . . . . 102
   462					;       14.8    Save/Restore Channel Status  . . . . . . . . . 105
   463					;       14.9    Grab/Release Disk Port . . . . . . . . . . . . 107
   464					;       14.10   Disk Device Dispatch Tables  . . . . . . . . . 109
   465					;   15. Tape I/O Routines
   466					;       15.1    Read Page  . . . . . . . . . . . . . . . . . . 110
   467					;       15.2    Setup Channel  . . . . . . . . . . . . . . . . 111
   468					;       15.3    Backspace  . . . . . . . . . . . . . . . . . . 112
   469					;       15.4    Dispatch Tables  . . . . . . . . . . . . . . . 113
   470					;   16. Physical Address Checking  . . . . . . . . . . . . . . 116
   471					;   17. Error Message Tables . . . . . . . . . . . . . . . . . 119
   472					;   18. Clear Core . . . . . . . . . . . . . . . . . . . . . . 120
   473					;   19. Get Non-EXE File From Disk . . . . . . . . . . . . . . 121
   474					;   20. Get EXE File From Disk . . . . . . . . . . . . . . . . 122
   475					;       20.1    Directory Block  . . . . . . . . . . . . . . . 123
   476					;       20.2    Entry Vector/PDV Blocks  . . . . . . . . . . . 127
   477					;       20.3    Check Memory Page 0  . . . . . . . . . . . . . 128
   478					;   21. Save Memory on DUMP.EXE  . . . . . . . . . . . . . . . 129
   479					;       21.1    Get Set of Pages to Write  . . . . . . . . . . 130
   480					;       21.2    Should Page be Written?  . . . . . . . . . . . 132
   481					;       21.3    Map Index Blocks . . . . . . . . . . . . . . . 133
   482					;       21.4    Add Entry to EXE Dir Page  . . . . . . . . . . 134
   483					;       21.5    Write EXE Dir Page . . . . . . . . . . . . . . 135
   484					;       21.6    Report Error . . . . . . . . . . . . . . . . . 136
   485					;   22. Literals . . . . . . . . . . . . . . . . . . . . . . . 137
   486					;   23. End of BOOT Code . . . . . . . . . . . . . . . . . . . 138
   487					;   24. Patching BOOT Under Timesharing  . . . . . . . . . . . 139
   488					;   25. End of BOOT  . . . . . . . . . . . . . . . . . . . . . 141
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 4
BOOT	MAC	16-Feb-88 20:26		Comments on Debugging

   489						SUBTTL Comments on Debugging
   490
   491						COMMENT \
   492
   493					   EEEEEEEEEEEEEEE   DDDDDDDDDDDD     DDDDDDDDDDDD    TTTTTTTTTTTTTTT
   494					   EEEEEEEEEEEEEEE   DDDDDDDDDDDD     DDDDDDDDDDDD    TTTTTTTTTTTTTTT
   495					   EEEEEEEEEEEEEEE   DDDDDDDDDDDD     DDDDDDDDDDDD    TTTTTTTTTTTTTTT
   496					   EEE               DDD         DDD  DDD         DDD       TTT
   497					   EEE               DDD         DDD  DDD         DDD       TTT
   498					   EEE               DDD         DDD  DDD         DDD       TTT
   499					   EEE               DDD         DDD  DDD         DDD       TTT
   500					   EEE               DDD         DDD  DDD         DDD       TTT
   501					   EEE               DDD         DDD  DDD         DDD       TTT
   502					   EEEEEEEEEEEEEEE   DDD         DDD  DDD         DDD       TTT
   503					   EEEEEEEEEEEEEEE   DDD         DDD  DDD         DDD       TTT
   504					   EEEEEEEEEEEEEEE   DDD         DDD  DDD         DDD       TTT
   505					   EEE               DDD         DDD  DDD         DDD       TTT
   506					   EEE               DDD         DDD  DDD         DDD       TTT
   507					   EEE               DDD         DDD  DDD         DDD       TTT
   508					   EEE               DDD         DDD  DDD         DDD       TTT
   509					   EEE               DDD         DDD  DDD         DDD       TTT
   510					   EEE               DDD         DDD  DDD         DDD       TTT
   511					   EEEEEEEEEEEEEEE   DDDDDDDDDDDD     DDDDDDDDDDDD          TTT
   512					   EEEEEEEEEEEEEEE   DDDDDDDDDDDD     DDDDDDDDDDDD          TTT
   513					   EEEEEEEEEEEEEEE   DDDDDDDDDDDD     DDDDDDDDDDDD          TTT
   514
   515
   516					Now that I have your attention, here are a few hints on debugging BOOT with
   517					EDDT.  The first thing that needs to be done is to create an EXE file with both
   518					BOOT and EDDT in it.  This critical step is done with LINK and would look
   519					something like the example below.  To assemble BOOT with proper debugging
   520					instructions set BDEBUG non zero.  (If you fail to do this, KDDT's pages will
   521					not be placed in the vitrual map and KDDT will hang once BOOT turns virtual
   522					memory on.)
   523
   524					It is sometimes a problem finding a hole in the monitor's image such that when
   525					the monitor is loaded, BOOT's KDDT will not be overwritten.  For V6, KDDT is
   526					loaded at 500000; for V6.1 KDDT is loaded at 300000.  These values may have to
   527					be adjusted for certain monitors (see the symbols at DDTLEN to do this).
   528
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 5
BOOT	MAC	16-Feb-88 20:26		Comments on Debugging

   529
   530					Now for how to link it:
   531
   532					@LINK
   533					*/SET:.LOW.:40000		;BOOT CODE GOES HERE
   534					*/SET:ERCOD:301000		;KDDT GOES HERE
   535					*BOOT,KDDT,DXMCA.RMC/G		;(*BOOT,KDDT,DXMCA.RMC,DXMCE.RMC/G - TO INCLUDE
   536									; RP20 MICROCODE)
   537
   538					@SAVE BOOT.EXE
   539
   540					If you get a message like:
   541
   542						?LNKPCL PROGRAM TOO COMPLEX TO LOAD, SAVING AS FILE DSK:005LNK.EXE
   543
   544					Simply rename that file to BOOT.EXE - the file is ok.
   545
   546					To test the exe file:
   547
   548					@GET BOOT.EXE
   549					@START 300000
   550
   551					-- you should now get a DDT prompt
   552
   553					ENT=
   554
   555					-- You should now see the value of the symbol displayed (40000)
   556
   557					If either of these tests fail, you blew it and must start over.
   558
   559					The .LOW. PSECT is BOOT.  PSECT ERCOD is KDDT.  The above LINK commands load
   560					KDDT at 300000 and BOOT at 40000.  DXMCA.RMC is the TU70 microcode and needs to
   561					be linked even if you have no TU70.  DXMCE.RMC is the RP20 microcode; loading
   562					it (for debugging) is optional.
   563
   564					Step number two is to get the system to the point where it has typed "BOOT>" at
   565					you (i.e.  KLI and friends).  assuming you are using directory <ENGEL> the
   566					following is a typical example of how to load the BOOT being debugged:
   567
   568					BOOT><ENGEL>BOOT.EXE/L
   569					BOOT>/G300000
   570					EDDT
   571
   572					Now you are in EDDT and can access any of BOOT's symbols that occur before
   573					FNDDEV.  There are couple of tricky maneuvers to get to FNDDEV.  Once at FNDDEV
   574					you can use all the symbols after FNDDEV.  The following is an attempt to step
   575					you through all of that.  But first, a few words about the general flow of it
   576					all.
   577
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 6
BOOT	MAC	16-Feb-88 20:26		Comments on Debugging

   578
   579					BOOT drops in to wherever you set .LOW. (e.g.  40000).  At GOTCOR it moves
   580					itself + N preceding low core pages to high core, while moving an equivalent
   581					number of high core pages to low core.  This little goody causes all the
   582					symbols to point to incorrect addresses, for a short time.  The code that moves
   583					all this stuff around runs in the ACS.  BOOT also builds maps for the ultimate
   584					"CONO PAG," that starts the mapping.  One of these maps is built at SETPTB.
   585					There is a conditional there to build a 256K map and include EDDT into the
   586					mapped boot space).
   587
   588					Once boot has mapped itself you can use all the symbols past FNDDEV and set
   589					breakpoints as freely as you like.  What follows is a cookbook approach to
   590					getting to FNDDEV.
   591
   592					(When we last saw the computer it had typed EDDT at us.  We will continue from
   593					there.)
   594
   595					1.	Set a breakpoint at DBG1. This is a JRST 1 to the code that
   596						moves BOOT to high core.
   597
   598					2.	Type ENT$G to start BOOT.
   599
   600					3.	At the breakpoint set a new breakpoint at DBG2 (i.e. DBG2$b).
   601						This breakpoint is in an AC.
   602
   603					4.	Type $P
   604
   605					5.	You have hit the second breakpoint.  Now set the third.  Set this
   606						breakpoint at DBG3 (i.e DBG3$B).
   607
   608					6.	Type $P
   609
   610					7.	Type three (3) alt X's ($X) to get past the CONO PAG, to FNDDEV.
   611						If the KL goes into limbo after the 1'st $X, KDDT was not mapped
   612						properly - this shouldn't happen unless you've been playing with the
   613						code at SETPTB.
   614
   615					8.	You are now at FNDDEV. Get rid of the three breakpoints you set.
   616						This step is very important as you have set a breakpoint in the ACS.
   617						Thus, you have to type $B.
   618
   619					9.	From here on it is just like monitor debugging.  Good luck.
   620
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 7
BOOT	MAC	16-Feb-88 20:26		Comments on Debugging

   621
   622					10.	Well, not quite.  One of the more annoying things that can happen to
   623						you is the loss of symbols.  This may happen twice, depending on how
   624						far into the loading process you monitor BOOT with DDT.  The first
   625						occurrence happens when the CLRCOR routine clears page 0, destroying
   626						the symbol-table pointer in .JBSYM (116).  The second occurence happens
   627						when BOOT loads in page 0 of the .EXE file, effectively replacing
   628						BOOT's symbol-table pointer with that of the .EXE file.  You will
   629						suddenly see a new set of totally inappropriate symbols.
   630
   631						The BDEBUG conditional provides for the generation of code and data
   632						storage to save and restore the symbol table pointer
   633						semi-automatically.
   634
   635						After the first occurrence of symbol lossage, do the following:
   636
   637						1.  Make note of the current PC.  Restart KDDT with:
   638
   639						        300000$G
   640
   641						    You will again see the DDT herald displayed.
   642
   643						3.  Do $: - this clears DDT's symbol table cache.  Now you
   644						    have BOOT symbols again.
   645
   646						4.  Put a breakpoint at the old PC, and do pc$G to get there.
   647						    You are ready to debug again.
   648
   649						After the second occurrence of symbol lossage, you must essentially
   650						repeat the above.  If you intend to monitor the loaded .EXE file (with
   651						it's own copy of DDT), then make the following changes to the
   652						procedure:
   653
   654						Either:
   655
   656						1.  Don't recover BOOT's symbols after the second-occurrence of
   657						    lossage.
   658
   659						Or:
   660
   661						1.  Before recovering BOOT's symbols after the second occurrence of
   662						    lossage, manually move the contents of location 116 to somewhere
   663						    in core (E.G. the patch area) or write down the contents.  This
   664						    is the pointer to the .EXE file BOOT is currently loading.
   665
   666						2.  Before BOOT transfers control to the loaded .EXE file (at
   667						    DOSTRT), deposit the .EXE file's symbol table pointer in 116.
   668						    As soon as EDDT (or even MDDT) is initialized, the symbol table
   669						    pointer will be read and DDT will have the correct symbols.
   670
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 8
BOOT	MAC	16-Feb-88 20:26		Comments on Debugging

   671
   672					11.	Patching.  It is sometime convenient to patch BOOT under timesharing,
   673						but the trick is to compensate for all symbols above and including
   674						FNDDEV pointing to the wrong place.  This accomplished by PMAPing the
   675						low-core BOOT pages into their usual high-core pages.  The BDEBUG
   676						conditional will automatically generate pre/post DDT code that plays
   677						this PMAP game and sets up the DDT location in JOBDAT to point to the
   678						preamble code.  Simply GET the .EXE file and enter DDT with the DDT
   679						command.  BE SURE TO EXIT DDT WITH ^Z (just like monitor patching).
   680
   681						The BDEBUG conditional also creates the PATCH patching area.  This area
   682						can be used to patch either pre-FNDDEV or post FNDDEV code.  Patching
   683						is intended to make debugging easier, not to provide a mechanism for
   684						distributing bug fixes to the field.
   685
   686						Always remember that future monitor changes could cause the resident
   687						monitor to overlay both the PATCH area and KDDT.
   688
   689
   690								BOOT's EXE-image map
   691
   692
   693						40		ENT + initialization code
   694						41(772)		FNDDEV - high-core code
   695						42(773)		high-core code
   696						43(774)		high-core code
   697						44(775)		high-core code
   698						45(776)		high-core code
   699						46(777)		high-core code
   700						47		moving code (BOTMOV), DX20A ucode
   701						50		DX20A ucode
   702						51		DX20A ucode
   703						52		DX20A ucode
   704						53		DX20A ucode
   705
   706
   707						300-332		KDDT+BOOT DDT preamble code (if present)
   708
   709
   710						773(41)		high-core code (in position)
   711						774(42)		high-core code (in position)
   712						775(43)		high-core code (in position)
   713						776(44)		high-core code (in position)
   714						777(45)		high-core code (in position)
   715		
   716
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 9
BOOT	MAC	16-Feb-88 20:26		Comments on Debugging

   717						0		*************************		*************************
   718								*			*		*			*
   719								*			*		*			*
   720								*			*		*			*
   721								*			*		*			*
   722								*			*		*			*
   723						LODBAS:       ##*#######################*##	SL	*************************
   724							      # *			* #		*BBBBBBBBBBBBBBBBBBBBBBB*
   725							      # *			* #		*BBBBBBBBBBBBBBBBBBBBBBB*
   726							      # *			* #		*BBBBBBBBBBBBBBBBBBBBBBB*
   727							      # +++++++++++++++++++++++++ #		*BBBBBBBBBBBBBBBBBBBBBBB*
   728							      # +     MOVEABLE CODE	+ #		*BBBBBBBBBBBBBBBBBBBBBBB*
   729							      # +			+ #		*BBBBBBBBBBBBBBBBBBBBBBB*
   730							      # +			+ #		*BBBBBBBBBBBBBBBBBBBBBBB*
   731						LODTOP:	      ##+#######################+##		*************************
   732						MCSPAG:		+      MOVING CODE	+ 		*			*
   733								+			+ 		*			*
   734								+++++++++++++++++++++++++ 		*			*
   735								+      MICRO CODE	+		*			*
   736								+			+		*			*
   737								+			+		*			*
   738								+			+		*			*
   739						MCEPAG:		+++++++++++++++++++++++++	EL	*			*
   740								*			*		*			*
   741								*			*		*			*
   742								*			*		*			*
   743								*			*		*			*
   744								*			*		*			*
   745								*			*		*			*
   746								*			*		*			*
   747								*			*		*			*
   748								*			*		*			*
   749								*			*		*			*
   750						TOPBAS:	      %%*%%%%%%%%%%%%%%%%%%%%%%%*%%		*************************
   751							      % *			* %		*MMMMMMMMMMMMMMMMMMMMMMM*
   752							      % *			* %		*MMMMMMMMMMMMMMMMMMMMMMM*
   753							      % *			* %		*MMMMMMMMMMMMMMMMMMMMMMM*
   754							      % *			* %		*MMMMMMMMMMMMMMMMMMMMMMM*
   755							      % *			* %		*MMMMMMMMMMMMMMMMMMMMMMM*
   756							      % *			* %		*MMMMMMMMMMMMMMMMMMMMMMM*
   757							      % *			* %		*MMMMMMMMMMMMMMMMMMMMMMM*
   758						TOPTOP:	      %%*%%%%%%%%%%%%%%%%%%%%%%%*%%		*************************
   759								*     CORE > 256K	*		*			*
   760								*     (IF PRESENT)	*		*			*
   761								*			*		*			*
   762								*			*		*			*
   763								*************************		*************************
   764
   765						LEGEND:		BOOT IN PHYSICAL MEMORY			MEMORY BEFORE PAGE MOVEMENT
   766								+ = BOOT DROP-IN WINDOW			B = PAGES OWNED BY BOOT
   767								# = SOURCE AREA				M = MONITOR PAGES
   768								% = TARGET AREA				SL = START LOST PAGES
   769													EL = END LOST PAGES
   770
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 10
BOOT	MAC	16-Feb-88 20:26		Comments on Debugging

   771						0		*************************		*************************
   772								*			*		*			*
   773								*			*		*			*
   774								*			*		*			*
   775								*			*		*			*
   776								*			*		*			*
   777						LODBAS:		*************************	SL	*************************
   778								*MMMMMMMMMMMMMMMMMMMMMMM*		*???????????????????????*
   779								*MMMMMMMMMMMMMMMMMMMMMMM*		*???????????????????????*
   780								*MMMMMMMMMMMMMMMMMMMMMMM*		*???????????????????????*
   781								*MMMMMMMMMMMMMMMMMMMMMMM*		*???????????????????????*
   782								*MMMMMMMMMMMMMMMMMMMMMMM*		*???????????????????????*
   783								*MMMMMMMMMMMMMMMMMMMMMMM*		*???????????????????????*
   784								*MMMMMMMMMMMMMMMMMMMMMMM*		*???????????????????????*
   785						LODTOP:		*************************		*???????????????????????*
   786						MCSPAG:		*			*		*???????????????????????*
   787								*			*		*???????????????????????*
   788								*			*		*???????????????????????*
   789								*			*		*???????????????????????*
   790								*			*		*???????????????????????*
   791								*			*		*???????????????????????*
   792								*			*		*???????????????????????*
   793						MCEPAG:		*			*	EL	*************************
   794								*			*		*			*
   795								*			*		*			*
   796								*			*		*			*
   797								*			*		*			*
   798								*			*		*			*
   799								*			*		*			*
   800								*			*		*			*
   801								*			*		*			*
   802								*			*		*			*
   803								*			*		*			*
   804						TOPBAS:		*************************		*			*
   805								*BBBBBBBBBBBBBBBBBBBBBBB*		*                       *
   806								*BBBBBBBBBBBBBBBBBBBBBBB*		*                       *
   807								*BBBBBBBBBBBBBBBBBBBBBBB*		*                       *
   808								*BBBBBBBBBBBBBBBBBBBBBBB*		*                       *
   809								*BBBBBBBBBBBBBBBBBBBBBBB*		*                       *
   810								*BBBBBBBBBBBBBBBBBBBBBBB*		*                       *
   811								*BBBBBBBBBBBBBBBBBBBBBBB*		*                       *
   812						TOPTOP:		*************************		*                       *
   813								*			*		*			*
   814								*			*		*			*
   815								*			*		*			*
   816								*			*		*			*
   817								*			*		*			*
   818								*************************		*************************
   819
   820						LEGEND:		MEMORY AFTER PAGE MOVEMENT		ADDRESS SPACE OF DUMP
   821								B = PAGES OWNED BY BOOT			? = LOST PAGES (FILE HOLE)
   822								M = MONITOR PAGES			SL = START LOST PAGES
   823													EL = END LOST PAGES
   824					\	;END COMMENT BLOCK
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 11
BOOT	MAC	16-Feb-88 20:26		Definitions -- Version 

   825						SUBTTL Definitions -- Version 
   826
   827					;Define BOOT version
   828
   829		   	   000000		V%WHO==0		;Who last edited
   830		   	   000011		V%MAJOR==11		;Major version
   831		   	   000000		V%MINOR==0		;Minor version
   832		   	   000315		V%EDIT==315		;OCTAL edit number
   833
   834					;These definitions reflect that version of the monitor for which
   835					;BOOT's loading behavior was radically changed.
   836
   837		   	   000006		M%MAJ==6
   838		   	   000000		M%MIN==0
   839		   	   006070		M%EDT==6070
   840
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 12
BOOT	MAC	16-Feb-88 20:26		Definitions -- Assembly Parameters

   841						SUBTTL Definitions -- Assembly Parameters
   842
   843					; * * * *
   844					;ASSEMBLY PARAMETERS
   845
   846					IFNDEF BDEBUG,<BDEBUG==0>	;[7.1001] NO DEBUGGING CODE BY DEFAULT
   847
   848					IFNDEF PORG,<PORG==^D64*^D512>	;PHYSICAL ORIGIN OF CODE
   849
   850					;IFNDEF FTKLIPA,<FTKLIPA==0>	;SUPPORT FOR KLIPA/KLNI
   851		   	   000000	FTKLIPA==0			;REMOVE KLIPA/KLNI SUPPORT
   852					IFNDEF FT.UDB,<FT.UDB==0>	;USER MODE DEBUG
   853					IFNDEF FT.MTA,<FT.MTA==0>	;MAG TAPE PART 2 IF NONZERO
   854					IFNDEF FT.EXE,<FT.EXE==1>	;LOAD EXE FORMAT FILES
   855					IFNDEF FT.PRT,<FT.PRT==3>	;0 - JUST GLOBALS FOR SWPMON
   856									;1 = STANDALONE PART 1
   857									;2 = PART 2
   858									;3 = STANDALONE PART 1&2
   859					IFN KLFLG,<			;ONLY ALLOW DX20 CODE IF KL10
   860					IFNDEF FT.DX2,<FT.DX2==1>	;DX20/TU7X CODE IF NONZERO
   861					IFNDEF FT.TM8,<FT.TM8==1>	;TM78/TU78 CODE IF NON-0
   862					IFNDEF FT.RP2,<FT.RP2==0>	;RP20 CODE/MICROCODE IF NON-0
   863					>				;END IFN KLFLG
   864					IFE KLFLG,<
   865					IFNDEF FT.DX2,<FT.DX2==0>	;DX20/TU7X CODE IF NONZERO
   866					IFNDEF FT.TM8,<FT.TM8==0>	;TM78/TU78 CODE IF NON ZERO
   867					>				;END IFE KLFLG
   868
   869					;PROCESSOR (ETC.) BITS
   870
   871		   	   200000	AP.RES==1B19			;IOB RESET (SAME ON KI AND KL)
   872		   	   020000	AP.CLR==1B22
   873		   	   010000	AP.SET==1B23
   874					IFN KLFLG,<
   875		   	   002000	AP.NXM==1B25
   876					>
   877					IFN KLFLG,<
   878		   	   022000	AP.RNX==AP.CLR!AP.NXM
   879					>
   880
   881					IFN KLFLG,<
   882		   124000  000000	IMMPTR==FLD(IMMCOD,PTRCOD)!PTWR!PTCACH	;IMMEDIATE PAGE POINTER.
   883									;1B2 = IMMEDIATE POINTER
   884									;1B4 = WRITEABLE
   885									;1B6 = CACHEABLE
   886					>
   887
   888					;STATE TABLE DEFINATION
   889					;
   890		   	   000035	STTSIZ==^D29			;SIZE OF STATE TABLE
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 13
BOOT	MAC	16-Feb-88 20:26		Definitions -- RH20

   891						SUBTTL Definitions -- RH20
   892
   893					;Definitions for RH20
   894
   895		   	   000540	RH0==540
   896		   	   000000	ICA==0				;INITIAL CHANNEL CONTROL WORD ADDRESS IN EPT
   897
   898		   	   004000	.RHRAE==1B24			;REGISTER ACCESS ERROR
   899		   	   002000	.RHMBR==1B25			;MASSBUS RESET
   900		   	   001000	.RHCTE==1B26			;CLEAR TRANSFER ERROR
   901		   	   000400	.RHMBE==1B27			;MASSBUS ENABLE
   902		   	   000200	.RHCLP==1B28			;RESET CLP
   903		   	   000040	.RHAIE==1B30			;ATTENTION INTERRUPT ENABLE
   904		   	   000020	.RHSTP==1B31			;STOP TRANSFER
   905		   	   000010	.RHDON==1B32			;DONE
   906		   700000  000000	.RHSBR==70B5			;SBAR
   907		   710000  000000	.RHSTR==71B5			;STCR
   908		   740000  000000	.RHIVR==74B5			;INTERRUPT VECTOR REGISTER
   909		   	   000000	.TMCSR==00B5			;CONTROL REG.
   910		   	   000071	.TMRDF==71			;READ FORWARD AND GO
   911		   	   000033	.TMBSF==33			;BACKSPACE BLOCK
   912		   	   000007	.TMRWF==07			;REWIND
   913		   010000  000000	.TMDSR==01B5			;DEVICE STATUS REG
   914		   020000  000000	.TMERR==02B5			;ERROR REGISTER
   915		   	   020000	TMSPIP==20000
   916		   	   010000	TMSMOL==10000			;MEDIUM ON LINE(TELL YOU FORTUNE, 10KCS?)
   917		   	   000200	TMSDRY==200			;DRIVE/FORMATTER READY
   918		   	   000010	TMSIDB==10			;PE ID BURST SEEN
   919		   040000  000000	.TMATR==04B5			;ATTENTION SUMMARY REGISTER
   920		   050000  000000	.TMFCR==05B5			;FRAME COUNT REG.
   921		   060000  000000	.TMDTR==06B5			;DRIVE TYPE REG.
   922		   110000  000000	.TMTCR==11B5			;TAPE CONTROL REG.
   923		   	   001400	TMCD8==1400			;800 BPI
   924		   	   002000	TMCD16==2000			;1600 BPI
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 14
BOOT	MAC	16-Feb-88 20:26		Definitions -- DX20

   925						SUBTTL Definitions -- DX20
   926
   927		   	   000060	.DXATP==60			;DX20 DEVICE TYPE CODE FOR TAPES
   928		   	   000061	.DXBTP==61			;DX20 DEVICE TYPE CODE FOR RP20 DISKS
   929
   930		   200000  000000	.TDSTR==20B5			;DRIVE STATUS/STATUS INDEX
   931		   	   002000	.TDDEB==1B25			;DEVICE END
   932		   210000  000000	.TDDNR==21B5			;DRIVE NUMBER, DRIVE MODE, DATA MODE
   933		   	   016000	.TDMOD==1B23!14B27		;1600 BPI, CORE DUMP MODE
   934		   230000  000000	.TDTER==23B5			;TRACK IN ERROR, FLAGS
   935		   260000  000000	.TDE0R==26B5			;EXTENDED STATUS REG 0
   936		   030000  000000	.TDMNR==3B5			;MAINTENANCE REGISTER
   937		   	   000020	.TDSCB==1B31			;SINGLE CYCLE THE DX20
   938		   	   000004	.TDSTB==1B33			;START DX20
   939		   200000  000000	.TDSTR==20B5			;ENDING STATUS
   940		   210000  000000	.TDTCR==21B5			;CONTROL REGISTER
   941		   230000  000000	.TDFLR==23B5			;FLAGS
   942		   240000  000000	.TDAYR==24B5			;ASYNCHRONOUS STATUS
   943		   260000  000000	.TDE0R==26B5			;EXTENDED STATUS REGISTER 0
   944		   270000  000000	.TDE1R==27B5			;EXTENDED STATUS REGISTER 1
   945		   300000  000000	.TDIRR==30B5			;IR REGISTER
   946		   310000  000000	.TDPCR==31B5			;PC REGISTER
   947		   	   100000	.TDICB==1B20			;ENABLE IR FROM CRAM
   948		   	   040000	.TDCIB==1B21			;ENABLE CRAM FROM IR
   949		   	   020000	.TDPEB==1B22			;ENABLE PC LOAD
   950		   	   010000	.TDPIB==1B23			;ENABLE PC AUTO INCREMENT
   951		   360000  000000	.TDIBR==36B5			;IBUS AND BR REGISTER
   952		   020000  000000	.TDERR==2B5			;Error register
   953		   010000  000000	.TDSTS==1B5			;Status register
   954		   	   100000	  .TDATB==1B20			;ATTENTION
   955		   	   040000	  .TDCEB==1B21			;COMPOSITE ERROR BIT
   956		   	   010000	  .TDMPR==1B23			;MICROPROCESSOR RUNNING BIT
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 15
BOOT	MAC	16-Feb-88 20:26		Definitions -- TM78

   957						SUBTTL Definitions -- TM78
   958
   959		   	   000101	.T8TYP==101			;TM78 DRIVE TYPE
   960		   010000  000000	.T7ICD==1B5			;INTERRUPT CODE (DATA XFER)
   961		   	   000077	T7.ICD==77			;MASK FOR ALL INTERRUPT CODES
   962		   	   000001	ICD.DN==1			;DONE, NO ERRORS
   963		   	   000021	ICD.SR==21			;SHORT RECORD
   964		   	   000002	ICD.EF==2			;END OF FILE
   965		   	   000003	ICD.BT==3			;BOT
   966		   020000  000000	.T7FMT==2B5			;FORMAT
   967		   	   100000	T7.SER==100000			;SUPPRESS ERROR RECOVERY (REPOSITIONING)
   968		   	   030000	T7.CDP==30000			;CORE-DUMP
   969		   	   000004	T7.1RC==4			;READ 1 RECORD
   970		   050000  000000	.T7BC==5B5			;BYTE COUNT
   971		   070000  000000	.T7SR==7B5			;STATUS REGISTER
   972		   	   100000	T7.RDY==100000			;DRIVE IS READY
   973		   130000  000000	.T7ICN==13B5			;INTERRUPT CODE (NON DATA XFER)
   974		   140000  000000	.T7ND0==14B5			;NON-DATA-XFER COMMAND, DRIVE 0
   975		   210000  000000	.T7TMS==21B5			;TM STATUS
   976		   	   100000	T7.TMR==1B20			;TM READY
   977		   	   000007	T7.REW==7			;REWIND
   978		   	   000011	T7.SNS==11			;SENSE
   979		   	   000023	T7.BSR==23			;BACKSPACE RECORD
   980		   	   000071	T7.RDF==71			;READ
   981
   982		   004000  000000	LR==1B6				;LOAD REGISTER
   983		   	   000001	GO==1B35			;GO BIT IN CONTROL REGISTER
   984		   002000  000000	RCLP==1B7			;RESET CLP (IN DATAO)
   985		   000200  000000	STLW==1B10			;STORE LOGOUT STATUS WORDS (IN DATAO)
   986		   	   200000	DTES==1B19			;Disable Transfer Error Stop Bit
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 16
BOOT	MAC	16-Feb-88 20:26		Definitions -- RP04

   987						SUBTTL Definitions -- RP04
   988
   989		   	   000000	R4%CSR==00B5			;Control and status register 1
   990		   	   004000		CR.DVA==4000		;Device available
   991
   992		   010000  000000	R4%DSR==01B5			;DEVICE STATUS REGISTER
   993		   	   100000		DS.ATA==1B20		;Attention
   994		   	   040000		DS.ERR==1B21		;Composite error
   995		   	   020000		DS.PIP==1B22		;Position in progress
   996		   	   010000		DS.MOL==1B23		;Media on line
   997		   	   004000		DS.WRL==1B24		;Write-locked
   998		   	   002000		DS.LST==1B25		;Last sector transfered
   999		   	   001000		DS.PGM==1B26		;Programmable
  1000		   	   000400		DS.DPR==1B27		;Drive present
  1001		   	   000200		DS.DRY==1B28		;Drive ready
  1002		   	   000100		DS.VV==1B29		;Volume valid
  1003
  1004		   	   010700	DS.GUD==DS.MOL!DS.DPR!DS.DRY!DS.VV
  1005		   	   174700	DS.MSK==DS.GUD!DS.ATA!DS.ERR!DS.PIP!DS.WRL ;MASK OF STATUS BITS TO CONSIDER
  1006
  1007		   020000  000000	R4%ER1==02B5			;DEVICE ERROR-REGISTER ONE
  1008		   040000  000000	R4%ATN==04B5			;RP04 PSEUDO-ATTENTION REGISTER
  1009		   050000  000000	R4%DST==05B5			;DESIRED SECTOR/TRACK REGISTER
  1010		   060000  000000	R4%DTR==06B5			;DRIVE TYPE REGISTER
  1011		   140000  000000	R4%ER2==14B5			;DEVICE ERROR-REGISTER TWO
  1012		   120000  000000	R4%DCA==12B5			;DESIRED CYLINDER REGISTER
  1013		   150000  000000	R4%ER3==15B5			;DEVICE ERROR-REGISTER THREE
  1014		   400000  000000	RH%XFR==40B5			;RH INITIATE DATA TRANSFER REGISTER
  1015
  1016		   	   000777	R4%TYP==777B35			;DEVICE TYPE FIELD IN TYPE REGISTER
  1017		   	   000020	.R4TYP==20			;RP04 DEVICE TYPE CODE
  1018		   	   000021	.R5TYP==21			;RP05 DEVICE TYPE CODE
  1019		   	   000022	.R6TYP==22			;RP06 DEVICE TYPE CODE
  1020		   	   000042	.R7TYP==42			;RP07 DEVICE TYPE CODE
  1021
  1022		   	   000004	R4%CSK==02B34			;RP04 SEEK FUNCTION
  1023		   	   000006	R4%CRC==03B34			;RE-CALIBRATE FUNCTION IN CONTROL REGISTER
  1024		   	   000010	R4%CDC==04B34			;RP04 DRIVE CLEAR FUNCTION
  1025		   	   000012	R4%REL==5B34			;Release port function
  1026		   	   000020	R4%RIP==10B34			;READ-IN PRESET FUNCTION
  1027		   	   000022	R4%CPA==11B34			;PACK ACKNOWLEDGE FUNCTION IN CONTROL REGISTER
  1028		   	   000060	R4%CWR==30B34			;RP04 WRITE FUNCTION
  1029		   	   000070	R4%CRD==34B34			;RP04 READ FUNCTION
  1030		   	   775120	RHERR==775120			;RH10 CONI ERROR BITS
  1031		   	   141520	TIMOUT==^D50000			;COUNT FOR SOJG TIMEOUT
  1032
  1033		   	   000100	CCWSZ==PGSIZ/DSKSIZ		;Size of each channel's ccw region
  1034		   	   000007	MAXCHN==7			;Max channel number
  1035		   	   000010	NCHAN==^D8			;Number of channels
  1036		   	   000007	MAXDRV==7			;Max number of drives/channel
  1037		   	   000007	KLPCHN==7			;KLIPA/KLNI ON CHAN 7 IS A KLIPA
  1038		   400003  000000	KLPMSK==400003,,0		;CONI BITS WHICH DEFINE A KLIPA/KLNI
  1039					DEFSTR(KLP.VR,T1,^D29,^D8)	;FIELD FOR VERSION NUMBER IN T1
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 17
BOOT	MAC	16-Feb-88 20:26		Definitions -- TOPS-20 Disks

  1040						SUBTTL Definitions -- TOPS-20 Disks
  1041
  1042					; INDEX BLOCK ADDRESS DEFINITIONS
  1043
  1044					;[7.1228] Note: if DSKMSK (in STG) is changed, the following must also change!
  1045
  1046		   777774  000000	DSKMSK==777774,,0		;[7.1228] Non-address data to mask
  1047					MSKSTR IDXADR,,<^-DSKMSK>	;[7.1228] Useful part of disk address from XB
  1048
  1049					; EXE FILE DEFINITIONS
  1050
  1051		   	   001776	.EXDIR==1776			;DIRECTORY BLOCK TYPE
  1052		   	   001777	.EXEND==1777			;END BLOCK TYPE
  1053		   	   001775	.EXENT==1775			;ENTRY BLOCK TYPE
  1054		   	   001774	.EXPDV==1774			;PDV block type
  1055
  1056					;Miscellaneous definitions
  1057
  1058		   	   001000		PGSIZ==^D512		;Size Of A Page
  1059		   	   000200		BLKSIZ==^D128		;Size of a block
  1060		   	   000001		EXPGSZ==1		;Size of EXE file directory page
  1061		   	   000002		.DRSIZ==2		;Size of EXE file directory entry
  1062		   	   000000		MONACB==0		;Monitor AC block
  1063		   	   000141		ELOC==141		;Start address of EDDT
  1064		   	   000062		NDMPM==^D50		;Max # dump page-write failures to report
  1065		   777760  000000		MAPBTS==-1B13		;Useless bits returned by MAP instruction
  1066		   	   000020		LCORAD==20		;Lowest core addr dumped/loaded
  1067
  1068					MSKSTR RPT,,777B8		;Repeat count in EXE file dir entry
  1069					;MSKSTR ADR,,<^-RPT>		;[7.1228] Page address in EXE file dir entry
  1070
  1071					; JOB DATA DEFINITIONS
  1072
  1073		   	   000116	.JBSYM==116			;SYMBOL TABLE POINTER
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 18
BOOT	MAC	16-Feb-88 20:26		Definitions -- TOPS-20 Disks

  1074
  1075					; STRUCTURE DEFINITIONS
  1076
  1077					DEFSTR (DIDIR,A%FP0,17,18)	;DIRECTORY BLOCK TYPE (=.EXDIR)
  1078					DEFSTR (DISIZ,A%FP0,35,18)	;SIZE OF DIRECTORY BLOCK
  1079					DEFSTR (DIFLG,0,8,9)		;FLAGS
  1080					   DEFSTR (DI%WRT,0,2,1)	;WRITE ACCESS ALLOWED BIT
  1081					DEFSTR (DIFIL,0,35,27)		;FILE PAGE NUMBER
  1082					DEFSTR (DIRPT,1,8,9)		;REPEAT COUNT
  1083					DEFSTR (DIPRO,1,35,27)		;PROCESS PAGE NUMBER
  1084
  1085					DEFSTR (VBTYP,0,17,18)		;ENTRY VECTOR BLOCK TYPE (=.EXENT)
  1086					DEFSTR (VBSIZ,0,35,18)		;SIZE OF ENTRY VECTOR BLOCK (=.VBSIZ)
  1087					DEFSTR (VBCNT,1,35,36)		;ENTRY VECTOR COUNT
  1088					DEFSTR (VBADR,2,35,36)		;ADDRESS OF ENTRY VECTOR
  1089					DEFSTR (EBTYP,0,17,18)		;BLOCK TYPE CODE FOR END BLOCK (=.EXEND)
  1090					DEFSTR (EBSIZ,0,35,18)		;SIZE OF END BLOCK
  1091
  1092		   	   000002	.DISIZ==2			;SIZE OF DESCRIPTORS
  1093		   	   000001	.EBSIZ==1			;SIZE OF END BLOCK
  1094		   	   000004	.VBSIZ==4			;SIZE OF ENTRY VECTOR BLOCK
  1095
  1096					; DEFAULT SIZE AND ADDRESS OF ENTRY VECTOR IN DUMP FILE
  1097
  1098		   	   000140	EVADR==140			;DEFAULT STARTING ADDRESS
  1099		   	   000001	EVLEN==1			;DEFAULT LENGTH OF VECTOR
  1100
  1101					;FDB STRUCTURE DEFINITIONS (MOST ARE IN PROLOG)
  1102
  1103					DEFSTR (FBCTL,.FBCTL,35,36)	;CONTROL BITS FROM FDB
  1104					DEFSTR (FBBYV,.FBBYV,35,36)	;POINTER TO PAGE COUNT WORD
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 19
BOOT	MAC	16-Feb-88 20:26		Definitions -- Macros

  1105						SUBTTL Definitions -- Macros
  1106
  1107					;MACRO TO PERFORM IO OPERATIONS - USE IS INDEPENDENT OF WHICH DISK
  1108
  1109					; MACRO DEFINITION FOR RH20
  1110
  1111					DEFINE IOOP(OP,OPR)
  1112					<IFIDN <OP><CLEAR>,<
  1113						CALL IOXCT
  1114						CONO .-.,2000
  1115						CALL IOXCT
  1116						CONO .-.,5610
  1117					>				;END IFIDN CLEAR
  1118					IFIDN <OP><SKIPNOERR>,<
  1119						CALL IOXCT
  1120						CONSZ .-.,RHERR		;RH ERROR BITS
  1121					>				;END IFIDN SKIPNOERR
  1122					IFIDN <OP><XCTOP>,<
  1123						CALL IOXCT
  1124						DATAO .-.,OPR		;EXECUTE OP
  1125					>				;END IFIDN XCTOP
  1126					IFIDN <OP><SKIPDONE>,<
  1127						CALL IOXCT
  1128						CONSO .-.,.RHDON	;SKIP IF DONE
  1129					>				;END IFIDN SKIPDONE
  1130					>				;END DEFINE IOOP
  1131
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 20
BOOT	MAC	16-Feb-88 20:26		Definitions -- ACs and Flags

  1132						SUBTTL Definitions -- ACs and Flags
  1133
  1134					;AC USAGE
  1135
  1136		   	   000000	F==0				;FLAGS
  1137		   	   000001	T1=1				;GP TEMP
  1138		   	   000002	T2=2				; ...
  1139		   	   000003	T3=3				; ...
  1140		   	   000004	T4=4				; ...
  1141		   	   000005	Q1=5				;GENERALLY HOLDS A SINGLE CHARACTER
  1142		   	   000006	Q2=6				;BYTE POINTER TO AN INPUT STRING
  1143		   	   000007	Q3=7				;BYTE POINTER TO AN OUTPUT STRING
  1144		   	   000010	P1=10				;OFTEN PRESERVED
  1145		   	   000011	P2=11				; ..
  1146		   	   000012	P3=12				;A NUMBER
  1147		   	   000013	P4=13				;DESTINATION POINTER (DISK ADDR, BYTE PTR)
  1148		   	   000014	P5=14				;DISK ADDRESS OR PARSER STATE
  1149		   	   000015	P6=15				;DEVICE TYPE INDEX
  1150		   	   000000	  TM.IDX==0			;TM02/TM03
  1151		   	   000001	  DA.IDX==1			;DX20 FOR TAPES
  1152		   	   000002	  T8.IDX==2			;TM78
  1153		   	   000003	  DB.IDX==3			;DX20 FOR RP20 DISKS
  1154		   	   000016	CX=16				;RETURN ADDRESS FOR VBOOT ENTRY FROM MONITOR
  1155									; NO INTERNAL BOOT CODE MUST USE THIS AC!!!
  1156		   	   000017	P=17				;STACK POINTER
  1157
  1158					;BIT ALLOCATION IN F
  1159
  1160		   	   000000	DFFLGS==0			;Default flags
  1161		   400000  000000	F.WRIT==1B0			;WRITE FILE IF ON
  1162		   200000  000000	F.PHYS==1B1			;PHYSICAL ADDRESSES IF ON, VIRTUAL IF OFF
  1163		   100000  000000	F.CLR==1B2			;CLEAR CORE IF ON
  1164		   040000  000000	F.STRT==1B3			;START AFTER LOAD IF ON
  1165		   020000  000000	F.ACT==1B4			;SOME ACTION REQUEST IF ON
  1166		   010000  000000	F.BACK==1B5			;BACKUP SCANNER IF ON
  1167		   004000  000000	F.OUT==1B6			;THIS STATE HAS PRODUCED OUTPUT IF ON
  1168		   002000  000000	F.DUMP==1B7			;DUMP VS SAVE IF ON
  1169		   001000  000000	F.EDDT==1B8			;LOAD AND START AT LOCATION 141
  1170		   000400  000000	F.ALL==1B9			;LOAD ALL PAGES FROM 0 TO VFREE
  1171		   000200  000000	F.NCHL==1B10			;DON'T USE .JBSYM TO CHANGE PAGE LIMITS
  1172		   000100  000000	F.INFO==1B11			;DISPLAY PROGRAM INFORMATION
  1173		   000010  000000	F.WRT==1B14			;ON=Write/OFF=Read
  1174		   000002  000000	F.DPER==1B16			;DUMP ERROR - FILE TOO SMALL
  1175		   000001  000000	F.IOER==1B17			;IO ERROR DURING DUMP
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 21
BOOT	MAC	16-Feb-88 20:26		Definitions -- Physical Core Parameters

  1176						SUBTTL Definitions -- Physical Core Parameters
  1177
  1178					;HOW MANY MEGS CAN WE DUMP?
  1179					;NMEG = INTEGRAL MEGS,,FRACTIONAL MEGS (# 1/4 MEGS)
  1180		   000004  000000		NMEG=4,,0
  1181
  1182		   	   000020		NCSTPG==<<<NMEG>&<-1,,0>>*4>_-22+<<NMEG>&<0,,-1>>
  1183									;NUMBER OF CST PAGES - THIS DETERMINES THE
  1184									; MAXIMUM AMOUNT OF CORE THAT CAN BE DUMPED
  1185									;100 IS A SAFE NUMBER FOR ANY SIZE MACHINE.
  1186									; 1 CST PAGE = 256K CORE = 1000^D8 PAGES
  1187									; 4 CST PAGES = 1 MEG
  1188
  1189		   	   017777		PHYPAG== <NCSTPG*1000>-1 ;HIGHEST PHYSICAL PAGE WE CAN DUMP
  1190		   000017  777000		PHYADR== PHYPAG*1000	;ADDRESS OF HIGHEST PHYSICAL PAGE WE CAN DUMP
  1191
  1192					;STORAGE ALLOCATION - *NOTE*  ADDRESSES USED ARE ALL VIRTUAL!
  1193					;		THE ORDER OF THESE CANNOT BE CHANGED INDISCRIMINATELY
  1194
  1195
  1196					   IFN BDEBUG,<
  1197	000074   				LOC 74
  1198	000074     000000  260000		DDTPRE			;Address of DDT preamble
  1199	000000'00				RELOC
  1200						IF1,PRINTX [Debugging turned on]
  1201					   >
  1202
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 22
BOOT	MAC	16-Feb-88 20:26		Definitions -- Pages used for BOOT

  1203						SUBTTL Definitions -- Pages used for BOOT
  1204
  1205					;PAGES USED FOR BOOT.  ALLOCATION IS DONE UPWARD FROM VORG (HIGHER TO
  1206					; LOWER ADDRESSES).
  1207					;WHEN DONE, VFREE IS THE LAST FREE PAGE BEFORE BOOT BEGINS.
  1208
  1209					DEFINE PG(ADDR,SIZE<1>),<
  1210					VFREE==VFREE-<SIZE>		;;MOVE FREE PAGE DOWN BY REQUIRED PAGES
  1211					ADDR==<VFREE+1>_9		;;THEN DEFINE DESIRED ADDRESS
  1212					>
  1213
  1214		   	   000777		VORG==777		;LAST PAGE USED BY BOOT
  1215		   	   000777		VFREE==VORG		;INITIALIZE LAST FREE PAGE
  1216		   	   001000		PHYORG==VORG+1		;FIRST PHYSICAL PAGE BEYOND VORG (ASSUMED TO
  1217									;BE 1'ST PAGE IN PHYSICAL REGION ABOVE VBOOT'S
  1218									;VIRTUAL REGION)
  1219		   	   000006		A$CODE==6		;# Code pages allocated
  1220
  1221					PG	A%CODE,A$CODE		;Code pages
  1222		   	   772000			A%CODE==A%CODE	;Get value in listing
  1223					PG	A%FP0			;FILE PAGE ZERO WINDOW
  1224		   	   771000			A%FP0==A%FP0	;Get value in listing
  1225					PG	A%XB			;INDEX BLOCK BUFFER
  1226		   	   770000			A%XB==A%XB	;Get value in listing
  1227					PG	A%SXB			;SUPER INDEX BLOCK BUFFER
  1228		   	   767000			A%SXB==A%SXB	;Get value in listing
  1229					PG	A%PTB			;PAGE TABLE PAGE
  1230		   	   766000			A%PTB==A%PTB	;Get value in listing
  1231					PG	A%EPT			;EXEC PROCESS TABLE
  1232		   	   765000			A%EPT==A%EPT	;Get value in listing
  1233					PG	A%DPG			;DIRECTORY HEADER PAGE
  1234		   	   764000			A%DPG==A%DPG	;Get value in listing
  1235					PG	A%DIR			;DIRECTORY DATA PAGE
  1236		   	   763000			A%DIR==A%DIR	;Get value in listing
  1237					PG	A%CCW			;Page containing CCW's
  1238		   	   762000			A%CCW==A%CCW	;...
  1239					PG	A%CST,NCSTPG		;CORE STATUS TABLE PAGES
  1240		   	   742000			A%CST==A%CST	;Get value in listing
  1241		   	   742000		A%VFST==<VFREE+1>_9	;ADDRESS OF FIRST VBOOT PAGE
  1242		   	   777000		A%VORG==VORG_9		;ADDRESS OF LAST VBOOT PAGE
  1243		   	   772000		A%DATA==A%CODE		;LOCATION WHERE DATA GOES
  1244		   	   000741		VFREE==VFREE		;FORCE VALUE OF VFREE INTO LISTING
  1245
  1246		   	   740000		A%POST==740000		;ASSUMED VALUE OF A%VFST IN POSTLD
  1247					IF2,<IFL A%VFST-A%POST,<PRINTX % A%VFST changed, POSTLD must be edited>>
  1248
  1249					;If the above message occurs, the value of A%VFST in POSTLD must be
  1250					;changed to be .LE. the value in this assembly.  A%POST above must
  1251					;be changed to be the same as the value put in POSTLD so that
  1252					;the check here will continue to work.
  1253
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 23
BOOT	MAC	16-Feb-88 20:26		Definitions -- Debugging

  1254						SUBTTL Definitions -- Debugging
  1255
  1256						;Debugging definitions
  1257		   	   000007	DBG2==MOVAC+MVCLEN		;Breakpoint in AC for moving code
  1258		   	   771125	DBG3==A%CODE+TOP2-ENT-1000	;This is the location for the final breakpoint
  1259									;before VM is turned on
  1260
  1261					;Definitions for DDT
  1262
  1263		   	   000040	DDTLEN==40			;[7.1224] Assumed length of DDT in pages
  1264		   	   000260	DDTPG1==260			;[7.1001] First page of DDT (if present)
  1265		   	   000320	DDTPGL==DDTPG1+DDTLEN		;Last page of DDT (including preamble)
  1266		   	   261000	DDTADR==<DDTPG1+1>_9		;DDT load address
  1267		   	   260000	DDTPRE==DDTADR-1000		;DDT preamble code
  1268
  1269					;O is the relocation value for relocating symbols under timesharing
  1270					;(Only useful if older KDDT  or user DDT is used)
  1271		   000000000000#	O==ENT-A%FP0
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 24
BOOT	MAC	16-Feb-88 20:26		Definitions -- Storage

  1272						SUBTTL Definitions -- Storage
  1273
  1274					DEFINE ALLOC(VAR,SIZ)
  1275					<VAR=A.DATA
  1276					IFNB <SIZ><A.DATA==A.DATA+SIZ>
  1277					IFB <SIZ><A.DATA==A.DATA+1>
  1278					>
  1279
  1280		   	   772000		A.DATA==A%DATA		;INITIALIZE COUNTER
  1281
  1282
  1283					;NOTE -- DATA BETWEEN Z.STRT AND Z.END GETS ZEROED ON EACH COMMAND
  1284
  1285		   	   772000	Z.STRT==A.DATA
  1286
  1287					ALLOC(ISTRNG)			;INPUT STRING POINTER SAVE VARIABLE
  1288					ALLOC(START)			;STARTING ADDRESS
  1289
  1290					;DO NOT REORDER THE FOLLOWING WITHOUT CHANGING DEFAULT PROCESSING
  1291
  1292		   	   772002	DEFBEG==A.DATA			;BEGINNING OF DEFAULTED AREA
  1293					ALLOC(FILSTR)			;POINTER TO FILE NAME STRING
  1294					ALLOC(DIRSTR)			;POINTER TO DIRECTORY STRING
  1295					ALLOC(EXTSTR)			;POINTER TO FILE EXTENSION STRING
  1296					ALLOC(VERSTR)			;POINTER TO VERSION STRING
  1297					ALLOC(SWSTR)			;POINTER TO SWITCH STRING
  1298					ALLOC(UBSTR)			;POINTER TO UPPER BOUND STRING
  1299					ALLOC(LBSTR)			;POINTER TO LOWER BOUND STRING
  1300					ALLOC(DIRTMP)			;POINTER TO SUBDIRECTORY STRING
  1301		   	   772011	DEFEND==A.DATA-1		;END OF DEFAULTED DATA AREA
  1302
  1303					;END OF DO NOT REORDER
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 25
BOOT	MAC	16-Feb-88 20:26		Definitions -- Storage

  1304
  1305					ALLOC(D$FIL,8)			;STRING STORAGE FOR FILE NAME
  1306					ALLOC(D$DIR,8)			;STRING STORAGE FOR DIR NAME
  1307					ALLOC(D$TMP,8)			;STRING STORAGE FOR SUBDIRECTORY NAME
  1308					ALLOC(D$EXT,8)			;STRING STORAGE FOR EXTENSION STRING
  1309					ALLOC(D$VER,2)			;STRING STORAGE FOR VERSION STRING
  1310					ALLOC(D$SW,2)			;STRING STORAGE FOR SWITCH STRING
  1311					ALLOC(D$ISTR,^D25)		;STRING STORAGE FOR INPUT STRING
  1312					ALLOC(D$UB,2)			;STRING STORAGE FOR UPPER BOUND STRING
  1313					ALLOC(D$LB,2)			;STRING STORAGE FOR LOWER BOUND STRING
  1314
  1315					ALLOC(VERNUM)			;VERSION NUMBER OF FILE
  1316					ALLOC(LWRLIM)			;LOWER PAGE LIMIT FOR GET/SAVE
  1317					ALLOC(UPRLIM)			;UPPER PAGE LIMIT FOR GET/SAVE
  1318					ALLOC(FNDSTR)			;STRING POINTER TO CURRENT NAME STRING
  1319
  1320					; DO NOT CHANGE THE ORDER OF THE FOLLOWING TWO WORDS
  1321
  1322					ALLOC(FNDSTE)			;STRING POINTER TO CURRENT EXT
  1323					ALLOC(FNDSTV)			;CURRENT VERSION NUMBER
  1324
  1325					; ***** NOTE WELL *****  FNDSTE MUST BE FOLLOWED IMMEDIATELY BY
  1326					;			 FNDSTV BECAUSE THEY ARE STORED USING A
  1327					;			 DMOVEM INSTRUCTION IN ROUTINE GETIDX !
  1328
  1329					;DISK DEPENDENT DATA
  1330
  1331					ALLOC(MAXUNI)			;LARGEST LOGICAL UNIT IN STR
  1332					ALLOC(FNDCMD)			;BYTE POINTER TO INITIAL TYPEIN
  1333					ALLOC(IOCNTR)			;Number of I/O request to dump
  1334					ALLOC(PGCNTR)			;Numnber of pages written
  1335					ALLOC(DEV)			;POINTER/ SIXBIT DEVICE NAME
  1336
  1337		   	   772125	Z.END==A.DATA-1
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 26
BOOT	MAC	16-Feb-88 20:26		Definitions -- Storage

  1338
  1339					; FOLLOWING LOCATIONS NOT CLEARED ON EACH COMMAND
  1340
  1341		   	   000010		DSKSIZ==^D8
  1342					ALLOC(FILPAG)			;PAGE # READ FROM FILE
  1343					ALLOC(SAVSLT)			;[7.1001] SAVES TSTSLT CONTENTS DURING PHYZRO
  1344					ALLOC(STRNAM)			;SIXBIT NAME OF FS OR DEV (I.E. MT:)
  1345					ALLOC(CURNAM)			;STR NAME BOOT IS CURRENTLY LOOKING AT
  1346					ALLOC(DSKTYP)			;UNIT TYPE FOR DISK STRUCTURES
  1347		   	   772132	TAPTYP==DSKTYP			;UNIT TYPE FOR TAPES
  1348		   	   400000	ENTFLG==400000			;Entry in use flag in DSKTAB
  1349					ALLOC(DSKTAB,DSKSIZ)		;LOGICAL/PHYSICAL MAPPING
  1350									;Disk format is:  flag+chan,,unit
  1351									;Tape format is:  flag,,cckkuu
  1352									;			cc = 6bit channel
  1353									;			kk = 6bit controller
  1354									;			uu = 6bit unit
  1355					ALLOC(CURPAG)			;CURRENTLY MAPPED DIRECTORY PAGE
  1356									; ** CAUTION: DO NO INITIALIZE TO 0 **
  1357					ALLOC(DIORG)			;HOLDS DISK INDEX ORIGIN
  1358					ALLOC(XBNUM)			;-1 FOR SHORT FILE, XB # OF MAPPED XB
  1359									; IF THIS FILE IS A LONG FILE
  1360					ALLOC(HIADDR)			;Highest Physical Page number
  1361					ALLOC(CCWADR)			;Store phys. addrs. of CCW page
  1362					ALLOC(CURCHN)			;Current channel
  1363					ALLOC(CURSEC)			;Sector I want to read/write
  1364					ALLOC(CURCYL)			;Cylinder...
  1365					ALLOC(CURUN)			;Unit...
  1366					;The following table is used for error recovery. The most recent xfer
  1367					;on each channel stores the pertinent information here
  1368		   	   000000		XADR==0			;Word 0 - memory address
  1369		   	   000001		XDSK==1			;Word 1 - disk address
  1370		   	   000002		XCNT==2			;Word 2 - READ/WRITE bit and count of pages
  1371		   	   000003		XCHAN==XCNT+1		;Number of entries per channel
  1372					ALLOC(CHNTAB,NCHAN*XCHAN)	;Channel table
  1373					ALLOC(ERACS,17)			;AC's(not P) stored here during error retries
  1374					ALLOC(IOIP)			;Keep track of channels with I/O in progress
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 27
BOOT	MAC	16-Feb-88 20:26		Definitions -- Storage

  1375
  1376					;The following symbols are the defined offsets into the device type table
  1377					;which gets setup in GOTDV when the device type is discovered
  1378		   	   000000		N.CLP==0		;# cylinders/unit
  1379		   	   000001		N.SCL==1		;# sectors/cylinder
  1380		   	   000002		N.STK==2		;# sectors/track
  1381		   	   000003		N.BPP==3		;# blocks/page
  1382		   	   000004		D.DOIO==4		;Routine to start the I/O
  1383		   	   000005		D.SET==5		;Routine to setup I/O (sector,cylinder, etc..)
  1384		   	   000006		TYPSZ==D.SET+1		;Size of table
  1385					ALLOC(DEVDSP,TYPSZ)		;Device dispatch table
  1386
  1387					;Device table parameters
  1388
  1389		   	   000004	N.BKP4==4			;Number of blocks per page
  1390		   	   000574	N.SCL4==^D380			;SECTORS PER CYL (RP04/RP05/RP06)
  1391		   	   002540	N.SCL7==^D1376			;SECTORS PER CYL RP07
  1392		   	   000620	N.CLP4==^D400			;CYLS PER UNI (RP04/5)
  1393		   	   001440	N.CLP6==^D800			;CYLS PER UNI (RP06)
  1394		   	   001165	N.CLP7==^D629			;CYLS PER UNI (RP07)
  1395		   	   000053	N.STK7==^D43			;SECTORS PER TRACK (RP07)
  1396		   	   000024	N.STK4==^D20			;SECTORS PER TRACK (RP04)
  1397		   	   000001	N.SPG2==1			;SECTORS PER PAGE (RP20)
  1398		   	   000137	MXPDMP==N.SCL4/N.BKP4		;[7.1228] Maximum number of pages for dumping
  1399
  1400					ALLOC(MAXCOR)			;MAX CORE AVAILABLE
  1401					IFN FT.MTA,<ALLOC(DIRFLG)>	;NON-ZERO IF EXE DIRECTORY HAS BEEN READ
  1402					ALLOC(LODBAS)			;START OF SOURCE AREA (SEE DIAGRAMS)
  1403					ALLOC(LODTOP)			;END OF SOURCE AREA
  1404					ALLOC(TOPBAS)			;START OF TARGET AREA (SEE DIAGRAMS)
  1405					ALLOC(TOPTOP)			;END OF TARGET AREA
  1406					ALLOC(MCSPAG)			;STARTING MICROCODE PAGE
  1407									; THIS PAGE ALSO CONTAINS THE BOOT MOVING CODE
  1408					ALLOC(MCEPAG)			;ENDING MICROCODE PAGE
  1409					ALLOC(DXAMCV)			;WORD TO HOLD DXMCA MCODE VERSION
  1410					ALLOC(DXBMCV)			;WORD TO HOLD DXMCB MCODE VERSION
  1411					ALLOC(DERCNT)			;COUNT OF REPORTED DUMP ERRORS
  1412					ALLOC(PFFLG)			;Indicates CHKNXM page failed
  1413					ALLOC(PASS)			;INDICATES WHICH PASS OF UNIT-SEARCH CODE
  1414					ALLOC(NOLDDX)			;Inhibits multiple loadings of DX20's
  1415					ALLOC(BTFLGS)			;BOOT parameter flags from home block
  1416					ALLOC(MSGHDR)			;Address of message header
  1417
  1418					;Bits provided by KLINIT on a special load condition
  1419
  1420		   400000  000000	F11.LD==1B0			;DO DEFAULT LOAD
  1421		   200000  000000	F11.DM==1B1			;DO DUMP OF CORE
  1422		   	   000001	F11.OK==1B35			;[7.1224] (flag to monitor) BOOTFL is valid
  1423
  1424					ALLOC(KLIFLG)			;[7.1224] Save flags from KLINIT for monitor
  1425					ALLOC(LODTYP)			;TYPE OF MONITOR LOAD:0-DEFAULT,NO OPR COMMAND
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 28
BOOT	MAC	16-Feb-88 20:26		Definitions -- Storage

  1426
  1427					IFN BDEBUG,<
  1428					ALLOC (EDDBLK,100)		;Reserve breakpoint block for KDDT
  1429					ALLOC (MONPDV,1)		;Allocate dummy pointer to PDV
  1430					  INTERN EDDBLK,MONPDV		;Now, make them global
  1431					>
  1432					ALLOC(MONLOD)			;0 = LOADING RESIDENT MONITOR, N=WHICH PASS
  1433					ALLOC(PORTLK)			;0= can't lock this device
  1434									;-1 = lock port on this device
  1435					ALLOC(PFLAGS)			;PROGRAM FLAGS SAVE-WORD
  1436					ALLOC(DEXEPC)			;DUMP.EXE DISK PAGE COUNT
  1437					ALLOC(DIRST)			;Working byte-pointer to directory string
  1438					ALLOC(ZOOT,5)			;THIS IS TO PUT SOME SPACE BETWEEN THE PDL AND
  1439									;LODTYP.  WITH ALL THE -N(P) ACCESS I SUSPECT
  1440									;A BUG IN SOME OF THEM BUT CAN'T PROVE IT.
  1441		   	   000050	PDLEN==^D40			;PUSH DOWN STACK SIZE
  1442					ALLOC(PDL,PDLEN)		;PUSH DOWN STACK
  1443					ALLOC (DTCNOW)			;ALLOCATE CONO WORD
  1444					ALLOC(PIAINI,MAXCHN+1)		;RH20 Int vector reg,, PI assignment
  1445					ALLOC(APRSER)			;CPU SERIAL NUMBER
  1446
  1447					;GLOBALS FOR THE REST OF THE MONITOR
  1448
  1449		   	   763000	VBSTRT==:A%DIR			;START OF VBOOT PRIVATE AREA
  1450		   	   765000	VBEPT==:A%EPT			;WHERE VBOOT EXPECTS EPT TO BE MAPPED
  1451		   	   777000	VBEND==:A%VORG			;VBOOT ITSELF
  1452		   	   772144	VBDDAT==:DIORG			;START OF VBOOT DISK DATA AREA
  1453
  1454					;Lower core locations are in PROLOG
  1455					IFE FT.PRT,<END>		;END HERE IF SYMBOLS-ONLY ASSEMBLY
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 29
BOOT	MAC	16-Feb-88 20:26		Definitions -- Storage

  1456
  1457					;LOCATIONS IN DIR AREA
  1458
  1459		   	   763003	SYMBOT==A%DIR+3			;BOTTOM OF ST AREA
  1460		   	   763004	SYMTOP==A%DIR+4			;TOP OF ST AREA
  1461
  1462		   	   771200	HOMNAM==A%FP0+200+0		;SIXBIT /HOM/
  1463		   	   771201	HOMID==A%FP0+200+1		;PACK ID
  1464		   	   771203	HOMSNM==A%FP0+200+3		;STRUCTURE NAME
  1465		   	   771204	HOMLUN==A%FP0+200+4		;# UNI IN STR,,THIS UNI #
  1466		   	   771210	HOMRXB==A%FP0+200+10		;ROOT INDEX BLOCK
  1467		   	   771217	HOMBTF==A%FP0+200+17		;BOOT PARAMETER FLAGS
  1468		   	   771364	HOMSER==A%FP0+200+164		;APR SERIAL NUMBER
  1469		   	   771376	HOMCOD==A%FP0+200+176		;FUNNY CODE
  1470		   	   707070	CODHOM==707070			;TYPE CODE FOR HOME BLOCK
  1471
  1472					; EXEC PROCESS TABLE LOCATIONS
  1473
  1474		   	   000540	EPTEST==540			;INDEX TO EXEC SECTION TABLE
  1475		   	   000421	EPTATR==421			;INDEX TO ARITHMETIC TRAP INSTRUCTION
  1476		   	   000422	EPTPDO==422			;INDEX FOR PDL OVERFLOW
  1477		   	   000760	EPTSPT==760			;INDEX TO SPT (ONE WORD TABLE FOR VBOOT)
  1478
  1479					;UPT DEFINITIONS
  1480
  1481					IFN KLFLG,<
  1482		   	   000500	UPTPFW==500			;PAGE FAIL ADDRESS
  1483		   	   000503	UPTPFN==503			;INDEX TO PAGE FAIL WORD
  1484		   	   000502	UPTPFO==502			;PAGE FAIL PC WORD
  1485					>
  1486
  1487					; OPDEF FOR STORING VALUES IN PAGER REGISTERS
  1488
  1489		   256200  000000	OPDEF XCTU [XCT 4,0]		;PXCT DEFINITION
  1490					;OTHER OPDEFS
  1491
  1492		   701100  000000	OPDEF CLRPT [701100,,0]		;CLEAR PAGING MEMORY
  1493
  1494					; PAGER REGISTERS
  1495
  1496					IFN KLFLG,<
  1497		   	   000000	CSTMSK==0			;CST MASK, ANDED WITH CST ENTRY
  1498		   	   000001	CSTDTA==1			;CST DATA, IORED WITH CST ENTRY
  1499		   	   000002	CSTADR==2			;CST BASE ADDRESS
  1500		   	   000003	SPTADR==3			;SPT BASE ADDRESS
  1501					>				;END OF IFN KLFLG
  1502
  1503
  1504						;ERROR MESSAGE MACRO
  1505						DEFINE $ERROR (CODE,ADDR)
  1506					<	JRST [MOVEI Q2,CODE
  1507						IFB <ADDR>,<JRST ERRTYP>
  1508						IFNB <ADDR>,<JRST ADDR>
  1509					]
  1510					>
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 30
BOOT	MAC	16-Feb-88 20:26		Main Entry Point

  1511						SUBTTL Main Entry Point
  1512
  1513					;Layout of page starting at ENT starting at .LOW.:
  1514					;	0 to 137	Code with paging turned off
  1515					;	140-777		reserved for UPT/EPT
  1516
  1517					IFN FT.PRT&1,<
  1518
  1519					;  ***** MAIN ENTRY POINT AND INITIALIZATION  *****
  1520
  1521					;THE FRONT END AND BOOT:
  1522					;	1.	ON AN AUTO-RELOAD (ALIAS "SPECIAL" LOAD):
  1523					;		A.	FRONT END SETS IN AC0:
  1524					;			1.  1B0 - NO PROMPTING
  1525					;			2.  1B1 - DUMP
  1526					;			3.  B2-B35 - ZERO
  1527					;		B.	FRONT END STARTS BOOT AT ENT+1
  1528					;
  1529					;	2.	ON A DIALOG-LOAD (ALIAS "DEFAULT" LOAD, "MANUAL" LOAD, ETC):
  1530					;		A.	FRONT END DOES NOT TOUCH AC0
  1531					;		B.	FRONT END STARTS BOOT AT ENT
  1532
  1533					; SET UP RELOCATION CONSTANT IN ACCUMULATOR 16
  1534
  1535	000000'00			ENT:
  1536
  1537					IFN KLFLG,<
  1538						;This constitutes BOOT's "entry-vector".
  1539						;@SET ENTRY-VECTOR 40000 3 allows I VER to identify
  1540						;the version # of BOOT.EXE under timesharing
  1541
  1542	000000'00  630 00 0 00 000000 		TDZ F,F		;DIALOGUE LOAD ALWAYS IF STARTED HERE
  1543	000001'00  334 00 0 00 000000 		SKIPA		;SPECIAL LOAD. PRESERVE BITS
  1544	000002'00  0 011 00 000315 		BYTE	(3)V%WHO(9)V%MAJOR(6)V%MINOR(18)V%EDIT
  1545					>				;END IFN KLFLG
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 31
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging Off

  1546						SUBTTL	Initialization -- Paging Off
  1547
  1548					;Do I/O reset.
  1549
  1550	000003'00  7 000 20 0 00 200000 	CONO APR,AP.RES		;IOB RESET - CLEAR I/O DEVICES
  1551
  1552					;Turn off paging and traps. Declare EPT address to be 0.
  1553
  1554					IFN KLFLG,<
  1555	000004'00  7 010 24 0 00 000015 	CONI PAG,15		;GET CURRENT STATE OF PAGER
  1556	000005'00  405 15 0 00 600000 		ANDI 15,PGCLKE!PGCLDE	;CLEAR ALL BUT CACHE STRATEGY BITS
  1557					>				;END IFN KLFLG
  1558					IFN KLFLG,<
  1559	000006'00  7 010 20 0 15 000000 	CONO PAG,0(15)		;TURN OFF PAGING
  1560					>				;END IFN KLFLG
  1561
  1562					;Figure out where we landed and determine offset for self-relocating code.
  1563
  1564	000007'00  205 17 0 00 254016 		MOVSI 17,(<JRST (16)>)	;RETURN INST
  1565	000010'00  265 16 0 00 000017 		JSP 16,17		;GET CURRENT PC
  1566	000011'00  275 16 0 00 000011 		SUBI 16,.-ENT		;RETURN HERE
  1567									;16 NOW CONTAINS RUNTIME ORIGIN OF BOOT
  1568	000012'00  404 00 0 16 000126 		AND F,[F11.DM!F11.LD]-ENT(16) ;SAVE ONLY DEFINED BITS
  1569
  1570					;Set up the UPT and EPT to be the same page, starting at the end of the
  1571					;code. Point to a page fault handler. AC 15 contains control bits used in
  1572					;previous CONO PAG/WREBR.
  1573
  1574	000013'00  201 01 0 16 007007 		MOVEI T1,PAGTRP-ENT(16)	;THE PAGE FAULT HANDLER
  1575					IFN KLFLG,<
  1576	000014'00  202 01 0 16 007503 		MOVEM T1,CODEND-ENT+UPTPFN(16) ;SET UP TEMPORARY EPT/UPT
  1577					>
  1578	000015'00  201 01 0 16 007000 		MOVEI T1,CODEND-ENT(16) ;GET LOCAL ADDRESS OF EPT (END OF CODE)
  1579	000016'00  242 01 0 00 777767 		LSH T1,-11		;MAKE IT A PAGE NUMBER
  1580	000017'00  434 15 0 00 000001 		IOR 15,T1		;ADD PAGE NUMBER TO THE CONTROL BITS
  1581					IFN KLFLG,<
  1582	000020'00  7 010 20 0 15 000000 	CONO PAG,0(15)		;MAKE EBR POINT TO THAT PAGE
  1583	000021'00  670 01 0 16 000127 		TDO T1,[1B2+1B18]-ENT(16) ;AND SET UBR AND INHIBIT METER UPDATE
  1584					>				;END OF IFN KLFLG
  1585
  1586	000022'00  7 010 14 0 00 000001 	DATAO PAG,T1		;MAKE UBR POINT TO ITS PAGE
  1587
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 32
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging Off

  1588					; DETERMINE HIGHEST PHYSICAL CORE ADDRESS .LE. 256K
  1589
  1590					IFN KLFLG,<
  1591	000023'00  7 000 20 0 00 022000 J1:	CONO APR,AP.RNX		;ENABLE PAGE-FAIL INTERRUPTS FOR APR AT LEVEL 0
  1592	000024'00  201 10 0 00 777000 		MOVEI P1,777000		;START AT PAGE 512
  1593	000025'00  330 00 0 10 000020 	FNDCOR:	SKIP 20(P1)		;REFERENCE PAGE
  1594	000026'00  7 000 34 0 00 002000 TSTCOR:	CONSO APR,AP.NXM	;NXM?
  1595	000027'00  254 00 0 16 000034 		JRST GOTCOR-ENT(16)	;NO, NOW HAVE HIGEST ADDR
  1596	000030'00  7 000 20 0 00 022000 J2:	CONO APR,AP.RNX		;NXM - RESET
  1597	000031'00  275 10 0 00 001000 		SUBI P1,1000		;TRY NEXT LOWER PAGE
  1598	000032'00  326 10 0 16 000025 		JUMPN P1,FNDCOR-ENT(16)	;LOOP
  1599	000033'00  254 04 0 16 000033 		HALT .-ENT(16)		;INTERLEAVE PROBABLY BAD
  1600					>				;END OF IFN KLFLG
  1601
  1602					; MOVE DISK SEARCH CODE TO TOP OF CORE WHILE MOVING TOP TO BOOTS OLD PLACE
  1603					;***NOTA BENE - P MUST REMAIN PRESERVED UNTIL FNDDEV!!
  1604
  1605						;ARRIVE HERE WITH P1 CONTAINING HIGHEST CORE ADDR .LE. 256K
  1606	000034'00			GOTCOR:
  1607					;Exchange BOOT code pages with monitor pages at high end of memory
  1608		   	   000001		  MOVAC==1		;AC TO LOAD MOVING CODE INTO
  1609	000034'00  541 14 0 00 000001 		HRRI P5,MOVAC		;PUT CODE IN T1
  1610	000035'00  505 14 0 16 007000 		HRLI P5,BOTMOV-ENT(16)	;GET BOOT MOVING CODE
  1611	000036'00  251 14 0 00 000007 		BLT P5,T1+MOVEND-BOTMOV	;MOVE MOVING CODE TO AC'S
  1612	000037'00  551 11 0 16 751000 		HRRZI P2,A%VFST-A%CODE+1000(16)	;WHERE WE START MOVING FROM
  1613									;P2 POINTS TO SOURCE AREA (SEE DIAGRAMS)
  1614	000040'00  202 11 0 00 000017 		MOVEM P2,P		;SAVE OLD BASE
  1615	000041'00  551 12 0 10 743000 		HRRZI P3,A%VFST-A%VORG(P1)	;WHERE WE ARE MOVING IT TO
  1616									;P3 POINTS TO TARGET AREA (SEE DIAGRAMS)
  1617	000042'00  551 13 0 00 036000 		HRRZI P4,1000+A%VORG-A%VFST	;NUMBER OF WORDS TO MOVE (ROUND PAGES)
  1618	000043'00  254 00 0 00 000001 	DBG1:	JRST T1			;MOVE THE CODE
  1619
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 33
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging Off

  1620					;Here when code is moved to high end of memory. Paging is still off
  1621					;AC contents:
  1622					;	P1/ address of first word in highest existing page .LE. 777
  1623					;	P/ Address of first word of first page moved from low end of core
  1624
  1625	000044'00  551 16 0 10 772000 	CORMVD:	HRRZI 16,A%CODE-1000-A%VORG(P1)	;COMPUTE NEW BASE OF CODE
  1626	000045'00  200 14 0 00 000010 		MOVE P5,P1		;SAVE ADR OF HIGHEST PHYSICAL PAGE
  1627
  1628					; CLEAR AND SET UP EXEC PAGE TABLE (EPT)
  1629
  1630	000046'00  275 10 0 00 012000 		SUBI P1,A%VORG-A%EPT	;MOVE BASE TO START OF EPT
  1631	000047'00  201 01 0 10 000001 		MOVEI T1,1(P1)		;BUILD BLT POINTER
  1632	000050'00  504 01 0 00 000010 		HRL T1,P1		; ...
  1633	000051'00  402 00 0 10 000000 		SETZM 0(P1)		;CLR FIRST WORD
  1634	000052'00  251 01 0 10 000777 		BLT T1,777(P1)		;TO END OF EPT
  1635
  1636					;Prepare to handle traps. Ignore arithmetic overflow. For the KC, trap PDL overflow.
  1637					;On the KL, a zero will be executed
  1638
  1639					IFN KLFLG,<
  1640	000053'00  205 01 0 00 255000 		MOVSI T1,(<JFCL>)	;NO-OP ARITH TRAP INST
  1641					>				;END OF IFN KLFLG
  1642	000054'00  202 01 0 10 000421 		MOVEM T1,EPTATR(P1)	;STORE IN EPT
  1643
  1644					;POINT TO THE NEXT PAGE FAULT HANDLER
  1645
  1646	000055'00  201 01 0 00 773477 		MOVEI T1,PFERR		;THE NEXT PAGE FAULT HANDLER
  1647					IFN KLFLG,<
  1648	000056'00  202 01 0 10 000503 		MOVEM T1,UPTPFN(P1)	;TO THE UPT
  1649					>
  1650
  1651					;Save page number for combined UPT/EPT
  1652
  1653	000057'00  200 11 0 00 000010 		MOVE P2,P1		;COPY EPT BASE ADR
  1654	000060'00  242 11 0 00 777767 		LSH P2,-9		;GET PHYS PAGE #
  1655
  1656					; SET UP EXEC SECTION TABLE AND 1-WORD SPT IN EXEC PAGE TABLE
  1657
  1658	000061'00  201 01 0 10 001000 		MOVEI T1,A%PTB-A%EPT(P1) ;GET PHYSICAL ADDRESS OF PAGE TABLE
  1659	000062'00  242 01 0 00 777767 		LSH T1,-^D9		;CONVERT TO PAGE #
  1660	000063'00  202 01 0 10 000760 		MOVEM T1,EPTSPT(P1)	;SAVE 1-WORD SPT
  1661	000064'00  205 01 0 00 220000 		MOVSI T1,(FLD(SHRCOD,PTRCOD)!PTWR) ;SHARE POINTER, WRITE, SPT INDEX=0
  1662	000065'00  202 01 0 10 000540 		MOVEM T1,EPTEST(P1)	;SAVE SECTION PTR TO PAGE TABLE
  1663
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 34
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging Off

  1664					; MOVE BASE POINTER TO PAGE TABLE PAGE
  1665
  1666	000066'00  271 10 0 00 001000 		ADDI P1,A%PTB-A%EPT	;CHANGE BASE TO PHYS ADDRESS OF A%PTB
  1667
  1668					; FORM AOBJN POINTER FOR LOOPING THROUGH PAGE TABLE
  1669
  1670					IFN KLFLG,<
  1671	000067'00  201 02 0 10 754000 		MOVEI T2,A%CST-A%PTB(P1) ;PHYSICAL ADDRESS IN RH OF T2
  1672	000070'00  242 02 0 00 777767 		LSH T2,-9		;CONVERT TO # OF CST PAGE 0
  1673	000071'00  505 02 0 00 777742 		HRLI T2,-< <VORG-A%CST_-9>+1 > ;NUMBER OF PAGES TO MAP
  1674
  1675					; MAP PAGES USED BY VBOOT
  1676	000072'00  201 01 0 10 000742 		MOVEI T1,A%CST_-9(P1)	;START MAPPING AT DIRECTORY AREA
  1677
  1678						IFN BDEBUG,<
  1679					;EDDT NEEDS TO BE MAPPED WHEN BOOT GOES MAPPED.
  1680					;EDDT DOES NOT NORMALLY GET MAPPED INTO BOOT SPACE. IF YOU WANT TO DEBUG WITH
  1681					;EDDT AFTER BOOT GETS TO FNDDEV YOU NEED TO ADD THE FOLLOWING INSTRUCTIONS.
  1682					;THEY WILL CAUSE ALL OF THE FIRST 512 PHYSICAL PAGES TO APPEAR IN PAGE MAP
  1683					;**NOTA BENE - THE PATCH IS FOR SYSTEMS WITH 512K OR MORE ONLY.
  1684
  1685	000073'00  515 02 0 00 777000 		HRLZI T2,-1000		;DO THE WHOLE MAP PAGE
  1686	000074'00  200 01 0 00 000010 		MOVE T1,P1		;START AT LOCATION ZERO
  1687					>
  1688					>				;END IFN KLFLG
  1689
  1690					;HERE WE PUT THE N PAGES OF THE TARGET AREA (SEE DIAGRAMS)
  1691					;IN THE PAGE MAP
  1692
  1693	000075'00  550 03 0 00 000002 	SETPTB:	HRRZ T3,T2		;GET PHYSICAL ADR OF PAGE
  1694	000076'00  661 03 0 00 124000 		TXO T3,IMMPTR		;FORM AN IMMEDIATE POINTER
  1695	000077'00  202 03 0 01 000000 		MOVEM T3,(T1)		;STORE PAGE TABLE ENTRY
  1696	000100'00  271 01 0 00 000001 		ADDI T1,1		;POINT TO NEXT PAGE TABLE ENTRY
  1697	000101'00  253 02 0 16 000075 		AOBJN T2,SETPTB-ENT(16)	;GO MAP REMAINING PAGES
  1698
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 35
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging Off

  1699					; SET UP CST ENTRIES FOR ALL PHYSICAL CORE NOW. KC DOESN'T REQUIRE THIS
  1700					;BECAUSE CST BASE REGISTER IS SET TO 0
  1701
  1702	000102'00  275 10 0 00 024000 		SUBI P1,A%PTB-A%CST	;CHANGE BASE POINTER TO CST PAGE
  1703					IFN KLFLG,<
  1704	000103'00  200 01 0 00 000010 		MOVE T1,P1		;SET ALL SLOTS
  1705	000104'00  505 01 0 00 760000 		HRLI T1,-<NCSTPG*1000>	;ONE PAGE WORTH
  1706	000105'00  200 03 0 16 000130 		MOVE T3,[1B5+1B18]-ENT(16) ;GET A NON-ZERO CST CODE FIELD & Write bit
  1707	000106'00  202 03 0 01 000000 	SETCST:	MOVEM T3,(T1)		;STORE A CST ENTRY
  1708	000107'00  253 01 0 16 000106 		AOBJN T1,SETCST-ENT(16)	;LOOP TILL ALL CST ENTRIES SET UP
  1709					>
  1710
  1711					;Do DATAO PAG to point to the UPT. Make UPT and EPT be the same page.
  1712					;For the KL, also set previous AC block to 6 in order to initialize hardware
  1713					;tables.
  1714
  1715	000110'00  661 11 0 00 100000 		TLO P2,(PGLUBR)		;LOAD UBR
  1716					IFN KLFLG,<
  1717					;[7.1228] Should the following be "MONACB,PGCACB" instead of "MONACB!PGCACB"?
  1718	000111'00  505 11 0 00 500600 		HRLI P2,(PGLACB!PGLUBR!FLD(HWRACB,PGPACB)!FLD(MONACB!PGCACB))
  1719					>				;END OF IFN KLFLG
  1720	000112'00  7 010 14 0 00 000011 J3:	DATAO PAG,P2		; AND LOAD THE UBR
  1721
  1722					;Tell the hardware where things are, like the CST, SPT, etc.
  1723					IFN KLFLG,<
  1724	000113'00  551 01 0 10 023760 		HRRZI T1,A%EPT-A%CST+EPTSPT(P1) ;GET PHYS ADR OF SPT
  1725	000114'00  256 04 0 16 000131 		XCTU [MOVEM T1,SPTADR]-ENT(16) ;STORE SPT BASE ADDRESS IN PAGER AC 3
  1726	000115'00  256 04 0 16 000132 		XCTU [MOVEM P1,CSTADR]-ENT(16) ;STORE CST BASE ADDRESS IN PAGER AC 2
  1727	000116'00  200 01 0 16 000133 		MOVE T1,[77B5+1B18]-ENT(16)  ;Get CST mask reg
  1728	000117'00  256 04 0 16 000134 		XCTU [MOVEM T1,CSTMSK]-ENT(16) ;STORE CST MASK VALUE IN PAGER AC 0
  1729					>				;END IFN KLFLG
  1730
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 36
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging Off

  1731					;Do CONO PAG to turn on traps and paging. Use the same address for the EPT
  1732					;as for the UPT
  1733
  1734					IFN KLFLG,<
  1735	000120'00  660 11 0 00 060000 		TRO P2,PGKLMD!PGTPEN	;TRAP EN AND KL PAGING
  1736					>				;END IFN KLFLG
  1737					IFN KLFLG,<
  1738	000121'00  7 010 24 0 00 000001 	CONI PAG,T1		;GET PAGER BITS AGAIN
  1739	000122'00  405 01 0 00 600000 		ANDI T1,PGCLKE!PGCLDE	;PRESERVE CACHE BITS
  1740	000123'00  434 11 0 00 000001 		IOR P2,T1		;ADD IN CACHE BITS
  1741					>				;END IFN KLFLG
  1742					IFN KLFLG,<
  1743						DMOVE T1,[ CONO PAG,(P2) ;LOAD EBR
  1744	000124'00  120 01 0 16 000135 			   JRST FNDDEV ]-ENT(16) ;GO SET UP LOW CORE MAP
  1745					>
  1746	000125'00  254 00 0 00 000001 	TOP2:	JRST T1			;AND TURN THE PAGING ON
  1747
  1748
  1749	000126'00				LIT			
  1750	000126'00  600000  000000
  1751	000127'00  100000  400000
  1752	000130'00  010000  400000
  1753	000131'00  202 01 0 00 000003 
  1754	000132'00  202 10 0 00 000002 
  1755	000133'00  770000  400000
  1756	000134'00  202 01 0 00 000000 
  1757	000135'00  7 002 4 0 11 000000 
  1758	000136'00  254 00 0 00 772450 
  1759
  1760						IFGE .-ENT-141,<PRINTX ? No room for initial UPT>
  1761	000137'00				BLOCK 1000-<.-ENT>	;RESERVE REST OF PAGE FOR THE EPT/UPT
  1762	001000'00				BLOCK A.DATA-A%DATA	;MAKE ROOM FOR ALLOCATED VARIABLES
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 37
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging On

  1763						SUBTTL	Initialization -- Paging On
  1764
  1765					;Here when paging is turned on.
  1766
  1767	001450'00			CODE:
  1768	772450   				PHASE A.DATA
  1769
  1770					IFN KLFLG,<
  1771	772450     202 00 0 00 772252 	FNDDEV:	MOVEM F,LODTYP		;SAVE STARTING FLAGS FROM KLINIT
  1772	772451     202 00 0 00 772251 		MOVEM F,KLIFLG		;[7.1224] Save flags for KLINIT
  1773					>
  1774
  1775					;Save some info about the memory ranges that have been affected.
  1776
  1777	772452     202 17 0 00 000010 		MOVEM P,P1		;Move so we can shift it
  1778	772453     242 10 0 00 777767 		LSH P1,^D-9		;Shift to page number
  1779	772454     202 10 0 00 772233 		MOVEM P1,LODBAS		;SAVE START ADDRESS OF SOURCE AREA (SEE DIAGRAMS)
  1780	772455     201 17 0 17 035777 		MOVEI P,<1000+A%VORG-A%VFST>-1(P)	;SAVE END OF SOURCE AREA
  1781	772456     242 17 0 00 777767 		LSH P,^D-9		;Shift to page number
  1782	772457     202 17 0 00 772234 		MOVEM P,LODTOP		;LAST ADDRESS MOVED
  1783	772460     551 17 0 14 743000 		HRRZI P,A%VFST-A%VORG(P5)	;TOP ADDRESS ROUNDED TO PAGES
  1784	772461     242 17 0 00 777767 		LSH P,^D-9		;Shift to page number
  1785	772462     202 17 0 00 772235 		MOVEM P,TOPBAS		;SAVE START ADDRESS OF TARGET AREA (SEE DIAGRAM)
  1786	772463     201 14 0 14 000777 		MOVEI P5,777(P5)	;SET UP TOP OF SAVED FOR THE SAVE
  1787	772464     242 14 0 00 777767 		LSH P5,^D-9		;Shift to page number
  1788	772465     202 14 0 00 772236 		MOVEM P5,TOPTOP		;SAVE END OF TARGET AREA
  1789	772466     242 14 0 00 000011 		LSH P5,^D9		;And shift back to address
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 38
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging On

  1790
  1791					; CODE TO MAP LOW CORE USING KL STYLE PAGING
  1792
  1793	772467     403 10 0 00 000012 		SETZB P1,P3		;P1=VIRTUAL, P3=PHYSICAL PAGE #
  1794	772470     402 00 0 00 772146 		SETZM HIADDR		;Set highest address yet
  1795
  1796	772471     7 000 20 0 00 022000 SETEPT:	CONO APR,AP.RNX		;RESET NXM FLAG
  1797	772472     200 01 0 00 000012 		MOVE T1,P3		;GET PHYSICAL PAGE NUMBER
  1798	772473     661 01 0 00 120000 		TXO T1,1B2!1B4		;CODE = 1, WRITE
  1799	772474     202 01 0 10 766000 		MOVEM T1,A%PTB(P1)	;PUT ENTRY INTO PAGE TABLE
  1800	772475     200 01 0 00 000010 		MOVE T1,P1		;GET VIRTUAL PAGE #
  1801	772476     242 01 0 00 000011 		LSH T1,^D9		;CONVERT PAGE # TO ADDRESS
  1802	772477     701 02 0 01 000000 	J4:	CLRPT 0(T1)		;CLEAR THE ENTRY FIRST
  1803	772500     330 00 0 01 000020 		SKIP 20(T1)		;TRY TO REFERENCE VIRTUAL PAGE
  1804	772501     330 00 0 01 000021 		SKIP 21(T1)		;Try next 3 words
  1805	772502     330 00 0 01 000022 		SKIP 22(T1)		;... in case interleaving
  1806	772503     330 00 0 01 000023 		SKIP 23(T1)		;...   was bad
  1807	772504     7 000 30 0 00 002000 TSTMEM:	CONSZ APR,AP.NXM	;NXM OCCUR ?
  1808	772505     334 00 0 00 000000 		SKIPA			;Yes don't save this page
  1809	772506     202 12 0 00 772146 		MOVEM P3,HIADDR		;Save highest page seen yet
  1810					IFN BDEBUG,<
  1811	772507     301 12 0 00 000260 		CAIL P3,DDTPG1		;Have we done up to DDT yet?
  1812	772510     254 00 0 00 772513 		JRST TSTM1		;Yes 
  1813					>				;End IFN BDEBUG
  1814	772511     305 12 0 00 000741 		CAIGE P3,VFREE		;Have we done up to BOOT yet???
  1815	772512     344 10 0 00 772514 		AOJA P1,SETEP1		;NO, NEXT PAGE TABLE SLOT
  1816	772513     201 10 0 00 000741 	TSTM1:	MOVEI P1,TSTADD_-^D9	;And use this virtual address
  1817	772514     350 00 0 00 000012 	SETEP1:	AOS P3			;NEXT PHYSICAL PAGE #
  1818	772515     317 12 0 00 776205 		CAMG P3,[PHYPAG]	;DONE ALL OF CORE?
  1819	772516     254 00 0 00 772471 		JRST SETEPT		;NO, GO DO NEXT PAGE
  1820	772517     201 17 0 00 000741 		MOVEI P,TSTADD_-^D9	;Get physical address of 'test page'
  1821	772520     661 17 0 00 120000 		TXO P,1B2!1B4		;Setup a valid pointer
  1822	772521     202 17 0 00 766741 		MOVEM P,TSTSLT		;Restore it
  1823
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 39
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging On

  1824
  1825					IFN KLFLG,<
  1826
  1827					;Defend against memory parity errors in A%CCW (this is the page used to store
  1828					;the channel command lists) caused by the channel referencing these locations
  1829					;on a freshly-powered up machine in which these locations may "appear" to have
  1830					;parity errors.
  1831
  1832	772522     402 00 0 00 762000 		SETZM A%CCW		;WIPE OUT PARITY ERRORS
  1833	772523     200 01 0 00 776206 		MOVE T1,[A%CCW,,A%CCW+1];ZERO WHOLE AREA
  1834	772524     251 01 0 00 762777 		BLT T1,A%CCW+777	;DO IT
  1835
  1836					;Find the master DTE and start talking to it.
  1837
  1838	772525     402 00 0 00 765444 		SETZM DTEFLG		;CLEAR DONE FLAG
  1839	772526     402 00 0 00 765456 		SETZM DTEMTI		;INITIALIZE INPUT READY FLAG
  1840	772527     205 01 0 00 777774 		MOVSI T1,-DTEN		;SCAN ALL AVAILABLE DTE'S
  1841	772530     200 02 0 00 776207 		MOVE T2,[CONSO DTE,DTEPRV] ;LOOK FOR MASTER
  1842	772531     200 03 0 00 776210 		MOVE T3,[CONSO DTE,PI0ENB+7] ;LOOK FOR ANY PI ASSIGNMENT
  1843	772532     200 05 0 00 776211 		MOVE Q1,[CONO DTE,0]	;PROTOTYPE CONO
  1844	772533     256 00 0 00 000003 	SETEP3:	XCT T3			;A PI ASSIGNMENT UP?
  1845						JRST [	HRRI Q1,PIENB+PI0ENB ;NO. TRY TO SET IT
  1846							XCT Q1
  1847							XCT T3		;NOW SET?
  1848							JRST SETEP5	;NO. NON-EXISTANT DEVICE THEN
  1849							TRZ Q1,PI0ENB	;YES. TURN IT OFF
  1850							XCT Q1		;DO IT
  1851	772534     254 00 0 00 776212 			JRST .+1]	;AND PROCEED
  1852	772535     256 00 0 00 000002 		XCT T2			;THIS IT
  1853						JRST [	MOVEI T1,0(T1)	;YES. GET DTE NUMBER
  1854							LSH T1,^D26	;POSITION FOR CONO
  1855							ADD T1,[CONO DTE,0(Q1)] ;PROTOTYPE WORD
  1856							MOVEM T1,DTCNOW	;SAVE IT
  1857	772536     254 00 0 00 776222 			JRST SETEP4]	;DONE
  1858	772537     270 02 0 00 776227 	SETEP5:	ADD T2,[4B11]		;NEXT DTE
  1859	772540     270 03 0 00 776227 		ADD T3,[4B11]
  1860	772541     270 05 0 00 776227 		ADD Q1,[4B11]		;ADJUST ALL I/O INSTRUCTIONS
  1861	772542     253 01 0 00 772533 		AOBJN T1,SETEP3		;NOPE. LOOK AT NEXT
  1862	772543     254 04 0 00 772543 		HALT .			;NOT THERE. CAN'T HAPPEN
  1863	772544     201 05 0 00 004400 	SETEP4:	MOVEI Q1,.DTMMN		;MONITOR MODE ON
  1864	772545     202 05 0 00 765451 		MOVEM Q1,DTECMD		; STORE IN COMMAND
  1865	772546     201 05 0 00 020000 	J5:	MOVEI Q1,TO11DB		;RING THE BELL
  1866	772547     256 00 0 00 772436 		XCT DTCNOW		;DO IT
  1867	772550     336 00 0 00 765444 	J6:	SKIPN DTEFLG		;WAIT FOR COMPLETION
  1868	772551     254 00 0 00 772550 	J7:	JRST .-1		; ...
  1869
  1870					>				;END IFN KLFLG
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 40
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging On

  1871
  1872	772552     202 14 0 00 772232 		MOVEM P5,MAXCOR		;SAVE MAX CORE AVAILABLE
  1873	772553     476 00 0 00 772143 		SETOM CURPAG		;INITIALIZE CURRENTLY IN-CORE DIR PAGE
  1874
  1875					IFN KLFLG,<
  1876					;HERE TO CALCULATE LENGTH OF THE DX20 MICROCODE
  1877
  1878	772554     201 01 0 00 000000*		MOVEI T1,DXASA		;Get start of TU7x Microcode
  1879	772555     201 02 0 00 000000 		MOVEI T2,DXBSA		;Get start of RP20 Microcode (if any)
  1880	772556     322 02 0 00 772561 		JUMPE T2,NORP20		;Don't have any?
  1881	772557     313 01 0 00 000002 		CAMLE T1,T2		;Is TU7x first?
  1882	772560     200 01 0 00 000002 		MOVE T1,T2		;No, RP20 is
  1883
  1884	772561     200 02 0 00 000001 	NORP20:	MOVE T2,T1		;Keep a copy here
  1885	772562     242 02 0 00 777767 		LSH T2,-^D9		;SHIFT ADDRESS TO PAGE NUMBER
  1886	772563     202 02 0 00 772237 		MOVEM T2,MCSPAG		;Save starting microcode page
  1887									; Note that this page begins with the BOOT
  1888									; moving code
  1889	772564     271 01 0 00 000000#		ADDI T1,DXASZ+DXBSZ-1	;Add length of each microcode module
  1890
  1891					IFN FTKLIPA,<ADDI T1,KLPLEN+NILEN> ;KLIPA, KLNI microcodes too
  1892
  1893	772565     242 01 0 00 777767 		LSH T1,-^D9		;SHIFT ADDRESS TO PAGE NUMBER
  1894	772566     202 01 0 00 772240 		MOVEM T1,MCEPAG		;Save ending microcode page
  1895	772567     200 01 0 00 001554*		MOVE T1,DXASA		;Get DXA mcode version
  1896	772570     202 01 0 00 772241 		MOVEM T1,DXAMCV		;Save it
  1897	772571     200 01 0 00 000000 		MOVE T1,DXBSA		;GET DXB mcode version
  1898	772572     202 01 0 00 772242 		MOVEM T1,DXBMCV		;Save it
  1899	772573     402 00 0 00 772246 		SETZM NOLDDX		;Reset DX20-loading flag
  1900					>
  1901	772574     201 01 0 00 776230 		MOVEI T1,[ASCIZ/[BOOT: /] ;Get usual prompt
  1902	772575     202 01 0 00 772250 		MOVEM T1,MSGHDR		;Set it up
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 41
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging On

  1903
  1904						;When debugging, handle traps for real
  1905					   IFN BDEBUG,<
  1906
  1907	772576     200 01 0 00 776232 		MOVE T1,[JSP T1,TRAP]	;Setup EPT trap locations
  1908	772577     202 01 0 00 765420 		MOVEM T1,A%EPT+420
  1909	772600     202 01 0 00 765421 		MOVEM T1,A%EPT+421
  1910	772601     202 01 0 00 765422 		MOVEM T1,A%EPT+422
  1911	772602     202 01 0 00 765423 		MOVEM T1,A%EPT+423
  1912	772603     254 00 0 00 772615 		JRST RSTART		;Enter program proper
  1913
  1914	772604     000 00 0 00 000000 	TRAPPC:	Z			;[7.1228]
  1915
  1916					;Here on a trap
  1917
  1918	772605     202 01 0 00 772604 	TRAP:	MOVEM T1,TRAPPC		;Save it here
  1919	772606     200 17 0 00 776204 		MOVE P,PDP		;Get us a stack
  1920	772607     201 06 0 00 776233 		MOVEI Q2,[ASCIZ/?BOOT: Trap at /]
  1921	772610     260 17 0 00 774305 		CALL OUTSTR		;Output it
  1922	772611     200 06 0 00 772604 		MOVE Q2,TRAPPC		;Get flags+PC
  1923	772612     260 17 0 00 774314 		CALL OUTOCT		;Output it
  1924	772613     260 17 0 00 773562 		CALL CRLF		;[7.1228] Output CRLF
  1925	772614     254 00 0 00 772615 		JRST RSTART		;Reenter program
  1926					   >				;End IFN BDEBUG conditional
  1927
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 42
BOOT	MAC	16-Feb-88 20:26		Initialization -- Paging On

  1928
  1929					;DISPLAY PROGRAM VERSION
  1930
  1931	772615     201 01 0 00 773501 	RSTART:	MOVEI T1,PFH		;Address of page fault handler
  1932	772616     202 01 0 00 765503 		MOVEM T1,A%EPT+UPTPFN	;Store it
  1933	772617     200 17 0 00 776204 		MOVE P,PDP		;SETUP PDL
  1934	772620     260 17 0 00 773562 		CALL CRLF		;...
  1935	772621     201 06 0 00 776237 		MOVEI Q2,[ASCIZ/BOOT V/]
  1936	772622     260 17 0 00 774305 		CALL OUTSTR		;...
  1937	772623     260 17 0 00 774270 		CALL TYPBVR		;OUTPUT BOOT VERSION
  1938	772624     402 00 0 00 772133 	GETCM1:	SETZM DSKTAB		;MAKE SURE THIS IS ZERO
  1939	772625     402 00 0 00 772354 		SETZM MONLOD		;INDICATE FIRST INVOCATION OF VBOOT
  1940	772626     402 00 0 00 772223 		SETZM IOIP		;Say no I/O in progress
  1941	772627     205 01 0 00 606300 		IFE FT.MTA,<MOVSI T1,'PS '> ;DISK DEFAULT DEVICE
  1942	772630     202 01 0 00 772130 		MOVEM T1,STRNAM		;STORE THE DEFAULT NAME
  1943	772631     7 000 00 0 00 000001 	BLKI APR,T1		;GET CPU SERIAL NUMBER
  1944	772632     405 01 0 00 007777 	   IFN KLFLG,< ANDI T1,7777>	;IF KL
  1945	772633     202 01 0 00 772447 		MOVEM T1,APRSER		;STORE SERIAL NUMBER
  1946	772634     257 01 0 00 762000 		MAP T1,A%CCW		;Want physical address of CCW page
  1947	772635     621 01 0 00 777760 		TXZ T1,MAPBTS		;Get rid of unwanted bits
  1948	772636     202 01 0 00 772147 		MOVEM T1,CCWADR		;And store it
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 43
BOOT	MAC	16-Feb-88 20:26		Get A Command

  1949						SUBTTL Get A Command
  1950
  1951					;Here to prompt for input
  1952
  1953	772637     403 16 0 00 772125 	GETCOM:	SETZB CX,DEV		;INDICATES WE ARE ENTERING VBOOT FROM BOOT
  1954	772640     200 17 0 00 776204 		MOVE P,PDP		;SETUP PDL
  1955	772641     200 01 0 00 776241 		MOVE T1,[Z.STRT,,Z.STRT+1] ;CLEAR DATA AREA
  1956	772642     402 00 0 00 772000 		SETZM Z.STRT
  1957	772643     251 01 0 00 772125 		BLT T1,Z.END
  1958	772644     476 00 0 00 772121 		SETOM MAXUNI		;THIS MEANS WE HAVE NOT FOUND DEVICE, YET
  1959	772645     332 00 0 00 772252 		SKIPE LODTYP		;DIALOGUE LOAD?
  1960	772646     254 00 0 00 772652 		JRST GETCO1		;YES, DON'T PROMPT, DON'T TAKE OPR COMMAND
  1961	772647     260 17 0 00 773562 		CALL CRLF		;DO RETURN
  1962					IFE FT.MTA, <
  1963	772650     201 06 0 00 776242 		MOVEI Q2,[BYTE (7)"B","O","O","T",76,0]
  1964					>
  1965					IFN FT.MTA, <
  1966						MOVX T2,DFFLGS		;Get defaults
  1967						MOVEM T2,BTFLGS		;Save them
  1968						MOVEI Q2,[BYTE (7)"M","T","B","O","O","T",76,0]
  1969					>
  1970	772651     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT PROMPT
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 44
BOOT	MAC	16-Feb-88 20:26		Get A Command

  1971
  1972	772652     260 17 0 00 773532 	GETCO1:	CALL GETSTR		;GET COMMAND FROM OPERATOR
  1973	772653     202 01 0 00 772122 		MOVEM T1,FNDCMD		;SAVE COMMAND POINTER
  1974	772654     400 11 0 00 000000 		SETZ P2,		;WHERE TO FORM STRUCTURE NAME
  1975	772655     336 01 0 00 772125 		SKIPN T1,DEV		;DEVICE TYPED?
  1976						JRST [	SKIPE DSKTAB	;NO. ALREADY HAVE A DEVICE?
  1977							JRST FOUND	;YES. USE IT THEN
  1978	772656     254 00 0 00 776244 			JRST DVX1]	;NO. GO FIND THWE DEFAULT
  1979	772657     200 02 0 00 776247 		MOVE T2,[POINT 6,P2]	;PTR TO NAME
  1980	772660     201 03 0 00 000006 		MOVEI T3,6		;MAX # CHARS
  1981	772661     134 04 0 00 000001 	DEVNAM:	ILDB T4,T1		;GET CHAR
  1982	772662     306 04 0 00 000072 		CAIN T4,":"		;END OF NAME?
  1983	772663     254 00 0 00 772667 		JRST DEVX		;YES - PUNT
  1984	772664     275 04 0 00 000040 		SUBI T4,40		;CONVERT TO SIXBIT
  1985	772665     136 04 0 00 000002 		IDPB T4,T2		;STORE CHR
  1986	772666     367 03 0 00 772661 		SOJG T3,DEVNAM		;LOOP
  1987	772667     316 11 0 00 772130 	DEVX:	CAMN P2,STRNAM		;SAME STRUCTURE AS LAST TIME?
  1988	772670     336 00 0 00 772133 		SKIPN DSKTAB		;YES, FOUND DEVICES YET?
  1989	772671     334 00 0 00 000000 		SKIPA			;NO. MUST LOOK THEN
  1990	772672     254 00 0 00 772712 		JRST FOUND		;YES, GO DO COMMAND
  1991	772673     202 11 0 00 772130 		MOVEM P2,STRNAM
  1992	772674     200 01 0 00 776250 	DVX1:	MOVE T1,[DSKTAB,,DSKTAB+1] ;SET UP TO CLEAR DSKTAB
  1993	772675     402 00 0 00 772133 		SETZM DSKTAB		;CLEAR FIRST WORD OF TABLE
  1994	772676     251 01 0 00 772142 		BLT T1,DSKTAB+DSKSIZ-1	;CLEAR DISK TABLE
  1995	772677     402 00 0 00 772245 		SETZM PASS		;INDICATE PASS 1 OF UNIT-SEARCHING CODE
  1996					   IFN FT.MTA,<SETZM DIRFLG>	;MAKE IT READ DIRECTORY AGAIN
  1997	772700     402 00 0 00 772132 		SETZM DSKTYP		;INDICATE UNIT TYPE UNKNOWN
  1998					;Setup EPT pointers to the CCW regions
  1999	772701     200 01 0 00 772147 		MOVE T1,CCWADR		;Get phys. addr of CCW page
  2000	772702     661 01 0 00 200000 		TXO T1,1B1		;Get jump CCW
  2001	772703     402 00 0 00 000002 		SETZM T2		;Start at channel 0
  2002	772704     205 03 0 00 777771 		MOVSI T3,-MAXCHN	;Setup AOBJN word
  2003	772705     202 01 0 02 765000 	DVXLP:	MOVEM T1,A%EPT+ICA(T2)	;Yes - store jump word in EPT
  2004	772706     271 02 0 00 000004 		ADDI T2,4		;Point to next 4 RH words
  2005	772707     271 01 0 00 000100 		ADDI T1,CCWSZ		;Point to next CCW list
  2006	772710     253 03 0 00 772705 		AOBJN T3,DVXLP		;Have we done them all?
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 45
BOOT	MAC	16-Feb-88 20:26		Get A Command

  2007
  2008					IFN FT.MTA, <
  2009					;REMOVE THIS CROCK
  2010					
  2011					;THIS TEST IS INSERTED HERE TO MAKE DEFAULT AND SPECIAL LOADS FROM
  2012					; MAG TAPE WORK APPROXIMATELY THE SAME AS FOR DISK, AND TO PROVIDE
  2013					; FOR ANY POSSIBLE FUTURE CHANGE TO VBOOT WHEREIN A MAGTAPE DEVICE
  2014					; IDENTIFIER OTHER THAN "MT:" WILL BE ACCEPTED, AND ACTED UPON.
  2015					;	MOVSI T1,'MT '		;GET MAG TAPE DEVICE NAME
  2016					;	CAME T1,STRNAM		;CORRECT DEVICE ENTERED ?
  2017					;	JRST FDSK		;NO, GO ISSUE ERROR MESSAGE
  2018					;	JRST FTAP		;GO FIND READY TAPE DRIVE
  2019					
  2020						JRST FTAP		;GO FIND READY DRIVE
  2021					>				; END OF IFN FT.MTA
  2022					IFE FT.MTA, <
  2023	772711     254 00 0 00 772724 		JRST FDSK		;GO FIND STRUCTURE
  2024					>				; END OF IFE FT.MTA
  2025
  2026					;[7.1224] Here when command has been read. Call VBOOT to do the work.
  2027
  2028	772712     260 17 0 00 773562 	FOUND:	CALL CRLF		;[7.1228] Output a crlf first please
  2029	772713     201 01 0 00 776230 		MOVEI T1,[ASCIZ/[BOOT: /] ;Get usual prompt
  2030	772714     200 02 0 00 772247 		MOVE T2,BTFLGS		;Get parameter flags
  2031	772715     603 02 0 00 400000 		TXNE T2,BT%RPM		;Parameters from disk?
  2032	772716     201 01 0 00 776251 		MOVEI T1,[ASCIZ/[*BOOT: /] ;Yes, notify user we are using them
  2033	772717     202 01 0 00 772250 		MOVEM T1,MSGHDR		;Save address of message header
  2034	772720     200 01 0 00 772122 		MOVE T1,FNDCMD		;POINTER TO CMD
  2035	772721     260 17 0 00 773665 		CALL VBOOT1		;PERFORM COMMAND
  2036	772722     326 16 0 00 773655 	VBTRET:	JUMPN CX,MRET2		;RETURN TO MONITOR?
  2037	772723     254 00 0 00 772637 		JRST GETCOM		;NO - GO ASK FOR NEXT COMMAND
  2038
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 46
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Disk

  2039						SUBTTL Device Loop -- Find Disk
  2040
  2041					;SUBROUTINE TO LOCATE UNIT CONTAINING STRUCTURE TO BOOT FROM
  2042					;ON A SPECIAL LOAD, WE CAN PASS THROUGH THIS CODE TWICE:
  2043					;1.	SEARCH FOR A PACK WHOSE APR SERIAL NUMBER MATCHES OUR CPU.
  2044					;	IF A MATCH IS FOUND, LOAD FROM THAT PACK.
  2045					;2.	IF #1 FAILS, SEARCH FOR STRUCTURE PS: AND LOAD FROM THAT PACK.
  2046					;
  2047					;	ON THE FIRST PASS, IF WE NOTICE WE HAVE A DX20, WE LOAD AND START IT.
  2048					;	EVERY CHANNEL AND UNIT ON THE SYSTEM IS CHECKED.
  2049
  2050					IFE FT.MTA, <
  2051
  2052
  2053	772724     402 00 0 00 772150 	FDSK:	SETZM CURCHN		;Init the channel #
  2054	772725     402 00 0 00 772153 		SETZM CURUN		;Init the unit #
  2055	772726     402 00 0 00 772144 		SETZM DIORG		;INITIALIZE DIRECTORY ORIGIN
  2056	772727     257 03 0 00 771000 		MAP T3,A%FP0		;GET PHYS ADDR OF FP0
  2057
  2058	772730     621 03 0 00 777760 		TXZ T3,MAPBTS		;KEEP JUST THE ADDRESS BITS
  2059	772731     661 03 0 00 620000 		TLO T3,(<1B0+1B1+<1000B13>>) ;DATA XFR, LAST CCW, # OF WORDS
  2060	772732     205 02 0 00 777771 		MOVSI T2,-MAXCHN	;Setup AOBJN word
  2061	772733     550 01 0 00 000002 	FDLP:	HRRZ T1,T2		;Get channel number
  2062	772734     221 01 0 00 000100 		IMULI T1,CCWSZ		;Determine offset into CCW region
  2063	772735     202 03 0 01 762000 		MOVEM T3,A%CCW(T1)	;Store it
  2064	772736     402 00 0 01 762001 		SETZM A%CCW+1(T1)	;Add the halt word to be sure
  2065	772737     253 02 0 00 772733 		AOBJN T2,FDLP		;Go do next
  2066
  2067	772740     402 00 0 00 772153 	FDSK1:	SETZM CURUN		;START AT UNIT 0
  2068	772741     260 17 0 00 773067 		CALL CHKCHN		;THIS CHANNEL EXIST ?
  2069	772742     254 00 0 00 772744 		 JRST FDSK2		;YES, GO CHECK ITS UNITS
  2070	772743     254 00 0 00 772751 		JRST FDSK4		;NO, GO TRY NEXT CHANNEL
  2071	772744     260 17 0 00 773104 	FDSK2:	CALL CHKUNI		;THIS UNIT EXIST ?
  2072	772745     254 00 0 00 772755 		 JRST GOTDRV		;YES, GO SEE IF AN RP04
  2073	772746     350 01 0 00 772153 	FDSK3:	AOS T1,CURUN		;Get next unit number
  2074	772747     307 01 0 00 000007 		CAIG T1,MAXDRV		;CHECKED ALL DRIVES YET ?
  2075	772750     254 00 0 00 772744 		JRST FDSK2		;NO GO CHECK NEXT DRIVE
  2076	772751     350 01 0 00 772150 	FDSK4:	AOS T1,CURCHN		;Get next channel
  2077	772752     307 01 0 00 000007 		CAIG T1,MAXCHN		;CHECKED ALL CHANNELS YET ?
  2078	772753     254 00 0 00 772740 		JRST FDSK1		;NO, GO DO NEXT CHANNEL
  2079	772754     254 00 0 00 773037 		JRST FDSK5		;YES, CHECK FOR ALL UNITS PRESENT
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 47
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Disk

  2080
  2081	772755     405 02 0 00 000777 	GOTDRV:	ANDI T2,R4%TYP		;KEEP JUST THE DEVICE TYPE CODE
  2082					IFN FT.DX2,<
  2083	772756     261 17 0 00 000002 		PUSH P,T2		;SAVE THIS AC
  2084	772757     336 00 0 00 772246 		SKIPN NOLDDX		;Skip if load cycle already done
  2085	772760     260 17 0 00 773136 		CALL LODX20		;LOAD MICROCODE IF THIS IS A DX20
  2086	772761     262 17 0 00 000002 		POP P,T2		;RESTORE THE AC
  2087					>
  2088	772762     337 01 0 00 772132 		SKIPG T1,DSKTYP		;DISK TYPE KNOWN YET?
  2089	772763     254 00 0 00 773025 		JRST GOTDV3		;NO - SEE IF ANY OF ALLOWED TYPES
  2090	772764     316 02 0 00 000001 		CAMN T2,T1		;YES - IS THIS UNIT SAME AS DESIRED?
  2091	772765     254 00 0 00 772771 		JRST GOTDV0		;YES - USE IT
  2092	772766     306 01 0 00 000020 		CAIN T1,.R4TYP		;IS DESIRED TYPE RP04?
  2093	772767     302 02 0 00 000021 		CAIE T2,.R5TYP		;YES - IS THIS UNIT AN RP05?
  2094	772770     254 00 0 00 772746 		JRST FDSK3		;NO TO EITHER QUESTION
  2095
  2096					IFN KLFLG,<
  2097
  2098	772771     200 01 0 00 776253 	GOTDV0:	MOVE T1,[R4%CSR!LR!R4%CPA!GO] ;PACK ACKNOWLEDGE, SETS VV BIT
  2099	772772     260 17 0 00 773116 		CALL RHWT1		;GO DO THE DATAO
  2100	772773     205 01 0 00 010000 		MOVSI T1,(.TMDSR)	;READ DEVICE STATUS REGISTER
  2101	772774     260 17 0 00 773115 		CALL RHRD1		;GET IT
  2102					>				; END IFE SMFLG
  2103	772775     606 01 0 00 010000 		TRNN T1,TMSMOL		;IS IT POWERED UP WITH A PACK ON-LINE?
  2104	772776     254 00 0 00 772746 		JRST FDSK3		;NO. FORGET IT
  2105	772777     200 01 0 00 776254 		MOVE T1,[A%FP0,,A%FP0+1] ;SET UP FOR BLT
  2106	773000     402 00 0 00 771000 		SETZM A%FP0		;CLEAR FIRST WORD OF DATA PAGE
  2107	773001     251 01 0 00 771777 		BLT T1,A%FP0+777	;ZERO DATA PAGE PRIOR TO READ
  2108	773002     260 17 0 00 773430 		CALL RD0		;GO READ PAGE 0
  2109	773003     260 17 0 00 773363 		CALL CHKHOM		;GO CHECK THE HOME BLOCK
  2110	773004     254 00 0 00 773017 		 JRST GOTDV2		;NO GOOD, TRY BACKUP HOME BLOCK
  2111	773005     337 02 0 00 772132 	GOTDV1:	SKIPG T2,DSKTYP		;IS TYPE KNOWN YET?
  2112	773006     213 02 0 00 772132 		MOVNS T2,DSKTYP		;NO - MAKE THIS TYPE THE DESIRED TYPE
  2113	773007     505 01 0 00 775270 		HRLI T1,RP4TYP		;Setup for BLT
  2114	773010     302 02 0 00 000020 		CAIE T2,.R4TYP		;RP04?
  2115	773011     505 01 0 00 775276 		HRLI T1,RP6TYP		;NO - ASSUME RP06
  2116	773012     306 02 0 00 000042 		CAIN T2,.R7TYP		;RP07?
  2117	773013     505 01 0 00 775304 		HRLI T1,RP7TYP		;YES
  2118	773014     541 01 0 00 772224 		HRRI T1,DEVDSP		;Setup rest of BLT
  2119	773015     251 01 0 00 772231 		BLT T1,DEVDSP+TYPSZ-1	;Setup the type table
  2120	773016     254 00 0 00 772746 		JRST FDSK3		;OK, GO CHECK NEXT UNIT
  2121	773017     260 17 0 00 773427 	GOTDV2:	CALL RD10		;GO READ BACKUP HOME BLOCK
  2122	773020     200 01 0 00 776255 		MOVE T1,[A%FP0,,HOMNAM]	;MOVE DATA TO WHERE THE CHKHOM
  2123	773021     251 01 0 00 771376 		BLT T1,HOMCOD		;  ROUTINE WANTS IT TO BE
  2124	773022     260 17 0 00 773363 		CALL CHKHOM		;GO CHECK THE BACKUP HOME BLOCK
  2125	773023     254 00 0 00 772746 		 JRST FDSK3		;ERROR
  2126	773024     254 00 0 00 773005 		JRST GOTDV1		;SETUP TYPE/SIZE IF NEEDED AND GO ON
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 48
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Disk

  2127
  2128					;HERE IF DESIRED UNIT TYPE IS NOT KNOWN YET. CHECK TYPE AGAINST ALL
  2129					;KNOWN DISK TYPE UNITS.
  2130
  2131	773025     302 02 0 00 000022 	GOTDV3:	CAIE T2,.R6TYP		;RP06?
  2132	773026     306 02 0 00 000020 		CAIN T2,.R4TYP		;OR RP04?
  2133	773027     254 00 0 00 773035 		JRST GOTDV4		;YES - SAVE TYPE NEGATED
  2134	773030     306 02 0 00 000042 		CAIN T2,.R7TYP		;RP07?
  2135	773031     254 00 0 00 773035 		JRST GOTDV4		;YES
  2136	773032     302 02 0 00 000021 		CAIE T2,.R5TYP		;RP05?
  2137	773033     254 00 0 00 772746 		JRST FDSK3		;NO - TRY FOR NEXT UNIT
  2138	773034     201 02 0 00 000020 		MOVEI T2,.R4TYP		;YES - MAKE IT LOOK LIKE RP04
  2139	773035     212 02 0 00 772132 	GOTDV4:	MOVNM T2,DSKTYP		;SAVE NEGATED TYPE IN CASE HOME BLKS GOOD
  2140	773036     254 00 0 00 772771 		JRST GOTDV0		;AND TRY TO READ HOME BLOCKS
  2141
  2142	773037     331 01 0 00 772121 	FDSK5:	SKIPL T1,MAXUNI		;NO - CHECK FOR FULL DECK
  2143	773040     254 00 0 00 773047 		JRST CHKSTR		;HAVE FOUND SOME UNITS
  2144	773041     332 00 0 00 772125 		SKIPE DEV		;HAVE WE CHECKED A STRUCTURE NAME?
  2145
  2146						;STRUCTURE NOT FOUND - CHECK THE CONTEXT
  2147						JRST	[SKIPE PASS	;PASS 1?
  2148							$ERROR(STRNBS)	;NO - NO BOOTABLE STRUCTURE
  2149	773042     254 00 0 00 776262 			$ERROR(STRSNF)]	;YES - SPECIFIED OR DEFAULT STRUCTURE NOT FOUND
  2150	773043     476 00 0 00 772125 		SETOM DEV		;GO THRU DISKS A SECOND TIME -- FOR STR NAME
  2151	773044     476 00 0 00 772245 		SETOM PASS		;INDICATE 2'D PASS
  2152	773045     476 00 0 00 772246 		SETOM NOLDDX		;All DX20's have been loaded - don't  try again
  2153	773046     254 00 0 00 772724 		JRST FDSK
  2154	773047     336 00 0 01 772133 	CHKSTR:	SKIPN DSKTAB(T1)	;ANY ID?
  2155	773050     254 00 0 00 776265 		 $ERROR (STRNID)	;NO STRUCTURE ID
  2156	773051     365 01 0 00 773047 		SOJGE T1,CHKSTR		;YES - LOOP FOR OTHER UNITS
  2157
  2158	773052     402 00 0 00 772355 		SETZM PORTLK		;ASSUME WE CAN'T DO PORT LOCKING/UNLOCKING
  2159	773053     200 01 0 00 772132 		MOVE T1,DSKTYP		;GET DISK TYPE
  2160	773054     302 01 0 00 000020 		CAIE T1,.R4TYP		;RP04?
  2161	773055     306 01 0 00 000021 		CAIN T1,.R5TYP		;RP05?
  2162	773056     476 00 0 00 772355 		SETOM PORTLK		;YES
  2163	773057     302 01 0 00 000022 		CAIE T1,.R6TYP		;RP06?
  2164	773060     306 01 0 00 000042 		CAIN T1,.R7TYP		;RP07?
  2165	773061     476 00 0 00 772355 		SETOM PORTLK		;YES
  2166	773062     200 02 0 00 771217 		MOVE T2,HOMBTF		;Get the BOOT flags
  2167	773063     607 02 0 00 400000 		TXNN T2,BT%RPM		;Are they valid?
  2168	773064     201 02 0 00 000000 		MOVX T2,DFFLGS		;No, so use defaults
  2169	773065     202 02 0 00 772247 		MOVEM T2,BTFLGS		;Save them
  2170	773066     254 00 0 00 772712 		JRST FOUND		;PASS COMMAND TO VBOOT
  2171
  2172					>				; END OF IFE FT.MTA
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 49
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Check if Channel Present

  2173						SUBTTL Device Loop -- Check if Channel Present
  2174
  2175					;SUBR TO CHECK IF A CHAN IS PRESENT
  2176					;RETURNS:	+1	CHANNEL EXISTS
  2177					;		+2	CHANNEL DOESN'T EXIST
  2178
  2179					IFN KLFLG, <
  2180
  2181	773067     550 01 0 00 772150 	CHKCHN:	HRRZ T1,CURCHN		;Get channel number
  2182	773070     502 01 0 01 772437 		HLLM T1,PIAINI(T1)	;Zero out interrupt vector for this channel
  2183	773071     201 01 0 00 002000 		MOVEI T1,.RHMBR		;RESET
  2184	773072     260 17 0 00 773127 		CALL RHCO1		;DO CONO
  2185	773073     201 01 0 00 000400 		MOVEI T1,.RHMBE		;ENABLE
  2186	773074     260 17 0 00 773127 		CALL RHCO1
  2187	773075     260 17 0 00 773124 		CALL RHCI1		;DO CONI
  2188	773076     606 01 0 00 000400 		TRNN T1,.RHMBE		;BIT COME BACK?
  2189	773077     254 00 0 00 773530 		RETSKP			;NO
  2190	773100     404 01 0 00 776267 		AND T1,[KLPMSK]		;GET BITS WHICH DEFINE A KLIPA/KLNI
  2191	773101     312 01 0 00 776267 		CAME T1,[KLPMSK]	;IS IT A KLIPA OR KLNI?
  2192	773102     263 17 0 00 000000 		RET			;NO, RETURN SAYING CHAN EXISTS
  2193					IFE FTKLIPA,<
  2194	773103     254 00 0 00 773530 		RETSKP			;YES. SAY CHAN DOESN'T EXIST SO UCODE WON'T GET BLOWN
  2195					>
  2196					IFN FTKLIPA,<
  2197						MOVE T2,CURCHN		;Get current channel
  2198						CAIE T2,KLPCHN		;YES. WHICH?
  2199						SKIPA T2,NIPTR		;KLNI
  2200						MOVE T2,KLPPTR		;KLIPA
  2201						CALL KLPLOD		;LOAD THE CORRECT MICROCODE
  2202						RETSKP			;AND RETURN SAYING CHAN DOESN'T EXIST
  2203					>				; END IFN FTKLIPA
  2204					>				; END IFE SMFLG
  2205
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 50
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Check if Unit Present

  2206						SUBTTL Device Loop -- Check if Unit Present
  2207
  2208					;SUBROUTINE TO SEE IF A UNIT EXISTS
  2209					;RETURNS:	+1	UNIT EXISTS
  2210					;			DEVICE BITS IN T2
  2211					;		+2	UNIT DOESN'T EXIST
  2212
  2213					IFN KLFLG,<
  2214	773104     205 01 0 00 060000 	CHKUNI:	MOVSI T1,(.TMDTR)	;READ DRIVE TYPE REG
  2215	773105     260 17 0 00 773115 		CALL RHRD1		;...
  2216	773106     200 02 0 00 000001 		MOVE T2,T1		;COPY FOR RETURN
  2217	773107     260 17 0 00 773124 		CALL RHCI1		;SEE IF REG ACC ERR
  2218	773110     606 01 0 00 004000 		TRNN T1,.RHRAE		; ...
  2219	773111     263 17 0 00 000000 		RET			;ALL IS WELL
  2220	773112     201 01 0 00 004400 		MOVEI T1,.RHRAE!.RHMBE	;CLEAR RAE, ENABLE
  2221	773113     260 17 0 00 773127 		CALL RHCO1		;DO CONO
  2222	773114     254 00 0 00 773530 		JRST RSKP		;LOSE
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 51
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Perform RH20 I/O Instructions

  2223						SUBTTL Device Loop -- Perform RH20 I/O Instructions
  2224
  2225					;Routine to do a DATAO followd by a DATAI
  2226					;Call with 	CURUN/ Current unit number
  2227					;		CURCHN/ Current channel number
  2228
  2229	773115     621 01 0 00 004000 	RHRD1:	TLZ T1,(LR)		;CLEAR LR BIT
  2230	773116     671 01 0 00 772153 	RHWT1:	TSO T1,CURUN		;INSERT UNIT NUMBER
  2231	773117     260 17 0 00 773132 	RHDIO1:	CALL XIO1		;SET IOA
  2232	773120     7 000 14 0 00 000001 	DATAO .-.,T1		;SEND TO DEVICE
  2233	773121     260 17 0 00 773132 		CALL XIO1		;SET IOA
  2234	773122     7 000 04 0 00 000001 	DATAI .-.,T1		;READ REG
  2235	773123     263 17 0 00 000000 		RET
  2236
  2237					;Routines to do a CONI or a CONO
  2238					;Call with 	CURUN/ Current unit number
  2239					;		CURCHN/ Current channel number
  2240
  2241	773124     260 17 0 00 773132 	RHCI1:	CALL XIO1		;SET IOA
  2242	773125     7 000 24 0 00 000001 	CONI .-.,T1		;DO CONI
  2243	773126     263 17 0 00 000000 		RET
  2244
  2245	773127     260 17 0 00 773132 	RHCO1:	CALL XIO1		; SET IOA
  2246	773130     7 000 20 0 01 000000 	CONO .-.,(T1)		;DO CONO
  2247	773131     263 17 0 00 000000 		RET
  2248
  2249					;Local routine used from above to set the device code for following instruction
  2250
  2251	773132     540 00 0 00 772150 	XIO1:	HRR F,CURCHN		;Get RH #
  2252	773133     271 00 0 00 000130 		ADDI F,RH0_-2		;Produce device code for that RH
  2253	773134     137 00 0 00 776270 	IOXCT:	DPB F,[POINT 7,@(P),9]	;PLUG IOADDR
  2254	773135     263 17 0 00 000000 		RET			;EXECUTE INSTR
  2255					>				;END IFN KLFLG
  2256
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 52
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Tape

  2257						SUBTTL Device Loop -- Find Tape
  2258
  2259					IFN FT.MTA,<
  2260					FTAP:
  2261					IFN FT.DX2,<
  2262						CALL LALLDX		;LOAD MICROCODE INTO ALL DX20S
  2263					>;END IFN FT.DX2
  2264						SETZM CURCHN		;Start at channel zero
  2265						SETZM CURUN		; and controller zero
  2266					GETTCH:	CALL CHKCHN		;DOES THIS CHANNEL EXIST?
  2267						JRST GOTTCH		;YES - TRY UNITS
  2268					NXTTCH:	AOS T1,CURCHN		;No, try next channel
  2269						CAIG T1,MAXCHN		;No more channels
  2270						JRST GETTCH		;NO - TRY THIS ONE
  2271						 $ERROR (TAPNDR)	;NO READY DRIVE AVAILABLE
  2272					
  2273					GOTTCH:	CALL CHKUNI		;GET DEV TYPE IN T2, IF EXTANT
  2274						JRST GOTTUN		;EXISTS - GO CHECK TYPE
  2275					NXTTUN:	AOS T1,CURUN		;Try next controller
  2276						CAIG T1,7		;ANY MORE
  2277						JRST GOTTCH		;YES - SEE IF THIS WINS
  2278						SETZM CURUN		;No, try next channel, starting at controller 0
  2279						JRST NXTTCH		; ...
  2280					
  2281					GOTTUN:	ANDI T2,777		;ISOLATE CONTROLLER TYPE
  2282						SETZ P3,		;START AT UNIT 0
  2283					IFN FT.DX2,<
  2284						MOVEI P6,DA.IDX		;Get device index for DX20A's
  2285						CAIN T2,.DXATP		;IS THIS ONE?
  2286						JRST GOTDX2		;YES, PROCESS IT
  2287						CAIE T2,.DXBTP		;DX20B?
  2288						JRST GOTUN1		;No
  2289						MOVEI P6,DB.IDX		;Get device code for DX20B's
  2290						CALL STDX20		;Restart it
  2291						JRST NXTTUN		;Check next unit
  2292					>
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 53
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Tape

  2293					
  2294					GOTUN1:
  2295					
  2296					IFN FT.TM8,<
  2297						CAIN T2,.T8TYP		;IS IT A TM78?
  2298						JRST GOTTM8		;YES. SEE IF THIS IS THE UNIT
  2299					>
  2300						MOVEI P6,TM.IDX		;TRY TM02/TM03
  2301						CAIL T2,10		;SEE IF TM02
  2302						CAIL T2,17		; ...
  2303						SKIPA			;NOT A TM02
  2304						JRST NXTTDR		;ITS A TM02
  2305						CAIL T2,50		;SEE IF A TM03
  2306						CAIL T2,57		; ...
  2307						JRST NXTTUN		;NOT A TM03
  2308					NXTTDR:	MOVSI T1,(.TMTCR!LR)	;PREPARE TO SELECT UNIT
  2309						IOR T1,P3		;INSERT UNIT NUMBER
  2310					IFN KLFLG,<
  2311						CALL RHWT1		;INSERT KON, SEND TO CHN
  2312						MOVSI T1,(.TMDSR)	;READ DEVICE STATUS
  2313						CALL RHRD1		; ...
  2314					>				;END KLFLG
  2315						TRNE T1,TMSMOL		;DEVICE READY?
  2316						JRST GOTTDR		;YES!!
  2317						AOS P3			;NO - TRY NEXT DRIVE
  2318						CAIG P3,7		;ANY MORE?
  2319						JRST NXTTDR		;YES
  2320						SETZ P3,		;NO - TRY NEXT KON
  2321						JRST NXTTUN		; ...
  2322					
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 54
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Tape

  2323					
  2324					IFN FT.TM8,<
  2325					GOTTM8:	MOVEI P6,T8.IDX		;SET FOR TM78
  2326						MOVEI T1,T7.SNS_6	;DO A SENSE ON THIS SLAVE
  2327						CALL T78.ND
  2328						JUMPE T2,GOTM8A		;TIMED OUT IF 0 - TRY NEXT SLAVE
  2329						MOVSI T1,(.T7SR)	;SLAVE IS THERE, SEE IF DRIVE IS OK
  2330						CALL RHRD1
  2331						TRNN T1,T7.RDY		;IS DRIVE READY?
  2332						JRST GOTM8A		;NOPE. TRY NEXT
  2333						MOVEI T1,T7.REW_6	;YES. REWIND IT
  2334						CALL T78.ND
  2335						JUMPE T2,GOTM8A		;LOSE IF WE TIMED OUT
  2336					T78.CK:	MOVEI T1,T7.SNS_6	;DO A SENSE
  2337						CALL T78.ND
  2338					;THIS IS AN INCREDIBLE *****CROCK******  (CATCH 78) BUT:
  2339					;	THE ONLY WAY YOU CAN TELL IF A DRIVE IS REWINDING IS TO DO A SENSE
  2340					;	BUT YOU CAN'T DO A SENSE IF THE DRIVE IS REWINDING - THE CONTROL JUST STACKS IT
  2341					;	SO IF THE SENSE WE JUST DID TIMES OUT THE DRIVE IS REWINDING!
  2342						JUMPE T2,T78.CK		;KEEP ON CHECKING IF WE TIMED OUT
  2343						JRST GOTTD1		;ALL IS COOL. USE THIS SLAVE
  2344					
  2345					GOTM8A:	CAIGE P3,3		;DONE WITH THIS UNIT (TM78)
  2346						AOJA P3,GOTTM8		;NO, TRY NEXT SLAVE ON THIS TM78
  2347						SETZ P3,		;YES, RESET SLAVE (UNIT) NUMBER
  2348						JRST NXTTUN		;TRY NEXT TM78 ON THIS RH20
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 55
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Tape

  2349					
  2350					;ROUTINE TO DO A NON-DATA FUNCTION ON A TM78/TU78
  2351					;ENTER WITH T1=FUNCTION_6, P3=UNIT
  2352					
  2353					T78.ND:	PUSH P,T1		;SAVE FUNCTION
  2354						MOVEI T2,200000		;HOW LONG TO WAIT FOR TM78 TO BECOME READY
  2355					T78.N1:	MOVSI T1,(.T7TMS)	;READ THE TM78 STATUS REGISTER
  2356						CALL RHRD1
  2357						TRNN T1,T7.RDY		;IS IT WITH US?
  2358						SOJG T2,T78.N1		;NO, TRY AGAIN
  2359						POP P,T1		;RESTORE REAL FUNCTION
  2360						JUMPE T2,R		;RETURN IF WE TIMED OUT
  2361						ADDI T1,<(.T7ND0)>_-14(P3) ;POINT AT RIGHT REGISTER FOR THIS DRIVE
  2362						ROT T1,-6		;BITS 0-5=REG, 33-35=FUNCTION
  2363						TLO T1,(LR)		;WRITE THE REGISTER
  2364						CALL RHWT1		;DO IT TO IT
  2365						MOVEI T2,200000		;LOOP COUNT
  2366					T78.N2:	MOVSI T1,(.TMATR)	;WAIT FOR ATTENTION BIT TO COME UP
  2367						CALL RHRD1		;WAIT FOR ATTENTION BIT TO COME UP
  2368						TRNN T1,377		;ATTEN?
  2369						SOJG T2,T78.N2		;NO, TRY AGAIN
  2370						JUMPE T2,R		;GO AWAY IF WE TIMED OUT
  2371						MOVE T2,T1		;SAVE FUNCTION
  2372						MOVE T1,[.TMATR!LR!377]	;CLEAR THE ATTENTION BIT
  2373						CALL RHWT1
  2374						EXCH T1,T2		;RESTORE DATA, SET T2 POSITIVE
  2375						RET			;AND GO AWAY
  2376					>
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 56
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Tape

  2377					
  2378					IFN FT.DX2,<
  2379					
  2380					;FOUND A DX20, FIND A READY DRIVE
  2381					
  2382					GOTDX2:	CALL STDX20		;START DX20 (MASSBUS RESET HALTS IT)
  2383					GTDX2A:	MOVE T1,P3		;GET DRIVE NUMBER
  2384						TXO T1,<.TDDNR!LR>	;DRIVE NUMBER REG
  2385						CALL RHWT1		;SELECT THIS DRIVE
  2386						MOVE T1,[EXP .TMCSR!LR+.TMRWF]
  2387						CALL RHWT1		;DO REWIND
  2388						CALL DX2SWT		;SHORT WAIT
  2389						JRST GTDX2B		;FAILED - DRIVE IS NOT READY
  2390						MOVX T1,.TDSTR		;GET THE STATUS REGISTER
  2391						CALL RHRD1		; ...
  2392						TRNE T3,.TDDEB		;AT LOAD POINT YET?
  2393						JRST GOTTD1		;YES
  2394					GTDX2C:	CALL DX2LWT		;NO, DO A LONG WAIT
  2395						JRST GTDX2B		;ERROR, THIS DRIVE FAILS
  2396						MOVX T1,.TDAYR		;GET ASYNCHRONOUS STATUS
  2397						CALL RHRD1
  2398						TXNN T1,.TDDEB		;DEVICE END?
  2399						 $ERROR (TAPHTE)	;NO - HARD TAPE ERROR
  2400						ANDI T1,377		;JUST THE DRIVE NUMBER
  2401						CAMN T1,P3		;RIGHT DRIVE?
  2402						JRST GOTTD1		;YES, GOOD DRIVE
  2403						MOVX T1,.TDAYR		;NO, CLEAR ASYNCHRONOUS STATUS REG
  2404						CALL RHWT1		; ...
  2405						JRST GTDX2C		;AND WAIT SOME MORE
  2406					
  2407					GTDX2B:	AOS P3			;TRY THE NEXT DRIVE
  2408						CAIG P3,7		;MORE DRIVES ON THIS CONTROLLER?
  2409						JRST GTDX2A		;YES
  2410						JRST NXTTUN		;NO, TO THE NEXT CONTROLLER
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 57
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Tape

  2411					
  2412					;ROUTINE TO LOOK FOR AND LOAD MICROCODE INTO ALL
  2413					; DX20S ON THE SYSTEM
  2414					;
  2415					LALLDX:	SKIPE NOLDDX		;Have we done this yet?
  2416						RET			;Yes, just return
  2417						SETZM CURCHN		;Start with channel zero
  2418						SETZM CURUN		; and controller zero
  2419					LALLD1:	CALL CHKCHN		;DOES THIS CHANNEL EXIST?
  2420						 JRST LALLD3		;YES, SEE IF ANY DX20S OUT THERE
  2421					LALLD2:	AOS T1,CURCHN		;Look at next channel
  2422						CAIG T1,MAXCHN		;LOOKED AT ALL THE CHANNELS?
  2423						JRST LALLD1		;NO, LOOK AT NEXT CHANNEL
  2424						SETOM NOLDDX		;Don't need to do it again
  2425						RET			;ALL DONE
  2426					LALLD3:	CALL CHKUNI		;SEE WHAT EXISTS ON THIS CHANNEL
  2427						 JRST LALLD5		;SOMETHING THERE, GO SEE IF DX20
  2428					LALLD4:	AOS T1,CURUN		;Get next controller
  2429						CAIG T1,7		;LOOKED AT ALL CONTROLLERS?
  2430						JRST LALLD3		;NO, LOOK AT NEXT ONE
  2431						SETZM CURUN		;Start with controller zero
  2432						JRST LALLD2		;GO LOOK AT NEXT CHANNEL
  2433					LALLD5:	ANDI T2,777		;ISOLATE CONTROLLER TYPE
  2434						CALL LODX20		;LOAD MICROCODE IF THIS IS A DX20
  2435						JRST LALLD4		;GO LOOK AT NEXT CONTROLLER
  2436					>;END IFN FT.DX2
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 58
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Tape

  2437					
  2438					GOTTDR:	MOVE T1,[EXP .TMCSR!LR+.TMRWF]
  2439					IFN KLFLG,<
  2440						CALL RHWT1		;DO REWIND
  2441						MOVSI T2,10000		;WAIT COUNT
  2442						CALL WTRDY1		;WAIT FOR READY
  2443					>
  2444					GOTTD1:	SETOM DIORG		;FLAG MAGTAPE
  2445						MOVEM P6,TAPTYP		;SAVE TYPE TYPE FOR LATER
  2446						SETZM MAXUNI		;HIGHEST NUMBERED UNIT
  2447						MOVE T2,CURCHN		;GET CHAN
  2448						LSH T2,6		;SHIFT
  2449						IOR T2,CURUN		;WITH KONTROLLER
  2450						LSH T2,6		;AGAIN
  2451						IOR T2,P3		;AND SUBUNIT
  2452						TLO T2,ENTFLG		;SET NEGATIVE
  2453						MOVEM T2,DSKTAB		;STORE
  2454						JRST FOUND		;WIN.
  2455					
  2456					
  2457					WTRDY:	MOVSI T2,5		;TIMEOUT COUNTER
  2458					WTRDY1:	MOVSI T1,(.TMDSR)	;WAIT FOR DRIVE READY
  2459					IFN KLFLG,<
  2460						CALL RHRD1		; ...
  2461					>				;END IFE SMFLG
  2462						TRNE T1,TMSPIP		; ...
  2463						SOJG T2,WTRDY1		;TIMED LOOP
  2464						PUSH P,T1		;SAVE STATUS REG
  2465						MOVE T1,[EXP .TMATR!LR+377] ;RESET ALL ATTENTION FLAGS
  2466					IFN KLFLG,<
  2467						CALL RHWT1		; ...
  2468					>				;END IFN KLFLG
  2469						POP P,T1		;RESTORE STATUS REG
  2470						SKIPN T2
  2471						 $ERROR (TAPHTE)	;HARD TAPE ERROR
  2472						RET			;WIN
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 59
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Find Tape

  2473					
  2474					IFN FT.DX2,<
  2475					
  2476					;DX20 WAIT ROUTINES
  2477					
  2478					DX2LWT:	SKIPA T2,[10000,,0]	;LONG WAIT
  2479					DX2SWT:	MOVEI T2,2000		;SHORT WAIT
  2480					DX2WAT:	MOVX T1,.TMDSR		;GET THE STATUS REGISTER
  2481						CALL RHRD1		; ...
  2482						TXNN T1,.TDATB		;ATTENTION UP?
  2483						SOJG T2,DX2WAT		;NO, WAIT
  2484						PUSH P,T1		;SAVE THE STATUS
  2485						MOVE T1,[EXP .TMATR!LR+377]
  2486						CALL RHWT1		;TURN OFF ATTENTION
  2487						POP P,T1		;GET BACK THE STATUS
  2488						SKIPN T2
  2489						  $ERROR (TAPHTE)	;HARD TAPE ERROR
  2490						TXNN T1,.TDCEB		;ANY ERRORS?
  2491						RETSKP			;NO, SKIP RETURN
  2492						MOVX T1,<.TMERR!LR>	;YES, CLEAR THE ERROR REGISTER
  2493						CALL RHWT1
  2494						RET			;AND GIVE AN ERROR RETURN
  2495					>				;END IFN FT.DX2
  2496					>				;END IFN FT.MTA
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 60
BOOT	MAC	16-Feb-88 20:26		Device Loop -- DX20 Routines

  2497						SUBTTL Device Loop -- DX20 Routines
  2498
  2499					IFN FT.DX2,<
  2500
  2501
  2502					;ROUTINE TO CHECK FOR EITHER STYLE OF DX20, AND LOAD THE PROPER
  2503					;MICROCODE INTO IT.  CALLED WITH DEVICE TYPE IN T2.
  2504
  2505
  2506						EXTERN	DXASA,DXASZ	;START ADDRESS AND SIZE OF TAPE MICROCODE
  2507
  2508						IFN FT.RP2,
  2509						<
  2510						EXTERN	DXESA,DXESZ	;START ADDRESS AND SIZE OF RP20 MICROCODE
  2511						>
  2512
  2513						IFE FT.RP2,
  2514						<
  2515		   	   000000		DXESA==0			;PRESUMEABLY, WE HAVE NO RP20 MICROCODE,
  2516		   	   000001		DXESZ==1			; SO DUMMY-UP THESE SYMBOLS
  2517						>
  2518		   	   000000		DXBSA==DXESA
  2519		   	   000001		DXBSZ==DXESZ
  2520
  2521					COMMENT \
  2522						NOTA BENE:
  2523
  2524						INTERNAL PROGRAM MNEMONICS FOR MICROCODE ARE AS FOLLOWS:
  2525
  2526						DXA...			TU7X MICROCODE
  2527						DXB...			RP20 MICROCODE
  2528						\
  2529
  2530	773136     400 15 0 00 000000 	LODX20:	SETZ P6,		;ASSUME NOT A DX20
  2531	773137     302 02 0 00 000060 		CAIE T2,.DXATP		;TAPE STYLE DX20?
  2532	773140     254 00 0 00 773143 		JRST DCHK		;No
  2533
  2534						;HERE IF WE HAVE A TAPE DX20
  2535	773141     201 15 0 00 000001 	TDX20:	MOVEI P6,DA.IDX		;YES, SET UP CODE
  2536	773142     254 00 0 00 773147 		JRST GOTDX		;JOIN COMMON CODE
  2537
  2538	773143     302 02 0 00 000061 	DCHK:	CAIE T2,.DXBTP		;DISK STYLE DX20?
  2539	773144     263 17 0 00 000000 		RET			;NO, NEITHER TYPE OF DX20
  2540					IFE FT.RP2,
  2541	773145     263 17 0 00 000000 	<	RET			;It's a disk DX20, but we have no U-code
  2542					>
  2543						;HERE IF WE HAVE A DISK DX20
  2544	773146     201 15 0 00 000003 	DDX20:	MOVEI P6,DB.IDX		;YES, SET UP CODE
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 61
BOOT	MAC	16-Feb-88 20:26		Device Loop -- DX20 Routines

  2545
  2546	773147     260 17 0 00 773171 	GOTDX:	CALL TRYTYP		;TELL HIM WHAT WE ARE TRYING TO DO
  2547	773150     201 01 0 00 042562 		MOVEI T1,042562		;GET MAGIC CODE
  2548									; FOR U-CODE CONSISTENCY CHECK (TAPE ONLY)
  2549	773151     306 15 0 00 000001 		CAIN P6,DA.IDX		;TAPE MICROCODE?
  2550	773152     202 01 0 00 000000#		MOVEM T1,DXASA+11	;YES, PUT INTO LOCATION 11 OF THE RAM
  2551	773153     201 05 0 00 773207 		MOVEI Q1,DXLDFT		;SET FUNCTION TABLE
  2552	773154     260 17 0 00 773215 		CALL LDX20		;LOAD THE RAMS
  2553	773155     201 05 0 00 773212 		MOVEI Q1,DXVRFT		;SET VERIFY FUNCTION TABLE
  2554	773156     260 17 0 00 773215 		CALL LDX20		;GO VERIFY THE WORKING MEMORY
  2555	773157     260 17 0 00 773163 		CALL STDX20		;START THE DX20
  2556
  2557						MOVEI Q2,[ASCIZ \[OK]
  2558	773160     201 06 0 00 776271 	\]
  2559	773161     260 17 0 00 774305 		CALL OUTSTR		;SAY WE DID IT
  2560	773162     263 17 0 00 000000 		RET
  2561
  2562					;SUBROUTINE TO START THE DX20
  2563
  2564	773163     201 01 0 00 130001 	STDX20:	MOVEI T1,1+.TDICB+.TDPIB+.TDPEB ;SET STARTING ADDRESS
  2565	773164     661 01 0 00 314000 		TXO T1,.TDPCR!LR	;INTO THE PC
  2566	773165     260 17 0 00 773116 		CALL RHWT1
  2567	773166     201 01 0 00 000004 		MOVEI T1,.TDSTB		;START THE DX20
  2568	773167     661 01 0 00 034000 		TXO T1,.TDMNR!LR
  2569	773170     254 00 0 00 773116 		CALLRET RHWT1
  2570
  2571					;SUBROUTINE TO TELL HIM WE ARE ATTEMPTING TO START THE DX20
  2572
  2573	773171     200 06 0 00 772250 	TRYTYP:	MOVE Q2,MSGHDR		;Get message header
  2574	773172     260 17 0 00 774305 		CALL OUTSTR		;Display it
  2575	773173     201 06 0 00 776273 		MOVEI Q2,[ASCIZ\Starting\]	;[7.1228]
  2576	773174     260 17 0 00 774305 		CALL OUTSTR
  2577	773175     260 17 0 00 773344 		CALL TYPDX2		;TYPE OUT DX20 AND CHANNEL NUMBERS
  2578	773176     201 06 0 00 776275 		MOVEI Q2,[ASCIZ \microcode V\]	;[7.1228]
  2579	773177     260 17 0 00 774305 		CALL OUTSTR
  2580	773200     200 01 0 00 772241 		MOVE T1,DXAMCV		;ASSUME DX20A
  2581	773201     306 15 0 00 000003 		CAIN P6,DB.IDX		;DX20B?
  2582	773202     200 01 0 00 772242 		MOVE T1,DXBMCV		;YES
  2583	773203     260 17 0 00 774255 		CALL TMCVER		;DISPLAY THE MICROCODE VERSION
  2584	773204     201 06 0 00 776300 		MOVEI Q2,[ASCIZ\] \]	;CLOSE THE EXPRESSION
  2585	773205     260 17 0 00 774305 		CALL OUTSTR
  2586	773206     263 17 0 00 000000 		RET
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 62
BOOT	MAC	16-Feb-88 20:26		Device Loop -- DX20 Routines

  2587
  2588					;LOAD FUNCTION TABLE
  2589
  2590	773207     314000  060000	DXLDFT:	.TDPCR!LR+.TDCIB+.TDPEB ;PC BITS FOR CRAM LOADING
  2591	773210     000000  773116		RHWT1			;CRAM FUNCTION IS WRITE
  2592						[			;WORKING MEMORY FUNCTION
  2593							TRO T1,11400	;  SET INSTRUCTION TO MOVI TO BR WITH MA+
  2594	773211     000000  776301			CALLRET XI]	;  DO THE INSTRUCTION
  2595
  2596					;VERIFY FUNCTION TABLE
  2597
  2598	773212     314000  120000	DXVRFT:	.TDPCR!LR+.TDICB+.TDPEB ;PC BITS FOR CRAM READING
  2599						[			;CRAM VERIFY FUNCTION
  2600							HRRZ T3,T1	;  SAVE THE EXPECTED VALUE
  2601							CALL RHRD1	;  GET CRAM CONTENTS
  2602							ANDI T1,177777	;  ONLY WANT 16 BITS
  2603							CAIN T3,(T1)	;  VERIFY MATCH
  2604							RET		;  MATCH, GOOD RETURN
  2605	773213     000000  776303			JRST NOVERC]	;  NO MATCH, TYPE ERROR
  2606						[			;WORKING MEMORY FUNCTION
  2607							HRRZ T3,T1	;  SAVE THE EXPECTED VALUE
  2608							MOVEI T1,043411	;  INSTRUCTION TO MOVE DATA TO BR
  2609							CALL XI		;  EXECUTE IT
  2610							MOVX T1,.TDIBR	;  GET THE BR
  2611							CALL RHRD1	;  ...
  2612							ANDI T1,377	;  ONLY THE BR
  2613							CAIN T3,(T1)	;  MATCH?
  2614							RET		;  YES, GOOD RETURN
  2615	773214     000000  776311			JRST NOVERW]	;  NO, COMPLAIN
  2616
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 63
BOOT	MAC	16-Feb-88 20:26		Device Loop -- DX20 Routines

  2617
  2618					;LOAD OR VERIFY DX20 MICRO CODE
  2619					;CALL WITH Q1 POINTING TO FUNCTION TABLE AND P6 CONTAINING DX20 TYPE
  2620
  2621
  2622	773215     205 02 0 00 000000#	LDX20:	MOVSI T2,-DXASZ		;GET LENGTH OF TAPE MICROCODE
  2623	773216     302 15 0 00 000001 		CAIE P6,DA.IDX		;CORRECT?
  2624	773217     205 02 0 00 777777 		MOVSI T2,-DXBSZ		;NO, GET LENGTH OF RP20 MICROCODE INSTEAD
  2625	773220     302 15 0 00 000001 	LDX20A:	CAIE P6,DA.IDX		;TAPE MICROCODE?
  2626	773221     334 01 0 02 000000 		SKIPA T1,DXBSA(T2)	;NO, GET CRAM WORD OF RP20 MICROCODE
  2627	773222     200 01 0 02 001567*		MOVE T1,DXASA(T2)	;YES, GET CRAM WORD OF TAPE MICROCODE
  2628	773223     321 01 0 00 773236 		JUMPL T1,LDX20B		;JUMP IF NO MORE CRAM DATA
  2629	773224     550 01 0 00 000002 		HRRZ T1,T2		;GET THE PC
  2630	773225     434 01 0 05 000000 		IOR T1,0(Q1)		;SET DESIRED PC BITS
  2631	773226     260 17 0 00 773116 		CALL RHWT1		;SET THE PC
  2632	773227     302 15 0 00 000001 		CAIE P6,DA.IDX		;TAPE MICROCODE?
  2633	773230     334 01 0 02 000000 		SKIPA T1,DXBSA(T2)	;NO, GET RP20 CRAM DATA
  2634	773231     200 01 0 02 002222*		MOVE T1,DXASA(T2)	;YES, GET CRAM DATA FOR TAPE
  2635	773232     405 01 0 00 177777 		ANDI T1,177777		;JUST THE LOW 16 BITS
  2636	773233     661 01 0 00 304000 		TXO T1,.TDIRR!LR	;INTO THE IR
  2637	773234     260 17 1 05 000001 		CALL @1(Q1)		;CALL THE PROCESSING ROUTINE
  2638	773235     253 02 0 00 773220 		AOBJN T2,LDX20A		;LOOP FOR MORE
  2639	773236     252 02 0 00 773530 	LDX20B:	AOBJP T2,RSKP		;SKIP THE DELIMITER WORD
  2640	773237     201 01 0 00 120000 		MOVEI T1,.TDICB+.TDPEB	;SET PC BACK TO 0
  2641	773240     661 01 0 00 314000 		TXO T1,.TDPCR!LR	;PC REGISTER
  2642	773241     260 17 0 00 773116 		CALL RHWT1
  2643	773242     205 01 0 00 300000 		MOVX T1,.TDIRR		;GET CONTENTS OF LOCATION 0
  2644	773243     260 17 0 00 773115 		CALL RHRD1
  2645	773244     261 17 0 00 000001 		PUSH P,T1		;SAVE IT
  2646	773245     201 01 0 00 001000 		MOVEI T1,1000		;SET MEMORY ADDRESS TO 0
  2647	773246     260 17 0 00 773266 		CALL XI
  2648	773247     201 01 0 00 000400 		MOVEI T1,400
  2649	773250     260 17 0 00 773266 		CALL XI
  2650	773251     302 15 0 00 000001 	LDX20C:	CAIE P6,DA.IDX		;TAPE MICROCODE?
  2651	773252     334 01 0 02 000000 		SKIPA T1,DXBSA(T2)	;NO, GET DATA FOR RP20
  2652	773253     200 01 0 02 002231*		MOVE T1,DXASA(T2)	;YES, GET DATA FOR TAPE
  2653	773254     405 01 0 00 000377 		ANDI T1,377		;ONLY 8 BITS OF DATA
  2654	773255     260 17 1 05 000002 		CALL @2(Q1)		;CALL PROCESSING ROUTINE
  2655	773256     253 02 0 00 773251 		AOBJN T2,LDX20C		;LOOP THROUGH THE WHOLE THING
  2656	773257     201 01 0 00 060000 		MOVEI T1,.TDPEB+.TDCIB	;BACK TO LOCATION 0 OF THE CRAM
  2657	773260     661 01 0 00 314000 		TXO T1,.TDPCR!LR
  2658	773261     260 17 0 00 773116 		CALL RHWT1
  2659	773262     262 17 0 00 000001 		POP P,T1		;GET BACK ITS ORIGINAL CONTENTS
  2660	773263     405 01 0 00 177777 		ANDI T1,177777		;ONLY 16 BITS
  2661	773264     661 01 0 00 304000 		TXO T1,.TDIRR!LR	;PUT IT BACK INTO THE CRAM
  2662	773265     254 00 0 00 773116 		CALLRET RHWT1
  2663
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 64
BOOT	MAC	16-Feb-88 20:26		Device Loop -- DX20 Routines

  2664
  2665					;MAKE DX20 EXECUTE INSTRUCTION IN T1
  2666
  2667	773266     261 17 0 00 000001 	XI:	PUSH P,T1		;SAVE THE INSTRUCTION FOR A MOMENT
  2668	773267     201 01 0 00 000020 		MOVEI T1,.TDSCB		;PUT DX20 INTO SINGLE CYCLE
  2669	773270     661 01 0 00 034000 		TXO T1,.TDMNR!LR
  2670	773271     260 17 0 00 773116 		CALL RHWT1
  2671	773272     201 01 0 00 060000 		MOVEI T1,.TDPEB+.TDCIB	;SET PC 0
  2672	773273     661 01 0 00 314000 		TXO T1,.TDPCR!LR
  2673	773274     260 17 0 00 773116 		CALL RHWT1
  2674	773275     262 17 0 00 000001 		POP P,T1		;GET BACK THE INSTRUCTION
  2675	773276     661 01 0 00 304000 		TXO T1,.TDIRR!LR	;PUT INTO CRAM
  2676	773277     260 17 0 00 773116 		CALL RHWT1
  2677	773300     201 01 0 00 110000 		MOVEI T1,.TDICB+.TDPIB	;TURN ON THE CRAM
  2678	773301     661 01 0 00 314000 		TXO T1,.TDPCR!LR
  2679	773302     260 17 0 00 773116 		CALL RHWT1
  2680	773303     201 01 0 00 000024 		MOVEI T1,.TDSCB+.TDSTB	;CYCLE THE DX20
  2681	773304     661 01 0 00 034000 		TXO T1,.TDMNR!LR
  2682	773305     260 17 0 00 773116 		CALL RHWT1
  2683	773306     205 01 0 00 034000 		MOVX T1,.TDMNR!LR	;TURN SINGLE CYCLE OFF
  2684	773307     254 00 0 00 773116 		CALLRET RHWT1		;AND RETURN
  2685
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 65
BOOT	MAC	16-Feb-88 20:26		Device Loop -- DX20 Routines

  2686
  2687					;COMPLAIN ABOUT A VERIFY MISMATCH
  2688
  2689	773310     201 06 0 00 776322 	NOVERC:	MOVEI Q2,[ASCIZ/CRAM verify/]	;[7.1228]
  2690	773311     254 00 0 00 773313 		JRST NOVER
  2691
  2692	773312     201 06 0 00 776325 	NOVERW:	MOVEI Q2,[ASCIZ/Working memory verify/]	;[7.1228]
  2693
  2694	773313     261 17 0 00 000001 	NOVER:	PUSH P,T1		;SAVE A REGISTER
  2695	773314     201 05 0 00 000077 		MOVEI Q1,"?"		;TYPE A QM
  2696	773315     260 17 0 00 773604 		CALL TYO
  2697	773316     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT DATA
  2698	773317     260 17 0 00 773562 		CALL CRLF		;NEXT LINE
  2699	773320     201 06 0 00 776332 		MOVEI Q2,[ASCIZ/Good /]	;[7.1228]
  2700	773321     260 17 0 00 774305 		CALL OUTSTR		;...
  2701	773322     200 06 0 00 000003 		MOVE Q2,T3		;FIRST WHAT IT SHOULD BE
  2702	773323     201 05 0 00 000040 		MOVEI Q1,40		;GET A SPACE
  2703	773324     260 17 0 00 773604 		CALL TYO		;OUTPUT IT
  2704	773325     260 17 0 00 774314 		CALL OUTOCT		;OUTPUT OCTAL DATA
  2705	773326     201 06 0 00 776334 		MOVEI Q2,[ASCIZ\ Bad\]	;[7.1228] Output heading
  2706	773327     260 17 0 00 774305 		CALL OUTSTR		;...
  2707	773330     200 06 0 17 000000 		MOVE Q2,(P)		;GET THE BAD DATA
  2708	773331     201 05 0 00 000040 		MOVEI Q1,40		;GET A SPACE
  2709	773332     260 17 0 00 773604 		CALL TYO		;OUTPUT IT
  2710	773333     260 17 0 00 774314 		CALL OUTOCT		;OUTPUT OCTAL DATA
  2711	773334     201 06 0 00 776335 		MOVEI Q2,[ASCIZ\ XOR\]	;OUTPUT HEADING
  2712	773335     260 17 0 00 774305 		CALL OUTSTR		;...
  2713	773336     262 17 0 00 000006 		POP P,Q2		;GET THE BAD DATA
  2714	773337     430 06 0 00 000003 		XOR Q2,T3		;GET THE XOR
  2715	773340     201 05 0 00 000040 		MOVEI Q1,40		;GET A SPACE
  2716	773341     260 17 0 00 773604 		CALL TYO		;OUTPUT IT
  2717	773342     260 17 0 00 774314 		CALL OUTOCT		;OUTPUT THE XOR VALUE IN Q2
  2718	773343     263 17 0 00 000000 		RET			;RETURN
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 66
BOOT	MAC	16-Feb-88 20:26		Device Loop -- DX20 Routines

  2719
  2720					;PRINT CHANNEL #, DX20 TYPE AND #
  2721					;CALL WITH:
  2722					;	CURCHN, CURUN set up
  2723					;	P6:		DX20 TYPE
  2724
  2725	773344     261 17 0 00 000006 	TYPDX2:	PUSH P,Q2		;PRESERVE Q2
  2726	773345     201 06 0 00 776336 		MOVEI Q2,[ASCIZ \ CHN:\]
  2727	773346     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT CHN:
  2728	773347     200 06 0 00 772150 		MOVE Q2,CURCHN		;GET CHANNEL NUMBER
  2729	773350     260 17 0 00 774314 		CALL OUTOCT		;OUTPUT CHANNEL NUMBER
  2730	773351     306 15 0 00 000001 		CAIN P6,DA.IDX		;TAPE DX20?
  2731	773352     201 06 0 00 776340 		MOVEI Q2,[ASCIZ \ DX20A:\] ;YES
  2732	773353     306 15 0 00 000003 		CAIN P6,DB.IDX		;DISK DX20?
  2733	773354     201 06 0 00 776342 		MOVEI Q2,[ASCIZ \ DX20B:\] ;YES
  2734	773355     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT DX20:
  2735	773356     200 06 0 00 772153 		MOVE Q2,CURUN		;GET DX20 NUMBER
  2736	773357     260 17 0 00 774314 		CALL OUTOCT		;OUTPUT IT
  2737	773360     201 05 0 00 000040 		MOVEI Q1," "		;A SPACE
  2738	773361     262 17 0 00 000006 		POP P,Q2		;RESTORE Q2
  2739	773362     254 00 0 00 773604 		CALLRET TYO		;OUTPUT A SPACE AND RETURN
  2740					>;END IFN FT.DX2
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 67
BOOT	MAC	16-Feb-88 20:26		Device Loop -- KLIPA Routines

  2741						SUBTTL Device Loop -- KLIPA Routines
  2742
  2743					IFN FTKLIPA,<
  2744					EXTERN KLPPTR,NIPTR,KLPVER,NIVER,KLPLEN,NILEN
  2745					
  2746					;LOAD THE KLIPA MICROCODE
  2747					;CALL	T2/AOBJN WORD TO PICK UP ADDRESS/WORD 1/WORD 2
  2748					
  2749					KLPLOD:	CALL XIO1
  2750						CONO .-.,400000
  2751						MOVE T1,CURUN		;Get unit #
  2752						MOVEI F,RH0_-2(T1)	;PRODUCE DEVICE CODE
  2753						DPB F,[POINT 7,KLPLD2,9] ;INSERT INTO DATAO'S
  2754						DPB F,[POINT 7,KLPLD3,9] ; RATHER THAN CALL XIO1 A FEW THOUSAND TIMES
  2755						DPB F,[POINT 7,KLPLD4,9] ; FOR THE SAME DEVICE CODE
  2756						DPB F,[POINT 7,KLPLD5,9]
  2757					KLPLD1:	MOVE T1,(T2)		;PICK UP ADDRESS
  2758					KLPLD2:	DATAO .-.,T1
  2759					KLPLD3:	DATAO .-.,1(T2)		;(LH) MICROWORD
  2760						TXZ T1,1B13
  2761					KLPLD4:	DATAO .-.,T1
  2762					KLPLD5:	DATAO .-.,2(T2)		;(RH) MICROWORD
  2763						ADDI T2,2
  2764						AOBJN T2,KLPLD1
  2765						MOVE Q2,MSGHDR		;Get message header
  2766						CALL OUTSTR		;Display it
  2767						MOVEI Q2,[ASCIZ\Loading \]	;[7.1228]
  2768						CALL OUTSTR
  2769						MOVEI Q2,[ASCIZ \KLIPA\] ;ASSUME IT'S A KLIPA
  2770						CAIE P1,KLPCHN
  2771						MOVEI Q2,[ASCIZ \KLNI\]	;BAD GUESS
  2772						CALL OUTSTR		;TELL WHAT DEVICE WE'RE LOADING
  2773						MOVEI Q2,[ASCIZ \ microcode V\]	;[7.1228]
  2774						CALL OUTSTR
  2775						MOVE T1,KLPVER		;ASSUME KLIPA
  2776						CAIE P1,KLPCHN
  2777						MOVE T1,NIVER		;BAD GUESS
  2778						LOAD Q2,KLP.VR		;GET VERSION NUMBER
  2779						CALL OUTOCT		;TYPE IT
  2780						MOVEI Q2,[ASCIZ\]
  2781					\]				;CLOSE THE EXPRESSION
  2782						CALL OUTSTR
  2783						RET
  2784					>
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 68
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Check Home Blocks

  2785						SUBTTL Device Loop -- Check Home Blocks
  2786
  2787					;	SUBROUTINE TO CHECK STRUCTURE NAME OF PACK ON CURRENT CHANNEL AND UNIT
  2788					;	RETURNS +1	NO MATCH
  2789					;		+2	MATCH
  2790					;	OR ERROR RETURN TO COMMAND PARSER
  2791					   IFE FT.MTA,<
  2792	773363     200 01 0 00 771200 	CHKHOM:	MOVE T1,HOMNAM		;CHECK BLOCK NAME
  2793	773364     312 01 0 00 776344 		CAME T1,[SIXBIT 'HOM']
  2794	773365     263 17 0 00 000000 		RET			;BAD
  2795	773366     200 01 0 00 771376 		MOVE T1,HOMCOD		;CHECK BLOCK CODE
  2796	773367     302 01 0 00 707070 		CAIE T1,CODHOM		;...
  2797	773370     263 17 0 00 000000 		RET			;BAD
  2798	773371     332 00 0 00 772125 		SKIPE DEV		;WAS DEVICE STRING TYPED AT CONSOLE
  2799						JRST [MOVE T1,HOMSNM	;YES, FORGET LOOKING FOR SERIAL NUMBERS
  2800							CAME T1,STRNAM	;CHECK STRUCTURE NAME
  2801							RET		;NO MATCH
  2802	773372     254 00 0 00 776345 			JRST CHKHM1]	;MATCH, RECORD THIS
  2803	773373     200 01 0 00 771364 		MOVE T1,HOMSER		;GET APR SERIAL NUMBER
  2804	773374     312 01 0 00 772447 		CAME T1,APRSER		;IS IT A MATCH?
  2805	773375     263 17 0 00 000000 		RET			;NO
  2806	773376     200 01 0 00 771203 		MOVE T1,HOMSNM		;GET STRUCTURE NAME
  2807	773377     336 00 0 00 772131 		SKIPN CURNAM		;IS THIS THE FIRST TIME THRU?
  2808	773400     202 01 0 00 772131 		MOVEM T1,CURNAM		;YES, STORE NAME
  2809	773401     312 01 0 00 772131 		CAME T1,CURNAM		;ARE THE NAMES THE SAME
  2810	773402     263 17 0 00 000000 		RET			;NO
  2811	773403     550 01 0 00 771204 	CHKHM1:	HRRZ T1,HOMLUN		;GET LOGICAL UNIT
  2812	773404     332 00 0 01 772133 		SKIPE DSKTAB(T1)	;IS THERE ALREADY AN ENTRY?
  2813	773405     254 00 0 00 776351 		$ERROR(STRMTO)		;YES - MORE THAN 1 BOOTABLE STRUCTURE
  2814	773406     200 02 0 00 772153 		MOVE T2,CURUN		;Get unit #
  2815	773407     552 02 0 01 772133 		HRRZM T2,DSKTAB(T1)	;Store it
  2816	773410     200 02 0 00 772150 		MOVE T2,CURCHN		;Get channel #
  2817	773411     201 02 0 02 400000 		MOVEI T2,ENTFLG(T2)	;GET CHANNEL & ENTRY-IN-USE FLAG
  2818	773412     506 02 0 01 772133 		HRLM T2,DSKTAB(T1)	;STORE CHANNEL NUMBER
  2819	773413     554 01 0 00 771204 		HLRZ T1,HOMLUN		;GET # UNI IN STR
  2820	773414     370 00 0 00 000001 		SOS T1
  2821	773415     335 00 0 00 772121 		SKIPGE MAXUNI		;ALREADY SET?
  2822	773416     202 01 0 00 772121 		MOVEM T1,MAXUNI		;NO - SET
  2823	773417     312 01 0 00 772121 		CAME T1,MAXUNI		;SAME AS OTHERS?
  2824	773420     254 00 0 00 776353 		 $ERROR (STRHOM)	;BAD HOME BLOCK
  2825	773421     200 02 0 00 771210 		MOVE T2,HOMRXB		;GET ROOT XB
  2826	773422     336 00 0 00 772144 		SKIPN DIORG		;ALREADY SET?
  2827	773423     202 02 0 00 772144 		MOVEM T2,DIORG		;YES - LET IT BE
  2828	773424     312 02 0 00 772144 		CAME T2,DIORG		;SAME AS OTHER
  2829	773425     254 00 0 00 776353 		 $ERROR (STRHOM)	;BAD HOME BLOCK
  2830	773426     254 00 0 00 773530 		RETSKP			;SUCCESS
  2831					   >	;End IFE FT.MTA
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 69
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Read Primary/Secondary Home Blocks

  2832						SUBTTL Device Loop -- Read Primary/Secondary Home Blocks
  2833
  2834					IFE FT.MTA, <
  2835					IFN KLFLG ,<
  2836
  2837					; ROUTINES TO READ PAGES CONTAINING PRIMARY AND SECONDARY HOME BLOCKS
  2838					; CURCHN and CURUN must be setup
  2839					;		CALL RD10
  2840					; RETURNS +1 IF NO ERRORS, ELSE CAUSES DSKHDE ERROR RETURN
  2841
  2842
  2843		   	   000500		NRETRY==500		;Number of times to retry.
  2844									;Note:  the retry count must take into account
  2845									;dual ported devices in which the other side
  2846									;is keeping the port very active
  2847
  2848
  2849						;Read secondary home block
  2850	773427     334 13 0 00 776355 	RD10:	SKIPA P4,[.RHSBR!LR!0B27!^D10B35] ;DESIRED SECTOR AND TRACK
  2851						;Read primary home block
  2852	773430     200 13 0 00 776356 	RD0:	MOVE P4,[.RHSBR!LR!0B27!0B35] ;RH20 XFR CONTROL REGISTER
  2853
  2854
  2855	773431     201 03 0 00 000500 		MOVEI T3,NRETRY		;MAX TIMES TO RETRY THIS OPERATION
  2856	773432     200 01 0 00 776357 	RD00:	MOVE T1,[R4%CSR!LR!R4%CRC!GO] ;RECALIBRATE FUNCTION
  2857	773433     260 17 0 00 773116 		CALL RHWT1		;GO RECALIBRATE DRIVE
  2858	773434     205 01 0 00 010000 	RD0A:	MOVX T1,R4%DSR		;RP04 DEVICE STATUS REGISTER
  2859	773435     260 17 0 00 773115 		CALL RHRD1		;GET DRIVE STATUS
  2860	773436     606 01 0 00 000200 		TXNN T1,DS.DRY		;RECALIBRATE FINISHED ?
  2861	773437     254 00 0 00 773434 		JRST RD0A		;NO, GO WAIT TILL DONE
  2862	773440     200 01 0 00 776360 		MOVE T1,[R4%CSR!LR!R4%RIP!GO] ;READ-IN PRESET FUNCTION
  2863	773441     260 17 0 00 773116 		CALL RHWT1		;INITIALIZE DRIVE
  2864
  2865
  2866	773442     200 04 0 00 776361 		MOVE T4,[.RHSTR!LR!RCLP!STLW!R4%CRD!GO] ;RH20 XFR CONTROL REGISTER
  2867	773443     211 01 0 00 000004 		MOVNI T1,N.BKP4*1	;ONE PAGE
  2868	773444     137 01 0 00 776362 		DPB T1,[POINT 10,T4,29]	;ADD -BLOCK COUNT
  2869						;..
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 70
BOOT	MAC	16-Feb-88 20:26		Device Loop -- Read Primary/Secondary Home Blocks

  2870
  2871
  2872					; ROUTINE TO DO A DATAO TO THE RP04
  2873
  2874					; ACCEPTS IN T4/	DATAO DATA
  2875					;	     P4/	POSITION SELECT WORD
  2876					;	CURCHN and CURUN must be setup
  2877					; RETURNS + 1 IF NO ERRORS, ELSE CAUSES DSKHDE ERROR RETURN
  2878
  2879
  2880	773445     200 01 0 00 000013 	DOOP0:	MOVE T1,P4		;GET POSITION SELECT WORD
  2881	773446     260 17 0 00 773116 		CALL RHWT1		;WRITE IT
  2882	773447     200 01 0 00 000004 		MOVE T1,T4		;GET TRANSFER WORD
  2883	773450     201 02 0 00 141520 		MOVEI T2,TIMOUT		;GET TIMEOUT COUNT
  2884	773451     260 17 0 00 773116 		CALL RHWT1		;GO DO THE DATAO
  2885	773452     260 17 0 00 773124 	DOOP1:	CALL RHCI1		;GO GET CONI BITS
  2886	773453     606 01 0 00 000010 		TXNN T1,.RHDON		;OPERATION COMPLETE ?
  2887	773454     367 02 0 00 773452 		SOJG T2,DOOP1		;NO, LOOP TILL DONE
  2888	773455     201 01 0 00 005410 		MOVEI T1,.RHRAE!.RHCTE!.RHMBE!.RHDON
  2889	773456     260 17 0 00 773127 		CALL RHCO1		;CLEAR OUT CHANNEL GRACEFULLY
  2890	773457     323 02 0 00 773467 		JUMPLE T2,DOOP2		;OPERATION EVER FINISH ?
  2891	773460     205 01 0 00 010000 		MOVX T1,R4%DSR		;YES, SET UP TO GET DEVICE STATUS
  2892	773461     260 17 0 00 773115 		CALL RHRD1		;GO GET DEVICE STATUS
  2893	773462     602 01 0 00 040000 		TXNE T1,DS.ERR		;CHECK COMPOSITE ERROR INDICATOR
  2894	773463     254 00 0 00 773467 		JRST DOOP2		;THE CRUMMY DRIVE SCREWED UP
  2895	773464     260 17 0 00 773124 		CALL RHCI1		;GO GET CONI BITS
  2896	773465     606 01 0 00 775120 		TXNN T1,RHERR		;ANY ERRORS ?
  2897	773466     263 17 0 00 000000 		RET			;ALL DONE, RETURN
  2898
  2899	773467     201 01 0 00 003420 	DOOP2:	MOVEI T1,.RHMBR+.RHMBE+.RHCTE+.RHSTP ;GET MASSBUS RESET AND ENABLE BITS
  2900	773470     260 17 0 00 773127 		CALL RHCO1		;DO CONO TO CHANNEL
  2901	773471     201 01 0 00 000400 		MOVEI T1,.RHMBE		;GET MASSBUS ENABLE
  2902	773472     260 17 0 00 773127 		CALL RHCO1		;ENABLE CHANNEL
  2903	773473     200 01 0 00 776363 		MOVE T1,[R4%ATN!LR!377]	;RP04 ATTENTION REGISTER
  2904	773474     260 17 0 00 773116 		CALL RHWT1		;CLEAR ATTENTION
  2905	773475     367 03 0 00 773432 		SOJG T3,RD00		;TRY IT ALL OVER AGAIN
  2906	773476     263 17 0 00 000000 		RET			;CATCH ERROR LATER
  2907
  2908					>				;END IFN KLFLG
  2909					>				;END IFE FT.MTA
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 71
BOOT	MAC	16-Feb-88 20:26		Page Fault Handler 

  2910						SUBTTL Page Fault Handler 
  2911
  2912					;PAGE FAULT HANDLER DURING STARTUP
  2913					IFN KLFLG,<
  2914	773477     350 00 0 00 765502 	PFERR:	AOS A%EPT+UPTPFO	;THE PC OF THE FAULT
  2915	773500     254 00 1 00 765502 		JRST @<A%EPT+UPTPFO>	;PROCEED
  2916
  2917					;Page Fault Handler while BOOT is running normally
  2918
  2919	773501     261 17 0 00 000005 	PFH:	PUSH P,Q1		;Save an AC
  2920	773502     261 17 0 00 000006 		PUSH P,Q2
  2921	773503     261 17 0 00 000007 		PUSH P,Q3		;All get clobberred by the output routines
  2922	773504     550 05 0 00 765502 		HRRZ Q1,A%EPT+UPTPFO	;Get PC of fault
  2923	773505     302 05 0 00 775344 		CAIE Q1,CHKAD		;Was it in CHKNXM routine?
  2924	773506     254 00 0 00 773514 		JRST PFH1		;No, continue
  2925	773507     476 00 0 00 772244 		SETOM PFFLG		;Yes, set flag to notify CHKNXM
  2926	773510     262 17 0 00 000007 		POP P,Q3		;Restore saved ACs
  2927	773511     262 17 0 00 000006 		POP P,Q2
  2928	773512     262 17 0 00 000005 		POP P,Q1
  2929	773513     254 00 0 00 775345 		JRST CHKDON		;And continue CHKNXM
  2930
  2931	773514     260 17 0 00 773562 	PFH1:	CALL CRLF		;New line here
  2932	773515     200 06 0 00 775405 		MOVE Q2,ERRPFX		;Get the prefix
  2933	773516     260 17 0 00 774305 		CALL OUTSTR		;Output it
  2934	773517     201 06 0 00 776364 		MOVEI Q2,[ASCIZ/ Page Fail at PC: /]
  2935	773520     260 17 0 00 774305 		CALL OUTSTR
  2936	773521     200 06 0 00 765502 		MOVE Q2,A%EPT+UPTPFO	;Get the PC
  2937	773522     260 17 0 00 774314 		CALL OUTOCT		;Print it out
  2938	773523     201 06 0 00 776370 		MOVEI Q2,[ASCIZ/, Page Fail Word: /]
  2939	773524     260 17 0 00 774305 		CALL OUTSTR
  2940	773525     200 06 0 00 765500 		MOVE Q2,A%EPT+UPTPFW	;Get PFW
  2941	773526     260 17 0 00 774314 		CALL OUTOCT
  2942	773527     254 00 0 00 773653 		JRST ERRET		;Start over again
  2943
  2944					>				;END IFN KLFLG
  2945
  2946	773530   			RSKP:
  2947	773530     350 00 0 17 000000 	CPOPJ1:	AOS (P)			;SKIP RETURN
  2948
  2949	773531   			R:
  2950	773531     263 17 0 00 000000 	CPOPJ:	RET
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 72
BOOT	MAC	16-Feb-88 20:26		CTY I/O Routines -- Read String from CTY

  2951						SUBTTL CTY I/O Routines -- Read String from CTY
  2952
  2953					;STRING READ FROM CONSOLE
  2954
  2955	773532     200 07 0 00 776374 	GETSTR:	MOVE Q3,[POINT 7,D$ISTR] ;OUTPUT POINTER
  2956	773533     200 01 0 00 000007 		MOVE T1,Q3		;SAVE - THIS IS OUR VALUE
  2957	773534     332 02 0 00 772252 		SKIPE T2,LODTYP		;DIALOGUE LOAD? SKIP IF SO.
  2958	773535     254 00 0 00 773566 		JRST GETST1		;NO. GO PROCESS BITS
  2959
  2960	773536     260 17 0 00 773575 	GET.W:	CALL TYI		;READ A CHARACTER
  2961	773537     306 05 0 00 000025 		CAIN Q1,"U"-100		;CONTROL-U?
  2962						JRST [	MOVEI Q2,[ASCIZ/XXX/] ;YES - OUTPUT LINE DELETE PROMPT
  2963							CALL OUTSTR
  2964	773540     254 00 0 00 776376 			JRST GETCOM]	;AND GET ANOTHER LINE
  2965	773541     306 05 0 00 000177 		CAIN Q1,177		;RUBOUT?
  2966						JRST [	PUSH P,T1	;YES = START THE DELETE
  2967							LDB Q1,Q3	;GET THE LAST CHARATER
  2968							HRROI T1,-1	;BACKUP THE BYTE POINTER
  2969							CAME Q3,[10700,,D$ISTR-1]	;HAVE WE?
  2970							CAMN Q3,[POINT 7,D$ISTR]	;HAVE WE?
  2971							JRST [	MOVEI Q1,7	;YES - RING THE BELL
  2972								CALL TYO	;OUTPUT THE BELL
  2973								POP P,T1
  2974								JRST GET.W]	;GET NEXT CHARACTER
  2975							ADJBP T1,Q3
  2976							CALL TYO	;OUTPUT THE CHARACTER LAST TYPED
  2977							MOVEI Q1,"\"	;AND THE BACK-SLASH
  2978							CALL TYO	;TYPE IT
  2979							MOVEM T1,Q3	;RESET BYTE POINTER
  2980							POP P,T1
  2981	773542     254 00 0 00 776406 			JRST GET.W]	;GET NEXT CHARACTER
  2982	773543     301 05 0 00 000140 		CAIL Q1,140		;LOWER CASE?
  2983	773544     275 05 0 00 000040 		SUBI Q1,40		;YES, MAKE UPPER
  2984	773545     306 05 0 00 000015 		CAIN Q1,15		;EOL?
  2985	773546     254 00 0 00 773555 		JRST GET.EL		;YES - FINISH OUT
  2986	773547     136 05 0 00 000007 		IDPB Q1,Q3		;STORE CHARACTER
  2987	773550     302 05 0 00 000072 		CAIE Q1,":"		;DEV NAME TERM?
  2988	773551     254 00 0 00 773536 		JRST GET.W		;NO - LOOP
  2989	773552     202 01 0 00 772125 		MOVEM T1,DEV		;YES - SET FLAG
  2990	773553     200 01 0 00 000007 		MOVE T1,Q3		;NEW COMMAND PTR
  2991	773554     254 00 0 00 773536 		JRST GET.W		;LOOP FOR MORE
  2992
  2993	773555     136 05 0 00 000007 	GET.EL:	IDPB Q1,Q3		;STORE CR
  2994	773556     260 17 0 00 773562 		CALL CRLF		;ECHO CRLF
  2995	773557     401 02 0 00 000000 		SETZI T2,		;TERMINATING NULL
  2996	773560     136 02 0 00 000007 		IDPB T2,Q3		; STORE
  2997	773561     263 17 0 00 000000 		RET			;RETURN
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 73
BOOT	MAC	16-Feb-88 20:26		CTY I/O Routines -- Read String from CTY

  2998
  2999	773562     201 05 0 00 000015 	CRLF:	MOVEI Q1,15		;CR WITH PARITY
  3000	773563     260 17 0 00 773604 		CALL TYO		;TYPE OUT
  3001	773564     201 05 0 00 000012 		MOVEI Q1,12		;LF
  3002	773565     254 00 0 00 773604 		CALLRET TYO
  3003
  3004					;KLINIT HAS REQUESTED SPECIAL LOAD. PROCESS THE BITS
  3005
  3006	773566     623 02 0 00 200000 	GETST1:	TXZE T2,F11.DM		;WANT DUMP?
  3007						JRST [	MOVE T3,[BYTE (7) "/","D",.CHCRT,0]
  3008	773567     254 00 0 00 776424 			JRST GETST3]
  3009	773570     623 02 0 00 400000 		TXZE T2,F11.LD		;WANT STANDARD LOAD?
  3010						JRST [	MOVE T3,[BYTE (7) .CHCRT,0]
  3011	773571     254 00 0 00 776427 			JRST GETST3]
  3012	773572     202 03 0 00 772056 	GETST3:	MOVEM T3,D$ISTR		;STASH THE STRING
  3013	773573     202 02 0 00 772252 		MOVEM T2,LODTYP		;STASH REMAINING FLAGS
  3014	773574     263 17 0 00 000000 		RET			;AND DONE
  3015
  3016					IFN FT.UDB,<
  3017					
  3018					;USER MODE CONSOLE DRIVERS
  3019					
  3020					TYO:	PUSH P,T1		;PRESERVE T1
  3021						MOVE T1,Q1		;COPY CHAR
  3022						PBOUT			;OUTPUT IT
  3023						POP P,T1		;RESTORE T1
  3024						RET
  3025					
  3026					TYI:	PUSH P,T1		;SAVE T1
  3027						PBIN			;READ A CHAR
  3028						CAIN T1,37		;EOL?
  3029						MOVEI T1,15		;YES - TURN TO CR
  3030						MOVE Q1,T1		;RETURN IN STANDARD AC
  3031						POP P,T1		;RESTORE T1
  3032						RET
  3033					>				;END IFN FT.UDB
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 74
BOOT	MAC	16-Feb-88 20:26		CTY I/O Routines -- KL10 Console Routines

  3034						SUBTTL CTY I/O Routines -- KL10 Console Routines
  3035
  3036		   	   004000	.DTTYO==10B27			;FUNCTION CODE FOR TYPE OUT, CHAR IN LOW BITS
  3037		   	   004400	.DTMMN==11B27			;FUNCTION CODE FOR MONITOR MODE ON
  3038
  3039					;EPT LOCS
  3040
  3041		   	   765444	DTEFLG=A%EPT+444		;OPERATION COMPLETE FLAG
  3042		   	   765450	DTEF11=A%EPT+450		;PDP11 TO PDP10 ARGUMENT
  3043		   	   765451	DTECMD=A%EPT+451		;-10 TO -11 COMMAND WORD
  3044		   	   765453	DTEOPR=A%EPT+453		;OPERATION IN PROGRESS FLAG
  3045		   	   765455	DTEMTD==A%EPT+455		;MONITOR OUTPUT DONE WHEN NONZERO
  3046		   	   765456	DTEMTI==A%EPT+456		;0 IF READY FOR ANOTHER CHAR FROM 11
  3047		   	   000004	DTEN==4				;NUMBER OF DTE'S
  3048
  3049					;DTE20 HARDWARE
  3050
  3051		   	   000200	DTE==200			;DEVICE CODE
  3052		   	   100000	DTEPRV==1B20			;PRIVILEGED/RESTRICTED BIT IN CONI
  3053		   	   000010	PI0ENB==1B32			;ENABLE PI 0
  3054		   	   000020	PIENB==1B31			;SET PI ASSIGNMENT
  3055		   	   020000	TO11DB==1B22			;TO 11 DOORBELL
  3056
  3057					IFE FT.UDB,<
  3058					IFN KLFLG,<
  3059					;KL10 CONSOLE ROUTINES
  3060					;TYI - Read terminal input
  3061					;	CALL TYI
  3062					;Returns +1: always,
  3063					;	Q1/ one character, right-justified
  3064
  3065					;Reads the character and echoes it
  3066
  3067	773575     336 00 0 00 765456 	TYI:	SKIPN DTEMTI		;INPUT READY
  3068	773576     254 00 0 00 773575 		JRST TYI		;NO - LOOP
  3069	773577     200 05 0 00 765450 		MOVE Q1,DTEF11		;GET CHAR
  3070	773600     260 17 0 00 773604 		CALL TYO		;ECHO IT
  3071	773601     200 05 0 00 765450 		MOVE Q1,DTEF11		;GET CHAR AGAIN
  3072	773602     402 00 0 00 765456 		SETZM DTEMTI		;RESET INPUT DONE FLAG
  3073	773603     263 17 0 00 000000 		RET
  3074
  3075					;TELETYPE OUTPUT
  3076
  3077	773604     402 00 0 00 765455 	TYO:	SETZM DTEMTD		;CLEAR OUTPUT DONE FLAG
  3078	773605     660 05 0 00 004000 		TRO Q1,.DTTYO		;LIGHT FUNCTION BI
  3079	773606     202 05 0 00 765451 		MOVEM Q1,DTECMD		;STORE FOR 11
  3080	773607     201 05 0 00 020000 		MOVEI Q1,TO11DB		;RING DOORBELL
  3081	773610     256 00 0 00 772436 		XCT DTCNOW		;DO IT
  3082	773611     336 00 0 00 765455 		SKIPN DTEMTD		;DONE YET?
  3083	773612     254 00 0 00 773611 		JRST .-1		;NO
  3084	773613     263 17 0 00 000000 		RET			;YES
  3085					>				; END IFN KLFLG
  3086					>				;END IFE FT.UDB
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 75
BOOT	MAC	16-Feb-88 20:26		Output Errors

  3087						SUBTTL Output Errors
  3088
  3089					;ON ERRORS, ARRIVE HERE WITH ERROR TYPE IN Q2
  3090
  3091	773614   			ERRTYP:
  3092	773614     200 01 0 00 772247 		MOVE T1,BTFLGS		;Get home-block flags
  3093	773615     603 01 0 00 200000 		TXNE T1,BT%HOD		;Halt on dump errors?
  3094									;(Nothing to halt on any other errors)
  3095	773616     402 00 0 00 772252 		SETZM LODTYP		;FORCE INTERACTIVE MODE ON ERROR
  3096	773617     402 00 0 00 772251 		SETZM KLIFLG		;[7.1224] Tell monitor to ask "Why reload?"
  3097	773620     261 17 0 00 000006 		PUSH P,Q2		;SAVE Q2
  3098	773621     260 17 0 00 773562 		CALL CRLF		;OUTPUT CRLF
  3099	773622     200 06 0 00 775405 		MOVE Q2,ERRPFX		;GET THE PREFIX
  3100	773623     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT IT
  3101	773624     200 06 0 17 000000 		MOVE Q2,(P)		;GET ERROR TYPE
  3102	773625     200 06 0 06 775406 		MOVE Q2,ERRTAB(Q2)	;GET POINTER TO MESSAGE
  3103	773626     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT MESSAGE
  3104
  3105					;DON'T TRY FOR STRUCTURE/FILENAMES STATUS IF MTBOOT
  3106
  3107	773627     201 01 0 00 000043 		MOVEI T1,^D35		;TURN ERROR SYMBOL INTO A BIT
  3108	773630     274 01 0 17 000000 		SUB T1,(P)
  3109	773631     201 02 0 00 000001 		MOVEI T2,1
  3110	773632     242 02 0 01 000000 		LSH T2,(T1)
  3111	773633     202 02 0 17 000000 		MOVEM T2,(P)		;SAVE THE BIT
  3112
  3113						   IFE FT.MTA,<
  3114	773634     200 06 0 00 776431 		MOVE Q2,[%SNAM]		;DO WE REQUIRE A STRUCTURE NAME?
  3115	773635     616 06 0 17 000000 		TDNN Q2,(P)		;...
  3116	773636     254 00 0 00 773644 		JRST TFIL		;NO
  3117	773637     201 06 0 00 776432 		MOVEI Q2,[ASCIZ/:  /]
  3118	773640     260 17 0 00 774305 		CALL OUTSTR		;TYPE COLON
  3119	773641     336 06 0 00 772131 		SKIPN Q2,CURNAM		;GET STRUCTURE NAME FROM CURNAM IF NON-ZERO
  3120	773642     200 06 0 00 772130 		MOVE Q2,STRNAM		;GET STRUCTURE NAME
  3121	773643     260 17 0 00 774374 		CALL TYPSTR		;TYPE IT
  3122	773644     200 06 0 00 776433 	TFIL:	MOVE Q2,[%FNAM]		;DO WE REQUIRE A FILE NAME?
  3123	773645     612 06 0 17 000000 		TDNE Q2,(P)		;...
  3124	773646     260 17 0 00 774406 		CALL TYPFIL		;YES
  3125					>				;END FT.MTA CONDITIONAL
  3126	773647     260 17 0 00 773562 		CALL CRLF		;OUTPUT CRLF
  3127	773650     200 06 0 00 776434 		MOVE Q2,[%DVSTS]	;WANT DEVICE STATUS?
  3128	773651     612 06 0 17 000000 		TDNE Q2,(P)		;...
  3129	773652     260 17 0 00 774335 		CALL OUTSTS		;YES
  3130
  3131	773653     326 16 0 00 773656 	ERRET:	JUMPN CX,MRET1		;RETURN TO MONITOR?
  3132	773654     254 00 0 00 772624 		JRST GETCM1		;NO, TRY FOR NEW COMMAND
  3133
  3134	773655     350 00 0 00 000016 	MRET2:	AOS CX			;RETURN +2
  3135	773656     200 15 0 00 772356 	MRET1:	MOVE CX-1,PFLAGS	;RETURN +1  - RESTORE FLAGS
  3136	773657     254 05 0 00 000015 		XJRSTF CX-1
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 76
BOOT	MAC	16-Feb-88 20:26		VBOOT - Bootstrap Function Entry Point

  3137						SUBTTL VBOOT - Bootstrap Function Entry Point
  3138
  3139					;VBOOT
  3140					;ENTER HERE FOR YOUR FAVORITE BOOTSTRAP FUNCTION
  3141
  3142					;ARGUMENTS:
  3143					;	T1 - BYTE POINTER TO COMMAND STRING
  3144
  3145					;
  3146					;CALL
  3147					;	;FIRST SETUP MAP FOR PAGES VORG-24 TO VORG + PROGRAM DATA
  3148					;	;ALSO SETUP DISK PARAMETERS IN DATA AREA
  3149					;	EXTERNAL:	JSP 16,VBOOT
  3150					;	INTERNAL:	PUSHJ P,VBOOT1
  3151
  3152					;RETURNS:	NO ERROR, NO START:	POPJ P, - TO VBTRET
  3153					;		ERROR:			JRST ERRTYP
  3154					;		START:			JRST @START
  3155					;
  3156					;	NOTE THAT VBOOT RUNS IN THE SECTION IT WAS CALLED FROM:
  3157					;
  3158					;	CALLER		SECTION
  3159					;	------		-------
  3160					;	BOOT		   0
  3161					;	TOPS20 V4	   0
  3162					;	TOPS20 V5	   1
  3163
  3164					;	BOOT MAY BE CALLED FROM SECTIONS 0 - 37
  3165					;	TO BE CALLED FROM A SECTION LARGER THAN 37 REQUIRES
  3166					;	A CHANGE IN THE MONITOR'S CALL TO BOOT
  3167
  3168
  3169	773660     254 14 0 00 772356 	VBOOT::	XSFM PFLAGS		;SAVE FLAGS
  3170	773661     415 04 0 00 772722 		XMOVEI T4,VBTRET	;VBOOT IS ENTRY VECTOR FOR MONITOR ONLY -
  3171	773662     261 17 0 00 000004 		PUSH P,T4		; SET UP FOR POPJ RETURN TO FOUND: CODE
  3172	773663     621 16 0 00 777740 		TLZ CX,777740		;IN CASE WE WERE CALLED FROM SECTION ZERO,
  3173									; TURN OFF ALL PC FLAGS (0-12)
  3174	773664     350 00 0 00 772354 		AOS MONLOD		;INDICATE ANOTHER INVOCATION OF VBOOT
  3175	773665     255 00 0 00 000000 	VBOOT1::JFCL			;VBOOT1 IS INTERNAL ENTRY VECTOR
  3176	773666     403 00 0 00 772437 		SETZB F,PIAINI		;CLEAR FLAGS AND RH20 PI ASSIGNMENT
  3177	773667     202 01 0 00 772000 		MOVEM T1,ISTRNG		;T1 HAS STRING POINTER
  3178	773670     200 02 0 00 776435 		MOVE T2,[PIAINI,,PIAINI+1] ;Setup to clear the whole table
  3179	773671     251 02 0 00 772446 		BLT T2,PIAINI+MAXCHN	;Do it
  3180	773672     200 15 0 00 772132 		MOVE P6,TAPTYP		;PICK UP THE TAPE TYPE
  3181	773673     260 17 0 00 775126 		CALL CHNSAV		;SAVE CHANNEL STATE
  3182	773674     260 17 0 00 774010 		CALL PARSE		;PARSE STRING, SETUP ARG BLOCKS
  3183	773675     603 00 0 00 000100 		TLNE F,(F.INFO)		;ANY PASIVE FUNCTIONS?
  3184	773676     260 17 0 00 774242 		CALL INFO		;YES
  3185	773677     607 00 0 00 020000 		TLNN F,(F.ACT)		;ANY ACTIVE FUNCTIONS?
  3186	773700     254 00 0 00 773727 		JRST EXIT		;NO - EXIT
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 77
BOOT	MAC	16-Feb-88 20:26		VBOOT - Bootstrap Function Entry Point

  3187
  3188					IFE FT.MTA,<
  3189	773701     260 17 0 00 774426 		CALL FNDIDX		;GET INDEX BLOCK OF DESIRED FILE
  3190	773702     325 00 0 00 773705 		JUMPGE F,LODRUN		;DUMP DESIRED? (B0 OF F)
  3191	773703     260 17 0 00 775670 		CALL SAVE		;YES - DO DUMP
  3192	773704     263 17 0 00 000000 		RET
  3193					>				;END IFE FT.MTA
  3194
  3195					;IFN FT.MTA, JUST FALL INTO THIS ROUTINE
  3196
  3197	773705     200 06 0 00 772250 	LODRUN:	MOVE Q2,MSGHDR		;Get prompt header
  3198	773706     260 17 0 00 774305 		CALL OUTSTR		;Display it
  3199	773707     200 01 0 00 772354 		MOVE T1,MONLOD		;GET VBOOT INVOCATION COUNT
  3200	773710     322 01 0 00 773720 		JUMPE T1,PASS0		;JUMP IF FIRST INVOCATION
  3201	773711     201 06 0 00 776436 		MOVEI Q2,[ASCIZ/loading swappable monitor, pass /]
  3202	773712     260 17 0 00 774305 		CALL OUTSTR
  3203	773713     200 06 0 00 772354 		MOVE Q2,MONLOD		;GET INVOCATION COUNT
  3204	773714     260 17 0 00 774314 		CALL OUTOCT		;OUTPUT IT
  3205	773715     201 06 0 00 776300 		MOVEI Q2,[ASCIZ/] /]	;CLOSE THE EXPRESSION
  3206	773716     260 17 0 00 774305 		CALL OUTSTR		;...
  3207	773717     254 00 0 00 773722 		JRST GETCAL
  3208	773720     201 06 0 00 776445 	PASS0:	MOVEI Q2,[ASCIZ/Loading] /]
  3209	773721     260 17 0 00 774305 		CALL OUTSTR
  3210
  3211	773722     260 17 0 00 775463 	GETCAL:	CALL GET		;HERE IF LOAD OR RUN FUNCTIONS
  3212						MOVEI Q2,[ASCIZ/[OK]
  3213	773723     201 06 0 00 776271 	/]
  3214	773724     260 17 0 00 774305 		CALL OUTSTR
  3215
  3216					IFN KLFLG,<
  3217	773725     402 00 0 00 765456 		SETZM DTEMTI		;ZERO INPUT READY FLAG
  3218	773726     260 17 0 00 773740 		CALL SETLCV		;SETUP LOW CORE VARS
  3219	773727     260 17 0 00 775151 	EXIT:	CALL CHNRST		;RESTORE CHANNNEL
  3220					>				; END OF IFN KLFLG
  3221	773730     607 00 0 00 001000 		TXNN F,F.EDDT		;START EDDT?
  3222	773731     254 00 0 00 773735 		JRST TSSTRT		;NO
  3223	773732     201 01 0 00 000141 		MOVEI T1,ELOC		;GET MONITOR START ADDR FOR EDDT
  3224	773733     552 01 0 00 772001 		HRRZM T1,START		;SAVE IT
  3225	773734     254 00 0 00 773736 		JRST DOSTRT		;GO DO IT
  3226	773735     603 00 0 00 040000 	TSSTRT:	TLNE F,(F.STRT)		;SHOULD PROGRAM BE STARTED?
  3227	773736     254 00 1 00 772001 	DOSTRT:	JRST @START		;YES - GO TO IT
  3228	773737     263 17 0 00 000000 		RET			;Presumed good return		
  3229
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 78
BOOT	MAC	16-Feb-88 20:26		VBOOT - Bootstrap Function Entry Point

  3230
  3231					;Here to set low core variables
  3232
  3233	773740     350 01 0 00 772251 	SETLCV:	AOS T1,KLIFLG		;[7.1224] Get flags passed to us by KLINIT
  3234	773741     202 01 0 00 000206 		MOVEM T1,BOOTFL		;[7.1224] Save KLINIT flags for monitor's use
  3235	773742     551 01 0 00 777000 		HRRZI T1,A%VORG		;GET ENDING PAGE ADDRESS
  3236	773743     505 01 0 00 742000 		HRLI T1,A%VFST		;GET STARTING PAGE ADDRESS
  3237	773744     202 01 0 00 000202 		MOVEM T1,BUTPGS		;SAVE ENDING PAGES IN COMMUNICATION AREA
  3238	773745     415 01 0 00 773660 		XMOVEI T1,VBOOT		;SET START ADDRESS
  3239	773746     202 01 0 00 000207 		MOVEM T1,BUTSTA
  3240	773747     551 01 0 00 766000 		HRRZI T1,A%PTB		;GET ADDRESS OF EPT PAGE
  3241	773750     505 01 0 00 765000 		HRLI T1,A%EPT		;GET ADDRESS OF VBOOT EPT PAGE
  3242	773751     202 01 0 00 000203 		MOVEM T1,BUTEPT		;SAVE EPT PAGE ADDRESS FOR MONITOR
  3243	773752     200 01 0 00 772232 		MOVE T1,MAXCOR		;GET MAX CORE AVAILABLE
  3244	773753     201 01 0 01 763000 		MOVEI T1,A%CCW-A%VORG(T1) ;GET PHYSICAL ADDRESS OF FIRST PAGE
  3245	773754     505 01 0 00 777762 		HRLI T1,-<<A%VORG-A%CCW>_-9+1> ;GET # OF PAGES MONITOR MUST MAP
  3246	773755     202 01 0 00 000204 		MOVEM T1,BUTPHY		;SAVE MAPPING INFO FOR MONITOR
  3247	773756     201 01 0 00 762000 		MOVEI T1,A%CCW		;GET FIRS VIRTUAL ADDRESS TO MAP
  3248	773757     202 01 0 00 000205 		MOVEM T1,BUTVIR		;SAVE VIRTUAL ADDRESS FROM MONITOR
  3249
  3250	773760     200 07 0 00 776447 		MOVE Q3,[POINT 7,BUTCMD] ;STORE FILESPEC
  3251	773761     201 05 0 00 000074 		MOVEI Q1,"<"		;DIR
  3252	773762     136 05 0 00 000007 		IDPB Q1,Q3		;STORE CHAR
  3253	773763     200 06 0 00 772003 		MOVE Q2,DIRSTR		;DIR STRING
  3254	773764     260 17 0 00 774004 		CALL CPYSTR		;COPY STRING
  3255	773765     201 05 0 00 000076 		MOVEI Q1,">"		;END OF DIR STRING
  3256	773766     136 05 0 00 000007 		IDPB Q1,Q3		;STORE CHAR
  3257	773767     200 06 0 00 772002 		MOVE Q2,FILSTR		;FILENAME STRING
  3258	773770     260 17 0 00 774004 		CALL CPYSTR		;COPY STRING
  3259	773771     201 05 0 00 000056 		MOVEI Q1,"."		;FOR EXT
  3260	773772     136 05 0 00 000007 		IDPB Q1,Q3		;STORE
  3261	773773     200 06 0 00 772004 		MOVE Q2,EXTSTR		;EXTENSION
  3262	773774     260 17 0 00 774004 		CALL CPYSTR		;COPY STRING
  3263	773775     336 00 0 00 772113 		SKIPN VERNUM		;VERSION SPECIFIED?
  3264	773776     254 00 0 00 774143 		JRST APPNUL		;NO - EXIT
  3265	773777     201 05 0 00 000056 		MOVEI Q1,"."		;YES- PUT VERSION OUT
  3266	774000     136 05 0 00 000007 		IDPB Q1,Q3		;STORE
  3267	774001     200 06 0 00 772005 		MOVE Q2,VERSTR		; ...
  3268	774002     260 17 0 00 774004 		CALL CPYSTR
  3269	774003     254 00 0 00 774143 		JRST APPNUL
  3270
  3271	774004     134 05 0 00 000006 	CPYSTR:	ILDB Q1,Q2		;GET A CHAR
  3272	774005     322 05 0 00 773531 		JUMPE Q1,CPOPJ		;END OF STRING
  3273	774006     136 05 0 00 000007 		IDPB Q1,Q3		;OUTPUT A CHAR
  3274	774007     254 00 0 00 774004 		JRST CPYSTR
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 79
BOOT	MAC	16-Feb-88 20:26		Command String Parser

  3275						SUBTTL Command String Parser
  3276
  3277					;THE COMMAND STRING PARSER
  3278
  3279	774010     200 01 0 00 776450 	PARSE:	MOVE T1,[XWD DEFDAT,DEFBEG] ;SETUP BLT POINTER FOR DEFAULTS
  3280	774011     251 01 0 00 772011 		BLT T1,DEFEND		;COPY DEFAULTS
  3281	774012     621 00 0 00 001000 		TXZ F,F.EDDT		;RESET EDDT FLAG
  3282	774013     200 06 0 00 772000 		MOVE Q2,ISTRNG		;GET POINTER TO INPUT STRING
  3283	774014     201 14 0 00 774165 		MOVEI P5,ST.0		;INITIAL STATE
  3284	774015     260 17 0 00 774107 	P.NXT:	CALL NXTSTA		;SETUP OUTPUTS THEN EVAL NXT STATE
  3285	774016     322 14 0 00 774023 		JUMPE P5,P.TRM		;TERMINAL STATE REACHED
  3286	774017     306 14 0 00 000777 		CAIN P5,777		;ERROR STATE
  3287	774020     254 00 0 00 776451 		  $ERROR (COMERR)	;COMMAND ERROR
  3288	774021     435 14 0 00 774000 		IORI P5,STPORG		;NO - RELOCATE STATE TABLE
  3289	774022     254 00 0 00 774015 		JRST P.NXT		;GO GET NEXT STATE
  3290
  3291	774023     200 06 0 00 772005 	P.TRM:	MOVE Q2,VERSTR		;TERMINATION - GET VERSION AS #
  3292	774024     260 17 0 00 774222 		CALL DECIN		;CONVERT TO BINARY
  3293	774025     202 12 0 00 772113 		MOVEM P3,VERNUM		;SAVE VERSION
  3294
  3295	774026     603 00 0 00 002000 		TXNE F,F.DUMP		;DUMP WANTED?
  3296	774027     621 00 0 00 000600 		TXZ F,F.ALL!F.NCHL	;YES, CLEAR THESE FLAGS
  3297	774030     200 06 0 00 772010 		MOVE Q2,LBSTR		;GET POINTER TO LOWER BOUND
  3298	774031     603 00 0 00 000400 		TXNE F,F.ALL		;WANT TO USE ALL OF CORE?
  3299	774032     634 12 0 00 000012 		TDZA P3,P3		;YES, GET A 0
  3300	774033     260 17 0 00 774224 		CALL OCTIN		;NO, READ LOWER BOUND
  3301	774034     202 12 0 00 772114 		MOVEM P3,LWRLIM		;SAVE LOWER BOUND
  3302
  3303	774035     200 06 0 00 772007 		MOVE Q2,UBSTR		;GET POINTER TO UPPER BOUND
  3304	774036     603 00 0 00 000400 		TXNE F,F.ALL		;WANT ALL OF CORE?
  3305	774037     334 12 0 00 776453 		SKIPA P3,[VFREE]	;YES, GET HIGHEST PAGE BOOT CAN READ
  3306	774040     260 17 0 00 774224 		CALL OCTIN		;NO, READ IT
  3307	774041     202 12 0 00 772115 		MOVEM P3,UPRLIM		;SAVE UPPER BOUND
  3308
  3309	774042     200 06 0 00 772006 		MOVE Q2,SWSTR		;GET SWITCH STRING
  3310	774043     134 01 0 00 000006 		ILDB T1,Q2		;GET NEXT CHARACTER
  3311	774044     322 01 0 00 774071 		JUMPE T1,P.NOS		;NO SWITCHES - TEST START ADDR AND RETURN
  3312	774045     401 02 0 00 000000 		SETZI T2,		;CLEAR SWITCH INDEX
  3313	774046     200 03 0 00 774073 		MOVE T3,SWTAB		;GET POINTER TO SWITCHES
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 80
BOOT	MAC	16-Feb-88 20:26		Command String Parser

  3314
  3315	774047     134 04 0 00 000003 	P.NXS:	ILDB T4,T3		;GET A LEGAL SWITCH
  3316	774050     336 00 0 00 000004 		SKIPN T4		;ZERO MEANS SWITCH LIST EXHAUSTED
  3317	774051     254 00 0 00 776454 		 $ERROR (COMUNS)	;UNKNOWN SWITCH
  3318	774052     312 01 0 00 000004 		CAME T1,T4		;TEST IF THIS IS A MATCH
  3319	774053     344 02 0 00 774047 		AOJA T2,P.NXS		;NO MATCH - LOOP
  3320	774054     256 00 0 02 774076 		XCT SWXTAB(T2)		;EXECUTE APPROPRIATE INSTRUCTION
  3321	774055     332 00 0 00 772107 		SKIPE D$UB		;UPPER BOUND SPECIFIED ?
  3322	774056     254 00 0 00 774062 		JRST P.SW2		;YES, USE SPECIFIED VALUE
  3323	774057     200 01 0 00 776205 		MOVE T1,[PHYPAG]	;GET HIGHEST PHYSICAL PAGE WE CAN DUMP
  3324
  3325	774060     603 00 0 00 002000 		TXNE F,F.DUMP		;DUMP REQUESTED ?
  3326	774061     202 01 0 00 772115 		MOVEM T1,UPRLIM		;YES, USE DEFAULT UPPER LIMIT FOR DUMP
  3327	774062     607 00 0 00 400000 	P.SW2:	TLNN F,(F.WRIT)		;WRITING?
  3328	774063     254 00 0 00 774067 		JRST P.SA		;NO - CHECK STARTING ADDR
  3329	774064     120 01 0 00 774154 		DMOVE T1,DEF.WT		;LOAD BOTH FILENAME DEFAULTS
  3330	774065     316 02 0 00 772002 		CAMN T2,FILSTR		;NAME SPECIFIED?
  3331	774066     202 01 0 00 772002 		MOVEM T1,FILSTR		;NO - CHANGE DEFAULT
  3332
  3333	774067     260 17 0 00 774224 	P.SA:	CALL OCTIN		;CONVERT STARTING ADDRESS
  3334	774070     254 00 0 00 774236 		CALLRET SETSA		;SET STARTING ADDR AND RETURN
  3335
  3336					;THIS RANDOM INSTRUCTION FROM PARSE IS HERE TO SAVE SPACE
  3337
  3338	774071     661 00 0 00 160000 	P.NOS:	TLO F,(F.STRT!F.CLR!F.ACT) ;DEFAULT WHEN NO SWITCHES
  3339	774072     263 17 0 00 000000 		RET			;RETURN
  3340
  3341	774073     44 07 0 00 774074 	SWTAB:	POINT 7,.+1		;POINTER TO SWITCH LIST
  3342	774074     115 114 122 104 123 		ASCIZ 'MLRDSGAIE'
  3343	774075     107 101 111 105 000 
  3344
  3345	774076     661 00 0 00 020000 	SWXTAB:	TLO F,(F.ACT)		;MERGE
  3346	774077     661 00 0 00 120000 		TLO F,(F.CLR!F.ACT)	;LOAD
  3347	774100     661 00 0 00 160000 		TLO F,(F.CLR!F.STRT!F.ACT) ;RUN
  3348					IFE FT.MTA,
  3349	774101     661 00 0 00 422000 	<	TLO F,(F.WRIT!F.DUMP!F.ACT) ;DUMP
  3350	774102     661 00 0 00 420000 		TLO F,(F.WRIT!F.ACT)	;SAVE
  3351					>
  3352					IFN FT.MTA,
  3353					<	JFCL			;NOOP FOR DUMP
  3354						JFCL			;NOOP FOR SAVE
  3355					>
  3356	774103     661 00 0 00 040000 		TLO F,(F.STRT)		;GO
  3357	774104     661 00 0 00 020600 		TLO F,(F.ALL!F.ACT!F.NCHL) ;ALL
  3358	774105     661 00 0 00 000100 		TLO F,(F.INFO)		;DISPLAY PROGRAM INFORMATION
  3359	774106     661 00 0 00 121000 		TLO F,(F.CLR!F.ACT!F.EDDT)  ;LOAD AND START AT LOCATION ELOC
  3360
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 81
BOOT	MAC	16-Feb-88 20:26		Command String Parser -- State Machine

  3361						SUBTTL Command String Parser -- State Machine
  3362
  3363					;THE STATE MACHINE
  3364
  3365	774107     205 04 0 00 442214 	NXTSTA:	MOVSI T4,(<POINT 18,0(P5)>) ;MAKE INPUT BYTE PTR
  3366	774110     134 13 0 00 000004 		ILDB P4,T4		;GET OUTPUT VALUE ADDRESS
  3367	774111     134 07 0 00 000004 		ILDB Q3,T4		;GET OUTPUT DATA ADDRESS
  3368	774112     505 07 0 00 440700 		HRLI Q3,(<POINT 7,0>)	; MAKE OUTPUT BYTE PTR
  3369	774113     200 02 0 00 000007 		MOVE T2,Q3		;SAVE FOR LATER (CAREFUL WITH T2)
  3370	774114     641 04 0 00 003300 		TLC T4,003300		;SWITCH TO 9 BIT BYTES
  3371
  3372	774115     627 00 0 00 010000 	NXT.CH:	TLZN F,(F.BACK)		;TEST/CLEAR SCANNER BACKUP
  3373	774116     134 05 0 00 000006 		ILDB Q1,Q2		;GET NEXT CHAR
  3374	774117     336 00 0 00 000005 		SKIPN Q1
  3375	774120     254 00 0 00 776451 		 $ERROR(COMERR)		;COMMAND ERROR
  3376	774121     200 03 0 00 000004 		MOVE T3,T4		;COPY POINTER TO TRANSITION TABLE
  3377	774122     134 01 0 00 000003 	NXT.NT:	ILDB T1,T3		;GET NEXT TRANSITION BYTE
  3378	774123     405 01 0 00 000177 		ANDI T1,177		;GET DATA ONLY
  3379	774124     322 01 0 00 774131 		JUMPE T1,NXT.EX		;SPECIAL BYTE - PROCESS IT
  3380	774125     316 05 0 00 000001 		CAMN Q1,T1		;TRANSITION CHARACTER?
  3381	774126     254 00 0 00 774131 		JRST NXT.EX		;YES - PROCESS
  3382	774127     134 01 0 00 000003 		ILDB T1,T3		;SKIP NEXT STATE
  3383	774130     254 00 0 00 774122 		JRST NXT.NT		;AND GET NEXT TRANSITION BYTE
  3384
  3385	774131     135 01 0 00 000003 	NXT.EX:	LDB T1,T3		;GET FULL TRANSITION BYTE
  3386	774132     322 01 0 00 774146 		JUMPE T1,NXT.ST		;END OF TABLE - STORE CHAR
  3387	774133     134 14 0 00 000003 		ILDB P5,T3		;GET NEXT STATE
  3388	774134     306 14 0 00 000215 		CAIN P5,ST.6&777	;ACCUMULATING UPPER AND LOWER BOUNDS?
  3389	774135     661 00 0 00 000200 		TXO F,F.NCHL		;YES, DISABLE LIMIT CHANGING LATER
  3390	774136     242 01 0 00 777771 		LSH T1,-7		;GET FLAG BITS IN B34-35
  3391	774137     256 00 0 01 774151 		XCT NXXTAB(T1)		;EXECUTE INSTRUCTION CORRESPONDING
  3392	774140     627 00 0 00 004000 		TLZN F,(F.OUT)		;HAS STATE PRODUCED OUTPUT?
  3393	774141     263 17 0 00 000000 		RET			;NO - EXIT
  3394	774142     202 02 0 13 000000 		MOVEM T2,(P4)		;SAVE OUTPUT STRING
  3395	774143     400 02 0 00 000000 	APPNUL:	SETZ T2,		;APPEND NULL
  3396	774144     136 02 0 00 000007 		IDPB T2,Q3		;...
  3397	774145     263 17 0 00 000000 		RET
  3398
  3399	774146     136 05 0 00 000007 	NXT.ST:	IDPB Q1,Q3		;STORE OUTPUT CHAR
  3400	774147     661 00 0 00 004000 		TLO F,(F.OUT)		;INDICATE STATE DID SOMETHING
  3401	774150     254 00 0 00 774115 		JRST NXT.CH		;AND PROCESS NEXT CHARACTER
  3402
  3403					;STATE TABLE FLAG ACTION TABLE
  3404
  3405
  3406	774151     255 00 0 00 000000 	NXXTAB:	JFCL			;NO FLAGS
  3407	774152     661 00 0 00 010000 		TLO F,(F.BACK)		;(200)SCANNER BACKUP
  3408	774153     661 00 0 00 004000 		TLO F,(F.OUT)		;(400)FORCE OUTPUT
  3409									;(600)CURRENTLY UNUSED
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 82
BOOT	MAC	16-Feb-88 20:26		Command String Parser -- Default Values

  3410						SUBTTL Command String Parser -- Default Values
  3411
  3412					;THIS BLOCK OF DEFAULT VALUES IS COPIED INTO THE DATA AREA
  3413					;STARTING AT DIRSTR ENDING AT DEFEND
  3414
  3415	774154     44 07 0 00 776456 	DEF.WT:	POINT 7,[ASCIZ 'DUMP']	;DEFAULT FILSTR IF WRITING
  3416	774155   			DEFDAT:
  3417	774155     44 07 0 00 776457 	DEF.FN:	POINT 7,[ASCIZ 'MONITR'] ;DEFAULT FILSTR
  3418	774156     44 07 0 00 776461 		POINT 7,[ASCIZ 'SYSTEM'] ;DEFAULT DIRSTR
  3419	774157     44 07 0 00 776463 		POINT 7,[ASCIZ 'EXE']	;DEFAULT EXTSTR
  3420	774160     000 00 0 00 000000 	ZERO:	Z			;DEFAULT VERSTR
  3421	774161     000 00 0 00 000000 		Z			;DEFAULT SWSTR
  3422	774162     44 07 0 00 776464 		POINT 7,[ASCIZ '340']	;DEFAULT UBSTR
  3423	774163     000 00 0 00 000000 		Z			;DEFAULT LBSTR
  3424	774164     44 07 0 00 772032 		POINT 7,D$TMP		;DEFAULT DIRTMP
  3425
  3426					;NOTE: A LDB ON A BYTE POINTER WITH 0 S FIELD PRODUCES A ZERO BYTE!
  3427
  3428					IFN <<.&777000>-<<.+STTSIZ>&777000>>,< ;CHECK TO SEE IF STATE PAGE TABLE CROSSES A PAGE
  3429					FILLER=<<<.&777000>+1000>-.>&777
  3430						BLOCK	FILLER		;FORCE STATE TABLE TO PAGE BOUNDARY
  3431					>
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 83
BOOT	MAC	16-Feb-88 20:26		Command String Parser -- State Transition Tables

  3432						SUBTTL Command String Parser -- State Transition Tables
  3433
  3434					;STATE TRANSITION TABLES:
  3435
  3436					; THESE TABLES PARSE A FILESPEC OF THE FORM
  3437					;	<DIRECTORY>FILE.EXTENSION;VERSION/SWITCHSTARTADDR(LB,UB)
  3438
  3439					; FORMAT:
  3440					;	XWD OUTPUT POINTER LOCATION,DATA AREA FOR CHARACTERS OUTPUT FROM THIS STATE
  3441					;	A STRING OF 9 BIT BYTES CONSISTING OF A CHARACTER+FLAGS WHICH
  3442					;	  WILL CAUSE A STATE TRANSITION FOLLOWED BY THE LOW 9
  3443					;	  BITS OF THE TRANSITION TABLE FOR THE NEXT STATE.
  3444					;FLAGS:	200 = BACKUP SCANNER, 400=FORCE OUTPUT  EVEN IF NULL
  3445
  3446		   	   774000	STPORG=.&777000			;PAGE OFFSET TO STATE TABLES
  3447
  3448					;STATE 0 - INITIAL P5, MAKES TRANSITION TO NEXT STATE BASED ON FIRST CHARACTER.
  3449
  3450	774165     000000  000000	ST.0:	XWD 0,0			;NO OUTPUT, NO DATA AREA
  3451	774166     074 172 133 175 		BYTE (9)"<",ST.1,"[",ST.1B,".",ST.3,".",ST.4,"/",ST.5,15,0,200,ST.2
  3452	774167     056 204 056 207 
  3453	774170     057 212 015 000 
  3454	774171     200 200 000000 
  3455
  3456					;STATE 1 - ACCUMULATE DIRECTORY STRING.
  3457
  3458	774172     772003  772022	ST.1:	XWD DIRSTR,D$DIR	;POINTER=DIRSTR, DATA=D$DIR
  3459	774173     076 200 015 000 		BYTE (9)">",ST.2,15,0,0
  3460	774174     000 000 000000 
  3461
  3462					;STATE 1B - ACCUMULATE DIRECTORY STRING.
  3463
  3464	774175     772003  772022	ST.1B:	XWD DIRSTR,D$DIR	;POINTER=DIRSTR, DATA=D$DIR
  3465	774176     135 200 015 000 		BYTE (9)"]",ST.2,15,0,0
  3466	774177     000 000 000000 
  3467
  3468
  3469					;STATE 2 - ACCUMULATE FILE NAME STRING
  3470
  3471	774200     772002  772012	ST.2:	XWD FILSTR,D$FIL	;POINTER=FILSTR,DATA=D$FIL
  3472	774201     056 204 056 207 		BYTE (9)".",ST.3,".",ST.4,"/",ST.5,15,0,0
  3473	774202     057 212 015 000 
  3474	774203     000 000 000000 
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 84
BOOT	MAC	16-Feb-88 20:26		Command String Parser -- State Transition Tables

  3475
  3476					;STATE 3 - ACCUMULATE EXTENSION STRING
  3477
  3478	774204     772004  772042	ST.3:	XWD EXTSTR,D$EXT	;POINTER=EXTSTR,DATA=D$EXT
  3479	774205     456 207 457 212 		BYTE (9)"."+400,ST.4,"/"+400,ST.5,15+400,0,0
  3480	774206     415 000 000 000 
  3481
  3482					;STATE 4 - ACCUMULATE VERSION STRING
  3483
  3484	774207     772005  772052	ST.4:	XWD VERSTR,D$VER
  3485	774210     057 212 015 000 		BYTE (9)"/",ST.5,15,0,0
  3486	774211     000 000 000000 
  3487
  3488					;STATE 5 - ACCUMULATE SWITCH STRING
  3489
  3490	774212     772006  772054	ST.5:	XWD SWSTR,D$SW
  3491	774213     015 000 050 215 		BYTE (9)15,0,"(",ST.6,0
  3492	774214     000 000 000000 
  3493
  3494					;STATE 6 - ACCUMULATE LOWER PAGE BOUND STRING
  3495
  3496	774215     772010  772111	ST.6:	XWD LBSTR,D$LB
  3497	774216     051 000 054 220 		BYTE (9)")",0,",",ST.7,15,0,0
  3498	774217     015 000 000 000 
  3499
  3500					;STATE 7 ACCUMULATE UPPER BOUND STRING
  3501
  3502	774220     772007  772107	ST.7:	XWD UBSTR,D$UB
  3503	774221     051 000 015 000 		BYTE (9)")",0,15,0
  3504
  3505					IFN <<.-ST.0>-STTSIZ>,<PRINTX ? State table size does not agree with STTSIZ>
  3506					IFN <STPORG-<.&777000>>,<PRINTX ? State table must fit on single page>
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 85
BOOT	MAC	16-Feb-88 20:26		Command String Parser -- Number Input Routines

  3507						SUBTTL Command String Parser -- Number Input Routines
  3508
  3509					;NUMBER INPUT SUBROUTINES
  3510
  3511	774222     201 02 0 00 000012 	DECIN:	MOVEI T2,^D10		;SET RADIX DECIMAL
  3512	774223     254 00 0 00 774225 		JRST RADIN		;CONVERT
  3513	774224     201 02 0 00 000010 	OCTIN:	MOVEI T2,^D8		;OCTAL RADIX
  3514	774225     401 12 0 00 000000 	RADIN:	SETZI P3,		;ZERO RESULT
  3515	774226     134 01 0 00 000006 	RAD.NX:	ILDB T1,Q2		;GET NEXT CHARACTER
  3516	774227     322 01 0 00 773531 		JUMPE T1,CPOPJ		;END OF STRING - RETURN OK
  3517	774230     307 01 0 02 000057 		CAIG T1,57(T2)		;CHECK TO BE SURE
  3518	774231     305 01 0 00 000060 		CAIGE T1,"0"		;THAT IT IS LEGAL
  3519	774232     254 00 0 00 776465 		  $ERROR (COMINV)	;INVALID NUMERIC VALUE
  3520	774233     220 12 0 00 000002 		IMUL P3,T2		;IS OK - CONVERT
  3521	774234     271 12 0 01 777720 		ADDI P3,-60(T1)		;ADD TO RESULT
  3522	774235     254 00 0 00 774226 		JRST RAD.NX
  3523
  3524					;STARTING ADDRESS SETUP/TEST SUBROUTINES
  3525
  3526	774236   			SETSA:
  3527	774236     552 12 0 00 772001 		HRRZM P3,START		;NO, STORE START ADDR FROM EXE FILE
  3528	774237     336 00 0 00 772001 		SKIPN START		;NON ZERO?
  3529	774240     621 00 0 00 040000 		TLZ F,(F.STRT)		;NO - CLEAR F.STRT
  3530	774241     263 17 0 00 000000 		RET
  3531
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 86
BOOT	MAC	16-Feb-88 20:26		Display Subroutines -- Output Boot Information

  3532						SUBTTL Display Subroutines -- Output Boot Information
  3533
  3534						;INFO SUBROUTINE
  3535
  3536					;DISPLAY PROGRAM VERSION
  3537
  3538	774242   			INFO:	MOVEI Q2,[ASCIZ/
  3539	774242     201 06 0 00 776467 	      BOOT version:       /]    ;[7.1228] Output text
  3540	774243     260 17 0 00 774305 		CALL OUTSTR		;...
  3541	774244     260 17 0 00 774270 		CALL TYPBVR		;OUTPUT BOOT VERSION
  3542					IFN KLFLG,
  3543					<
  3544
  3545					;DISPLAY MICROCODE VERSION
  3546
  3547	774245     201 06 0 00 776475 		MOVEI Q2,[ASCIZ/      Microcode version:  /]	;[7.1228] Output text
  3548	774246     260 17 0 00 774305 		CALL OUTSTR		;...
  3549
  3550	774247     201 06 0 00 776503 		MOVEI Q2,[ASCIZ/DX20A: /] ;OUTPUT STRING
  3551	774250     260 17 0 00 774305 		CALL OUTSTR		;...
  3552	774251     200 01 0 00 772241 		MOVE T1,DXAMCV		;GET DXA MCODE VERSION
  3553	774252     260 17 0 00 774255 		CALL TMCVER		;GO DISPLAY VERSION INFO
  3554					IFN FT.RP2,
  3555					 <	MOVEI Q2,[ASCIZ/    DX20B: /] ;OUTPUT STRING
  3556						CALL OUTSTR		;...
  3557						MOVE T1,DXBMCV		;GET DXB MCODE VERSION
  3558						CALL TMCVER		;GO DISPLAY VERSION INFO
  3559					 >
  3560					IFN FTKLIPA,<
  3561						MOVEI Q2,[ASCIZ/KLIPA: /] ;OUTPUT STRING
  3562						CALL OUTSTR
  3563						MOVE T1,KLPVER		;GET KLIPA MCODE VERSION
  3564						MOVEI Q2,[ASCIZ/KLNI: /] ;OUTPUT STRING
  3565						CALL OUTSTR
  3566						MOVE T1,KLPVER		;GET KLNI MCODE VERSION
  3567					>
  3568					>				;END IFN KLFLG
  3569	774253     260 17 0 00 773562 		CALL CRLF		;OUTPUT CRLF
  3570	774254     263 17 0 00 000000 		RET
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 87
BOOT	MAC	16-Feb-88 20:26		Display Subroutines -- Microcode Version

  3571						SUBTTL Display Subroutines -- Microcode Version
  3572
  3573					;SUBROUTINE TO DISPLAY MICROCODE VERSION
  3574					;CALL WITH MICROCODE VERSION WORD IN T1
  3575
  3576					DEFSTR(ED.NUM,T1,^D35,^D10)	;FIELD FOR EDIT NUMBER IN T1
  3577					DEFSTR(VR.NUM,T1,^D25,^D6)	;FIELD FOR VERSION NUMBER IN T1
  3578
  3579	774255     261 17 0 00 000001 	TMCVER:	PUSH P,T1		;SAVE VERSION NUMBER
  3580	774256     135 06 0 00 776505 		LOAD Q2,VR.NUM		;GET THE VERSION NUMBER
  3581	774257     260 17 0 00 774314 		CALL OUTOCT		;DISPLAY IT
  3582	774260     201 05 0 00 000050 		MOVEI Q1,"("		;DISPLAY LEFT PAREN
  3583	774261     260 17 0 00 773604 		CALL TYO		;...
  3584	774262     262 17 0 00 000001 		POP P,T1		;RESTORE VERSION NUMBER
  3585	774263     135 06 0 00 776506 		LOAD Q2,ED.NUM		;GET EDIT NUMBER
  3586	774264     260 17 0 00 774314 		CALL OUTOCT		;DISPLAY IT
  3587	774265     201 05 0 00 000051 		MOVEI Q1,")"		;DISPLAY RIGHT PAREN
  3588	774266     260 17 0 00 773604 		CALL TYO		;...
  3589	774267     263 17 0 00 000000 		RET
  3590
  3591						;SUBROUTINE TO OUTPUT BOOT VERSION
  3592	774270     201 06 0 00 000011 	TYPBVR:	MOVEI Q2,V%MAJOR	;OUTPUT MAJOR VERSION
  3593	774271     260 17 0 00 774314 		CALL OUTOCT		;...
  3594	774272     201 05 0 00 000056 		MOVEI Q1,"."		;OUTPUT A PERIOD
  3595	774273     260 17 0 00 773604 		CALL TYO		;...
  3596	774274     201 06 0 00 000000 		MOVEI	Q2,V%MINOR	;OUTPUT MINOR VERSION
  3597	774275     260 17 0 00 774314 		CALL OUTOCT		;...
  3598	774276     201 05 0 00 000050 		MOVEI Q1,"("		;OUTPUT A LEFT PAREN
  3599	774277     260 17 0 00 773604 		CALL TYO		;...
  3600	774300     201 06 0 00 000315 		MOVEI Q2,V%EDIT		;OUTPUT EDIT NUMBER
  3601	774301     260 17 0 00 774314 		CALL OUTOCT		;...
  3602						MOVEI Q2,[ASCIZ/)
  3603	774302     201 06 0 00 776507 	/]				;OUTPUT RIGHT PAREN + CRLF
  3604	774303     260 17 0 00 774305 		CALL OUTSTR		;...
  3605	774304     263 17 0 00 000000 		RET
  3606
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 88
BOOT	MAC	16-Feb-88 20:26		Display Subroutines -- String and Number

  3607						SUBTTL Display Subroutines -- String and Number
  3608
  3609					;SUBROUTINE TO OUTPUT ASCIZ STRING
  3610					;CALL WITH STRING ADDR IN Q2
  3611
  3612	774305     505 06 0 00 440700 	OUTSTR:	HRLI Q2,(POINT 7,)	;MAKE ADDRESS INTO BYTE POINTER
  3613	774306     134 05 0 00 000006 	OUTST1:	ILDB Q1,Q2		;PICK UP A CHARACTER
  3614	774307     322 05 0 00 773531 		JUMPE Q1,R		;IF DONE, RETURN
  3615	774310     260 17 0 00 773604 		CALL TYO		;OTHERWISE, TYPE IT
  3616	774311     254 00 0 00 774306 		JRST OUTST1		;AND LOOP FOR MORE
  3617
  3618
  3619					;SUBROUTINE TO OUTPUT OCTAL VALUES
  3620					;CALL WITH BINARY IN Q2
  3621					;ENTRY VECTORS:
  3622					;	OUTOCN:		;ALLOW LEADING ZEROES
  3623					;	OUTOCT:		;SUPRESS LEADING ZEROES
  3624
  3625	774312     476 00 0 00 000007 	OUTOCN:	SETOM Q3		;ALLOW LEADING ZEROES
  3626	774313     334 00 0 00 000000 		SKIPA
  3627	774314     402 00 0 00 000007 	OUTOCT: SETZM Q3		;SUPRESS LEADING ZEROES
  3628	774315     261 17 0 00 000007 		PUSH P,Q3		;CREATE A TEMPORARY FLAG
  3629	774316     200 07 0 00 776510 		MOVE Q3,[POINT 3,Q2-1,35] ;USE TO FETCH 3-BIT OCTAL VALUE
  3630	774317     326 06 0 00 774324 		JUMPN Q2,GETDG1		;BYPASS LOOP-EXIT CODE FIRST TIME THROUGH
  3631	774320     134 05 0 00 000007 		ILDB Q1,Q3		;HERE IF HE GAVE US A ZERO
  3632	774321     254 00 0 00 774330 		JRST OUTASC		;TYPE A "0"
  3633									; INSURES WE GET A ZERO EVEN IF SUPPRESSING
  3634
  3635
  3636	774322     607 07 0 00 770000 	GETDIG:	TLNN Q3,770000		;TIME TO LEAVE?
  3637	774323     254 00 0 00 774333 		JRST OCTRET		;YES
  3638	774324     134 05 0 00 000007 	GETDG1:	ILDB Q1,Q3		;GET A PACKED OCTAL VALUE
  3639	774325     336 00 0 17 000000 		SKIPN (P)		;NON-ZERO DIGIT SEEN YET?
  3640	774326     322 05 0 00 774322 		JUMPE Q1,GETDIG		;NO, IF THIS DIGIT IS ZERO, TRY AGAIN
  3641	774327     476 00 0 17 000000 		SETOM (P)		;INDICATE WE HAVE SEEN A NON-ZERO DIGIT
  3642	774330     271 05 0 00 000060 	OUTASC:	ADDI Q1,60		;CONVERT TO ASCII
  3643	774331     260 17 0 00 773604 		CALL TYO		;OUTPUT IT
  3644	774332     254 00 0 00 774322 		JRST GETDIG		;GET ANOTHER DIGIT
  3645
  3646	774333     105 17 0 00 777777 	OCTRET:	ADJSP P,-1		;RELEASE TEMPORARY STORAGE FOR FLAG
  3647	774334     263 17 0 00 000000 		POPJ P,			;RETURN
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 89
BOOT	MAC	16-Feb-88 20:26		Display Subroutines -- Channel/Device Status

  3648						SUBTTL Display Subroutines -- Channel/Device Status
  3649
  3650	774335     261 17 0 00 000000 	OUTSTS:	PUSH P,F		;SAV AC'S
  3651	774336     201 06 0 00 776511 		MOVEI Q2,[ASCIZ/	Channel-status (CONI RH,):  /]
  3652	774337     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT THE STRING
  3653	774340     260 17 0 00 773132 		CALL XIO1		;SET UP FOR CHANNEL STATUS
  3654	774341     7 000 24 0 00 000006 	CONI .-.,Q2		;GET THE STATUS
  3655	774342     260 17 0 00 774312 		CALL OUTOCN		;OUTPUT THE CHANNEL STATUS
  3656	774343     201 06 0 00 776517 		MOVEI Q2,[ASCIZ/   Device-status:  /]
  3657	774344     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT THE STRING
  3658	774345     205 01 0 00 010000 		MOVX T1,R4%DSR		;SET UP FOR DEVICE STATUS
  3659	774346     260 17 0 00 773115 		CALL RHRD1		;READ THE DEVICE REGISTER
  3660	774347     200 06 0 00 000001 		MOVE Q2,T1		;GET THE STATUS
  3661	774350     630 06 0 00 776523 		TDZ Q2,[-1,,600000]	;MASK OUT THE JUNK
  3662	774351     260 17 0 00 774312 		CALL OUTOCN		;OUTPUT THE STATUS
  3663	774352     260 17 0 00 773562 		CALL CRLF		;OUTPUT A CRLF
  3664	774353     201 06 0 00 776524 		MOVEI Q2,[ASCIZ/	Device error-registers  (1)  /]
  3665	774354     260 17 0 00 774305 		CALL OUTSTR
  3666	774355     205 01 0 00 020000 		MOVX T1,R4%ER1		;SET UP FOR ERROR REG 1
  3667	774356     260 17 0 00 773115 		CALL RHRD1		;READ IT
  3668	774357     200 06 0 00 000001 		MOVE Q2,T1		;GET THE STATUS
  3669	774360     630 06 0 00 776523 		TDZ Q2,[-1,,600000]	;MASK OUT THE JUNK
  3670	774361     260 17 0 00 774312 		CALL OUTOCN		;OUTPUT IT
  3671					   IFE FT.MTA,<
  3672	774362     201 06 0 00 776533 		MOVEI Q2,[ASCIZ/  (3)  /]
  3673	774363     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT THE STRING
  3674	774364     205 01 0 00 150000 		MOVX T1,R4%ER3		;SET UP FOR ERROR REG 3
  3675	774365     260 17 0 00 773115 		CALL RHRD1		;READ IT
  3676	774366     200 06 0 00 000001 		MOVE Q2,T1		;GET THE STATUS
  3677	774367     630 06 0 00 776523 		TDZ Q2,[-1,,600000]	;MASK OUT THE JUNK
  3678	774370     260 17 0 00 774312 		CALL OUTOCN		;OUTPUT IT
  3679					>				;END FT.MTA CONDITIONAL
  3680	774371     260 17 0 00 773562 		CALL CRLF		;OUTPUT A CRLF
  3681	774372     262 17 0 00 000000 		POP P,F			;RESTORE AC'S
  3682	774373     263 17 0 00 000000 		RET			;RETURN
  3683
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 90
BOOT	MAC	16-Feb-88 20:26		Display Subroutines -- Structure/File Name

  3684						SUBTTL Display Subroutines -- Structure/File Name
  3685
  3686						;SUBROUTINE TO TYPE OUT STRUCTURE NAME
  3687						;CALL WITH STRUCTURE NAME IN Q2
  3688	774374     200 01 0 00 776535 	TYPSTR:	MOVE T1,[-6,,0]
  3689	774375     402 00 0 00 000005 		SETZM Q1		;INIT SHIFT AC
  3690	774376     246 05 0 00 000006 	TYPST1:	LSHC Q1,6		;SHIFT A SIXBIT CHAR TO Q1
  3691	774377     271 05 0 00 000040 		ADDI Q1,40		;CONVERT TO ASCII
  3692	774400     260 17 0 00 773604 		CALL TYO 		;TYPE IT
  3693	774401     332 00 0 00 000006 		SKIPE Q2		;EXIT IF Q2 ZERO
  3694	774402     253 01 0 00 774376 		AOBJN T1,TYPST1		;BACK FOR MORE
  3695	774403     201 05 0 00 000072 		MOVEI Q1,":"		;ADD A COLON
  3696	774404     260 17 0 00 773604 		CALL TYO
  3697	774405     263 17 0 00 000000 		RET
  3698
  3699						;SUBROUTINE TO TYPE OUT FILENAME
  3700	774406     201 05 0 00 000074 	TYPFIL:	MOVEI Q1,"<"		;OUTPUT LEFT ANGLE
  3701	774407     260 17 0 00 773604 		CALL TYO
  3702	774410     200 06 0 00 772003 		MOVE Q2,DIRSTR		; POINTER TO DIRECTORY STRING
  3703	774411     260 17 0 00 774305 		CALL OUTSTR
  3704	774412     201 05 0 00 000076 		MOVEI Q1,">"		;OUTPUT RIGHT ANGLE
  3705	774413     260 17 0 00 773604 		CALL TYO
  3706	774414     200 06 0 00 772002 		MOVE Q2,FILSTR		;TYPE FILE NAME
  3707	774415     260 17 0 00 774305 		CALL OUTSTR
  3708	774416     201 05 0 00 000056 		MOVEI Q1,"."		;OUTPUT PERIOD
  3709	774417     260 17 0 00 773604 		CALL TYO
  3710	774420     200 06 0 00 772004 		MOVE Q2,EXTSTR		;TYPE FILE EXTENSION
  3711	774421     260 17 0 00 774305 		CALL OUTSTR
  3712	774422     263 17 0 00 000000 		RET
  3713
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 91
BOOT	MAC	16-Feb-88 20:26		Search Disks -- Map Directory/Index Page

  3714						SUBTTL Search Disks -- Map Directory/Index Page
  3715
  3716					IFE FT.MTA,<
  3717	774423     201 13 0 00 763000 	MAPDIR:	MOVEI P4,A%DIR		;GET ADDRESS FOR DIRECTORY HEADER
  3718	774424     200 14 0 00 770000 		MOVE P5,A%XB		;GET DISK ADDRESS FOR FIRST PAGE OF DIR
  3719	774425     254 00 0 00 774537 		JRST RDPGRT		;READ HEADER PAGE OF DIRECTORY
  3720
  3721					;MAP THE DIRECTORY INTO VIRTUAL ADDR DIR AND ABOVE
  3722
  3723	774426     200 14 0 00 772144 	FNDIDX:	MOVE P5,DIORG		;GET ADDRESS
  3724	774427     201 13 0 00 770000 		MOVEI P4,A%XB		;INDEX BLOCK BUFFER
  3725	774430     260 17 0 00 774643 		CALL REDPAG		;READ ROOT-DIR XB
  3726	774431     254 00 0 00 776536 		 $ERROR (IOER10)	;ERROR READING PAGE
  3727	774432     260 17 0 00 774423 		CALL MAPDIR		;MAP IN ROOT DIR HEADER PAGE
  3728	774433     200 01 0 00 772003 		MOVE T1,DIRSTR		;Get byte pointer to directory string
  3729	774434     202 01 0 00 772360 		MOVEM T1,DIRST		;Keep a working copy here
  3730	774435     200 05 0 00 772011 	FND1:	MOVE Q1,DIRTMP		;Use this BP for depositing
  3731	774436     402 00 1 00 772011 		SETZM @DIRTMP		;Insure trailing nulls for fullword compare
  3732									;on first 5 bytes of name
  3733	774437     134 01 0 00 772360 	FND2:	ILDB T1,DIRST		;Get next character from dir string
  3734	774440     306 01 0 00 000056 		CAIN T1,"."		;End of (sub)directory name?
  3735	774441     402 00 0 00 000001 		SETZM T1		;Yes
  3736	774442     136 01 0 00 000005 		IDPB T1,Q1		;Store character
  3737	774443     326 01 0 00 774437 		JUMPN T1,FND2		;End of processing this directory level?
  3738	774444     200 01 0 00 772011 		MOVE T1,DIRTMP		;Yes, get pointer to (sub)directory string
  3739	774445     200 02 0 00 776542 		MOVE T2,[POINT 7,[ASCIZ/DIRECTORY/]]
  3740	774446     201 03 0 00 000000 		MOVEI T3,0		;GET HIGHEST VERSION #
  3741	774447     260 17 0 00 774456 		CALL GETIDX		;GET INDEX BLOCK OF DIR FILE
  3742	774450     260 17 0 00 774423 		CALL MAPDIR		;MAP IN THE DIRECTORY
  3743	774451     135 01 0 00 772360 		LDB T1,DIRST		;Look at last char read
  3744	774452     326 01 0 00 774435 		JUMPN T1,FND1		;Get next level directory
  3745	774453     200 01 0 00 772002 		MOVE T1,FILSTR		;GET POINTER TO NAME STRING
  3746	774454     200 02 0 00 772004 		MOVE T2,EXTSTR		;AND POINTER TO EXTENSION STRING
  3747	774455     200 03 0 00 772113 		MOVE T3,VERNUM		;GET DESIRED VERSION #
  3748									;FALL INTO GETIDX
  3749						;..
  3750
  3751
  3752					>				;END IFE FT.MTA
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 92
BOOT	MAC	16-Feb-88 20:26		Search Disks -- Map Directory/Index Page

  3753
  3754					IFE FT.MTA,<
  3755					;HERE TO GET THE INDEX BLOCK FOR THE FILE
  3756
  3757	774456     202 01 0 00 772116 	GETIDX:	MOVEM T1,FNDSTR		;SAVE NAME STRING
  3758	774457     124 02 0 00 772117 		DMOVEM T2,FNDSTE	;SAVE EXTENSION STRING POINTER
  3759									; AND SAVE VERSION NUMBER
  3760	774460     260 17 0 00 774556 		CALL FIND		;RETURN FDB OFFSET IN P1
  3761	774461     200 06 0 00 772117 	GX.NE:	MOVE Q2,FNDSTE		;COMPARE WITH NEXT EXTENSION
  3762	774462     260 17 0 00 774542 		CALL GETPAG		;MAP IN PAGE CONTAINING FDB
  3763									; RETURN WITH MAPPED ADDR IN T1
  3764	774463     200 07 0 01 000027 		LOAD Q3,FBEXT,(T1)	;GET ADR OF EXT STRING BLOCK
  3765	774464     505 07 0 00 440700 		HRLI Q3,(POINT 7,0)	;SET IT UP AS A STRING POINTER
  3766	774465     271 07 0 00 000001 		ADDI Q3,1		;POINT TO STRING
  3767	774466     260 17 0 00 774610 		CALL STRCMP		;COMPARE STRINGS
  3768	774467     304 00 0 00 000000 		CAIA
  3769	774470     254 00 0 00 774475 		JRST GX.NV		;FOUND EXTENSION MATCH - LOOK AT VERSION
  3770	774471     260 17 0 00 774542 		CALL GETPAG		;MAP IN PAGE CONTAINING FDB
  3771	774472     135 10 0 00 776543 		LOAD P1,FBEXL,(T1)	;STEP TO NEXT FDB IN THIS CHAIN
  3772	774473     326 10 0 00 774461 		JUMPN P1,GX.NE		;BACK IF STILL MORE
  3773	774474     254 00 0 00 776544 		 $ERROR (FILFNF)	;FILE NOT FOUND
  3774
  3775	774475     260 17 0 00 774542 	GX.NV:	CALL GETPAG		;MAP IN PAGE CONTAINING FDB
  3776	774476     554 01 0 01 000007 		LOAD T1,FBGEN,(T1)	;GET GENERATION NUMBER
  3777	774477     332 00 0 00 772120 		SKIPE FNDSTV		;IS MOST RECENT VER WANTED?
  3778	774500     316 01 0 00 772120 		CAMN T1,FNDSTV		;IS IT WHAT WE WANT?
  3779	774501     254 00 0 00 774507 		JRST GX.DON		;YES - EXIT
  3780	774502     260 17 0 00 774542 	GX.NV1:	CALL GETPAG		;MAP IN PAGE CONTAINING THE FDB
  3781	774503     135 10 0 00 776546 		LOAD P1,FBGNL,(T1)	;STEP TO FDB OF NEXT GENERATION
  3782	774504     336 00 0 00 000010 		SKIPN P1
  3783	774505     254 00 0 00 776544 		  $ERROR (FILFNF)	;File not found
  3784	774506     254 00 0 00 774475 		JRST GX.NV		;TRY AGAIN
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 93
BOOT	MAC	16-Feb-88 20:26		Search Disks -- Map Directory/Index Page

  3785
  3786	774507     260 17 0 00 774542 	GX.DON:	CALL GETPAG		;MAP IN PAGE CONTAINING FDB
  3787	774510     200 02 0 01 000001 		LOAD T2,FBCTL,(T1)	;GET CONTROL BITS
  3788	774511     603 02 0 00 060000 		TXNE T2,FB%DEL!FB%NXF	;DOES IT EXIST?
  3789	774512     254 00 0 00 774502 		JRST GX.NV1		;NO. GO GET ANOTHER THEN
  3790	774513     200 04 1 00 772116 		MOVE T4,@FNDSTR		;GET 1'ST 5 CHARS OF FILE NAME
  3791	774514     312 04 0 00 776456 		CAME T4,[BYTE (7) "D","U","M","P"] ;IS IT THE DUMP FILE?
  3792	774515     254 00 0 00 774523 		JRST NOTDMP		;NO
  3793	774516     200 04 1 00 772117 		MOVE T4,@FNDSTE		;GET EXTENSION
  3794	774517     312 04 0 00 776463 		CAME T4,[BYTE (7) "E", "X", "E"] ;CORRECT EXTENSION?
  3795	774520     254 00 0 00 774523 		JRST NOTDMP		;NO
  3796	774521     200 04 0 01 000011 		LOAD T4,FBBYV,(T1)	;YES, GET PAGE COUNT
  3797	774522     552 04 0 00 772357 		HRRZM T4,DEXEPC		;REMEMBER IT
  3798	774523     476 00 0 00 772145 	NOTDMP:	SETOM XBNUM		;INITIALIZE XB NUMBER TO SHORT FILE
  3799	774524     200 14 0 01 000003 		LOAD P5,FBADR,(T1)	;GET ADR OF INDEX BLOCK
  3800	774525     607 02 0 00 010000 		TXNN T2,FB%LNG		;LONG FILE?
  3801	774526     254 00 0 00 774536 		JRST GX.DN1		;NO, JUST READ IN INDEX BLOCK 0
  3802	774527     201 13 0 00 767000 		MOVEI P4,A%SXB		;LONG FILE, READ IN THE SUPER INDEX BLOCK
  3803	774530     260 17 0 00 774643 		CALL REDPAG		;  INTO A%SXB
  3804	774531     254 00 0 00 776547 		 $ERROR (IOER2)		;ERROR READING PAGE
  3805	774532     135 14 0 00 776551 		LOAD P5,IDXADR,A%SXB+0	;GET ADR OF FIRST INDEX BLOCK
  3806	774533     336 00 0 00 000014 		SKIPN P5		;IF NO PAGE 0, FORMAT ERROR
  3807	774534     254 00 0 00 776552 		 $ERROR (FILNEF)
  3808	774535     402 00 0 00 772145 		SETZM XBNUM		;MARK THAT INDEX BLOCK 0 IS MAPPED
  3809	774536     201 13 0 00 770000 	GX.DN1:	MOVEI P4,A%XB		;READ INTO XB AREA
  3810	774537     260 17 0 00 774643 	RDPGRT:	CALL REDPAG		;READ THE PAGE
  3811	774540     254 00 0 00 776554 		 $ERROR (IOER3)		;ERROR READING PAGE
  3812	774541     263 17 0 00 000000 		RET
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 94
BOOT	MAC	16-Feb-88 20:26		Search Disks -- Map Directory/Index Page

  3813
  3814					; ROUTINE TO MAP A PAGE OF THE DIRECTORY
  3815
  3816					; ACCEPTS IN P1/ ADDRESS TO MAP
  3817					;			CALL GETPAG
  3818					; RETURNS +1 WITH T1/ MAPPED ADDRESS
  3819
  3820	774542     550 01 0 00 000010 	GETPAG:	HRRZ T1,P1		;GET ADDRESS DESIRED FROM FILE
  3821	774543     242 01 0 00 777767 		LSH T1,-^D9		;CONVERT ADDRESS TO PAGE NUMBER
  3822	774544     200 14 0 01 770000 		MOVE P5,A%XB(T1)	;GET DISK ADDRESS OF FILE PAGE
  3823	774545     201 13 0 00 764000 		MOVEI P4,A%DPG		;GET ADDRESS OF DIRECTORY DATA PAGE
  3824	774546     316 14 0 00 772143 		CAMN P5,CURPAG		;DESIRED PAGE ALREADY IN CORE ?
  3825	774547     254 00 0 00 774552 		JRST GETPG1		;YES, DO NOT NEED TO READ AGAIN
  3826	774550     260 17 0 00 774643 		CALL REDPAG		;NO, READ THE PAGE
  3827	774551     254 00 0 00 776556 		 $ERROR (IOER4)		;CAN'T READ DIRECTORY PAGE
  3828	774552     135 01 0 00 776560 	GETPG1:	LDB T1,[POINT 9,P1,35]	;GET LOW ORDER BITS OF ORIGINAL ADDRESS
  3829	774553     435 01 0 00 764000 		IORI T1,A%DPG		;ADD ADDRESS OF DIRECTORY DATA PAGE
  3830	774554     202 14 0 00 772143 		MOVEM P5,CURPAG		;UPDATE CURRENTLY IN-CORE PAGE
  3831	774555     263 17 0 00 000000 		RET			;RETURN
  3832					>				;END IFE FT.MTA
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 95
BOOT	MAC	16-Feb-88 20:26		Search Disks -- Find Filename

  3833						SUBTTL Search Disks -- Find Filename
  3834
  3835					IFE FT.MTA,<
  3836					;SUBROUTINE TO DO A PRIMARY NAME SEARCH IN A DIRECTORY
  3837					; CALL WITH BYTE POINTER TO FILENAME IN FNDSTR
  3838					; RETURN WITH OFFSET TO FDB FOR THAT FILE IN P1
  3839
  3840	774556     200 01 0 00 763003 	FIND:	MOVE T1,SYMBOT		;START OF ST AREA
  3841	774557     274 01 0 00 763004 		SUB T1,SYMTOP		;GET -LENGTH
  3842	774560     200 10 0 00 763003 		MOVE P1,SYMBOT		;BUILD A
  3843	774561     271 10 0 00 000002 		ADDI P1,2		;RELOCATE
  3844	774562     505 10 0 01 000002 		HRLI P1,2(T1)		;AOBJN POINTER
  3845
  3846	774563     200 06 0 00 772116 	FND.NF:	MOVE Q2,FNDSTR		;FILE NAME
  3847	774564     260 17 0 00 774542 		CALL GETPAG		;MAP IN PAGE CONTAINING S.T. ENTRY
  3848	774565     135 07 0 00 776561 		LOAD Q3,SYMET,(T1)	;GET SYMBOL TYPE
  3849	774566     332 00 0 00 000007 		SKIPE Q3
  3850	774567     254 00 0 00 776544 		 $ERROR(FILFNF)		;FILE NOT FOUND
  3851	774570     200 07 0 01 000001 		LOAD Q3,SYMVL,(T1)	;GET FIRST FIVE CHARS OF NAME
  3852	774571     312 07 1 00 772116 		CAME Q3,@FNDSTR		;IS THIS A MATCH AGAINST STRING?
  3853	774572     254 00 0 00 774604 		JRST FND.NM		;NO, NO NEED TO COMPARE NAME STRING
  3854	774573     135 07 0 00 776562 		LOAD Q3,SYMAD,(T1)	;GET FDB ADDRESS
  3855	774574     261 17 0 00 000010 		PUSH P,P1		;SAVE POINTER INTO SYMBOL TABLE
  3856	774575     200 10 0 00 000007 		MOVE P1,Q3		;GET ADDRESS OF FDB
  3857	774576     260 17 0 00 774542 		CALL GETPAG		;MAP IN PAGE CONTAINING FDB
  3858	774577     262 17 0 00 000010 		POP P,P1		;RESTORE SYMBOL TABLE POINTER
  3859	774600     200 07 0 01 000026 		LOAD Q3,FBNAM,(T1)	;GET ADDRESS OF NAME STRING BLOCK
  3860	774601     505 07 0 00 440700 		HRLI Q3,(POINT 7,0)	;SET UP STRING POINTER
  3861	774602     271 07 0 00 000001 		ADDI Q3,1		;POINT TO STRING
  3862	774603     260 17 0 00 774610 		CALL STRCMP		;COMPARE STRINGS
  3863					FND.NM:	 JRST [	ADD P1,[1,,1]	;NO MATCH, STEP OVER SYMBOL VALUE
  3864							AOBJN P1,FND.NF
  3865	774604     254 00 0 00 776564 			$ERROR (FILFNF)]	;NO MORE NAMES, ERROR
  3866	774605     260 17 0 00 774542 		CALL GETPAG		;MAP IN PAGE CONTAINING S.T. ENTRY
  3867	774606     550 10 0 01 000000 		HRRZ P1,(T1)		;GET FIRST FILE FDB
  3868	774607     263 17 0 00 000000 		RET
  3869
  3870					;STRING COMPARE SUBROUTINE
  3871
  3872	774610     261 17 0 00 000010 	STRCMP:	PUSH P,P1		;SAVE P1
  3873	774611     200 10 0 00 000007 		MOVE P1,Q3		;COPY ADDRESS OF STRING IN FILE
  3874	774612     260 17 0 00 774542 		CALL GETPAG		;MAP PAGE CONTAINING STRING BLOCK
  3875	774613     262 17 0 00 000010 		POP P,P1		;RESTORE P1
  3876	774614     540 07 0 00 000001 		HRR Q3,T1		;INSERT MAPPED ADDRESS TO STRING
  3877	774615     134 01 0 00 000006 	STRCM1:	ILDB T1,Q2		;GET 1ST BYTE
  3878	774616     134 02 0 00 000007 		ILDB T2,Q3		;GET 2ND BYTE
  3879	774617     312 01 0 00 000002 		CAME T1,T2		;EQUAL?
  3880	774620     263 17 0 00 000000 		RET			;NO - LOSE
  3881	774621     326 01 0 00 774615 		JUMPN T1,STRCM1		;YES -END OF STRING?
  3882					>				;END IFE FT.MTA
  3883	774622     254 00 0 00 773530 		RETSKP			;SKIP RETURN
  3884
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 96
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Write Pages

  3885						SUBTTL Disk I/O Routines -- Write Pages
  3886
  3887					;IO ROUTINES
  3888					IFN KLFLG, <
  3889					IFE FT.MTA, <
  3890					;WRTPAG - Routine to write a set of contiguous pages
  3891					;Called with T2/ Count of pages to write
  3892					;	     P4/ Address of first page in memory to write
  3893					;	     P5/ Disk address to write to
  3894					;Returns +1 Always
  3895
  3896	774623     200 01 0 00 000014 	WRTPAG:	MOVE T1,P5		;Get disk address in T1
  3897	774624     261 17 0 00 000002 		PUSH P,T2		;Save it over call
  3898	774625     260 17 0 00 775005 		CALL CHNSET		;Go get channel info
  3899	774626     260 17 0 00 774724 		CALL IOWAIT		;T1 has channel # - go wait for it
  3900	774627     260 17 0 00 776155 		 CALL DMPERR		;Report error on previous write
  3901	774630     200 02 0 17 000000 		MOVE T2,(P)		;Get back count of pages
  3902	774631     661 00 0 00 000010 		TXO F,F.WRT		;Say we want to write
  3903	774632     260 17 0 00 774660 		CALL RWCMN		;Call the common I/O code
  3904	774633     262 17 0 00 000002 		POP P,T2		;Get page count
  3905	774634     260 17 0 00 774663 		CALL SETRTY		;Go setup CHNTAB for retry
  3906	774635     263 17 0 00 000000 		RET
  3907
  3908					;Routine to write a page and wait for it to complete
  3909					;Accepts same arguments as above
  3910	774636     260 17 0 00 774623 	WRTWAT:	CALL WRTPAG		;Call routine to do work
  3911	774637     200 01 0 00 772150 		MOVE T1,CURCHN		;Get channel number of xfer
  3912	774640     260 17 0 00 774724 		CALL IOWAIT		;Wait for it to finish
  3913	774641     263 17 0 00 000000 		 RET			;Error...
  3914	774642     254 00 0 00 773530 		RETSKP			;No problem
  3915
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 97
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Read Page

  3916						SUBTTL Disk I/O Routines -- Read Page
  3917
  3918					;REDPAG - Routine to read a page from the disk
  3919					;Accepts P4/ Address in memory to write to
  3920					;	 P5/ Disk address to read
  3921					;Returns +1 - Failure
  3922					;	 +2 - Success
  3923	774643     200 01 0 00 000014 	REDPAG:	MOVE T1,P5		;Setup disk address
  3924	774644     260 17 0 00 775005 		CALL CHNSET		;Setup channel info
  3925	774645     260 17 0 00 774724 		CALL IOWAIT		;Make sure channel is idle
  3926	774646     260 17 0 00 776155 		 CALL DMPERR		;Calling DMPERR assumes that we are about
  3927									; to read a new XB while dumping, and the
  3928									; previous xfer (a write) was unsuccessful
  3929									;Note that if the previous xfer was a read
  3930									; it would have been noted before the REDPAG
  3931									; routine returned control
  3932	774647     201 02 0 00 000001 		MOVEI T2,1		;Number of pages to do
  3933	774650     621 00 0 00 000010 		TXZ F,F.WRT		;Say we want to read
  3934	774651     260 17 0 00 774660 		CALL RWCMN		;Do the work
  3935	774652     201 02 0 00 000001 		MOVEI T2,1		;Page count
  3936	774653     260 17 0 00 774663 		CALL SETRTY		;Go setup CHNTAB for retry
  3937	774654     200 01 0 00 772150 		MOVE T1,CURCHN		;Which channel??
  3938	774655     260 17 0 00 774724 		CALL IOWAIT		;Make sure it finishes
  3939	774656     263 17 0 00 000000 		 RET			;Error!!!
  3940	774657     254 00 0 00 773530 		RETSKP			;No problems
  3941
  3942	774660     260 17 1 00 772231 	RWCMN:	CALL @DEVDSP+D.SET	;Setup variables
  3943	774661     260 17 1 00 772230 		CALL @DEVDSP+D.DOIO	;Start IO 
  3944	774662     263 17 0 00 000000 		RET			;RETURN
  3945
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 98
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Setup for I/O Retry

  3946						SUBTTL Disk I/O Routines -- Setup for I/O Retry
  3947
  3948					;Routine to save information needed if a retry is necessary
  3949					;Accepts T2/ Page count
  3950					;	 P4/ Starting memory address of xfer
  3951					;	 P5/ Starting disk address
  3952					;Returns +1 Always
  3953	774663     200 01 0 00 772150 	SETRTY:	MOVE T1,CURCHN		;Get channel number
  3954	774664     221 01 0 00 000003 		IMULI T1,XCHAN		;Get offset into retry table
  3955	774665     202 13 0 01 772154 		MOVEM P4,CHNTAB+XADR(T1);Store memory address of latest xfer on channel
  3956	774666     202 14 0 01 772155 		MOVEM P5,CHNTAB+XDSK(T1);Store disk address
  3957	774667     402 00 0 00 000003 		SETZM T3		;Guess read
  3958	774670     603 00 0 00 000010 		TXNE F,F.WRT		;Was this a write?
  3959	774671     205 03 0 00 400000 		MOVX T3,1B0		;Yes, set the write bit
  3960	774672     202 03 0 01 772156 		MOVEM T3,CHNTAB+XCNT(T1);And store it
  3961	774673     542 02 0 01 772156 		HRRM T2,CHNTAB+XCNT(T1)	;With the page count
  3962	774674     263 17 0 00 000000 		RET			;Done
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 99
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Perform I/O 

  3963						SUBTTL Disk I/O Routines -- Perform I/O 
  3964
  3965					;Routine to start I/O on an RH20 after registers have been setup
  3966					;Called with T4/ STCR register
  3967	774675     260 17 0 00 773134 	DOIO:	IOOP(CLEAR)		;CLEAR CONTROLLER/UNIT
  3968	774676     7 000 20 0 00 002000 
  3969	774677     260 17 0 00 773134 
  3970	774700     7 000 20 0 00 005610 
  3971	774701     260 17 0 00 775254 		CALL CKPORT		;Do we still have port?
  3972	774702     263 17 0 00 000000 		RET			;No - return and let error recovery do it
  3973	774703     260 17 0 00 773134 		IOOP(XCTOP,T4)		;EXECUTE OPERATION
  3974	774704     7 000 14 0 00 000004 
  3975	774705     263 17 0 00 000000 		RET			;
  3976
  3977					;CHKIO - Routine to insure that all I/O has completed
  3978					;If it discovers that some channel had errors, it calls DMPERR to report them
  3979					;Returns: +1 - Always, I/O has completed
  3980	774706     402 00 0 00 000001 	CHKIO:	SETZM T1		;Start with channel 0
  3981	774707     261 17 0 00 000001 	CHKLP:	PUSH P,T1		;Save current channel number
  3982	774710     542 01 0 00 772150 		HRRM T1,CURCHN		;Setup the channel number
  3983	774711     540 00 0 00 772150 		HRR F,CURCHN		;Also in F for I/O instructions
  3984	774712     271 00 0 00 000130 		ADDI F,RH0_-2		;And the device code
  3985	774713     260 17 0 00 774724 		CALL IOWAIT		;See if this channel is done
  3986	774714     260 17 0 00 776155 		 CALL DMPERR		;Report error on this channel
  3987	774715     262 17 0 00 000001 		POP P,T1		;Restore channel number
  3988	774716     305 01 0 00 000007 		CAIGE T1,MAXCHN		;Have we done them all?
  3989	774717     344 01 0 00 774707 		AOJA T1,CHKLP		;No - go do next channel
  3990	774720     550 01 0 00 772223 		HRRZ T1,IOIP		;Check if all channels are done
  3991	774721     326 01 0 00 774706 		JUMPN T1,CHKIO		;No - try again
  3992	774722     260 17 0 00 775151 		CALL CHNRST		;And reset the RH's
  3993	774723     263 17 0 00 000000 		RET			;Yes - return
  3994
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 100
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Wait For I/O Completion

  3995						SUBTTL Disk I/O Routines -- Wait For I/O Completion
  3996
  3997					;Routine IOWAIT - to wait for Xfer on current channel to complete
  3998					;If there was an error on the previous transfer, this routine will
  3999					;requeue the failing transfer and wait for it
  4000					;Call T1/ Channel #
  4001					;Returns +1/ Error on previous xfer - channel is idle
  4002					;	 +2/ Success - channel is idle
  4003
  4004	774724     201 02 0 00 000001 	IOWAIT:	MOVX T2,1		;Setup bit to shift
  4005	774725     242 02 1 00 000001 		LSH T2,@T1		;Shift bit to channel #
  4006	774726     616 02 0 00 772223 		TDNN T2,IOIP		;Is this channel idle?
  4007	774727     254 00 0 00 773530 		RETSKP			;No xfer - no errors...(makes sense)
  4008	774730     261 17 0 00 000002 		PUSH P,T2		;Save bit for this channel
  4009	774731     200 04 0 00 000001 		MOVE T4,T1		;Get channel number, in case of error
  4010	774732     221 04 0 00 000003 		IMULI T4,XCHAN		;Number of entries per channel
  4011	774733     201 02 0 00 000015 		MOVX T2,15		;Setup retry count
  4012	774734     205 03 0 00 000001 	TIMSET:	MOVSI T3,1		;Setup timeout
  4013	774735     260 17 0 00 773134 	IOLOOP:	IOOP (SKIPDONE)		;Is the xfer done?
  4014	774736     7 000 34 0 00 000010 
  4015	774737     365 03 0 00 774735 		SOJGE T3,IOLOOP		;No - check again	
  4016	774740     323 03 0 00 774750 		JUMPLE T3,IORTRY	;Timeout - retry
  4017	774741     260 17 0 00 773134 		IOOP(SKIPNOERR)		;Error?
  4018	774742     7 000 30 0 00 775120 
  4019	774743     254 00 0 00 774750 		 JRST IORTRY		;Yes - retry
  4020	774744     260 17 0 00 775231 		CALL UKPORT		;Unlock the port (if needed)
  4021	774745     262 17 0 00 000002 		POP P,T2		;Get back channel's bit
  4022	774746     412 02 0 00 772223 		ANDCAM T2,IOIP		;Note channel idle
  4023	774747     254 00 0 00 773530 		RETSKP			;And return good
  4024	774750     375 00 0 00 000002 	IORTRY:	SOSGE T2		;Retry count expired??
  4025						 JRST [	POP P,T2	;Get back channel's bit
  4026							ANDCAM T2,IOIP	;Note channel idle
  4027	774751     254 00 0 00 776567 			RET ]		;Error on previous command
  4028	774752     260 17 0 00 774754 		CALL RETRY		;Retry it
  4029	774753     254 00 0 00 774734 		JRST TIMSET		;Go wait for it
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 101
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Perform Retry

  4030						SUBTTL Disk I/O Routines -- Perform Retry
  4031
  4032					;Routine to retry failed I/O
  4033					;Called with offset into CHNTAB in T4
  4034	774754     202 16 0 00 772222 	RETRY:	MOVEM CX,ERACS+CX	;Save it
  4035	774755     201 16 0 00 772204 		MOVEI CX,ERACS		;Setup BLT
  4036	774756     251 16 0 00 772221 		BLT CX,ERACS+15		;Save ACs
  4037	774757     200 16 0 00 772222 		MOVE CX,ERACS+CX	;Restore CX
  4038	774760     261 17 0 00 772151 		PUSH P,CURSEC		;Save
  4039	774761     261 17 0 00 772152 		PUSH P,CURCYL		;  these
  4040	774762     261 17 0 00 772153 		PUSH P,CURUN		;    too
  4041	774763     200 13 0 04 772154 		MOVE P4,CHNTAB+XADR(T4)	;Get address from previous xfer
  4042	774764     200 14 0 04 772155 		MOVE P5,CHNTAB+XDSK(T4)	;Get previous disk address
  4043	774765     550 02 0 04 772156 		HRRZ T2,CHNTAB+XCNT(T4)	;Get count
  4044	774766     335 00 0 04 772156 		SKIPGE CHNTAB+XCNT(T4)	;Was last function read?
  4045	774767     665 00 0 00 000010 		TXOA F,F.WRT		;No - set write bit
  4046	774770     621 00 0 00 000010 		TXZ F,F.WRT		;Yes
  4047	774771     261 17 0 00 000002 		PUSH P,T2		;Save page count
  4048	774772     200 01 0 00 000014 		MOVE T1,P5		;Get disk address for CHNSET
  4049	774773     260 17 0 00 775005 		CALL CHNSET		;Go set it up for this xfer
  4050	774774     262 17 0 00 000002 		POP P,T2		;Restore page count
  4051	774775     260 17 0 00 774660 		CALL RWCMN		;Start the xfer
  4052	774776     262 17 0 00 772153 		POP P,CURUN		;Restore saved values
  4053	774777     262 17 0 00 772152 		POP P,CURCYL
  4054	775000     262 17 0 00 772151 		POP P,CURSEC
  4055	775001     205 16 0 00 772204 		MOVSI CX,ERACS		;Setup for BLT
  4056	775002     251 16 0 00 000016 		BLT CX,16		;And restore ACs (NOT P!)
  4057	775003     200 16 0 00 772222 		MOVE CX,ERACS+CX	;Restore CX
  4058	775004     263 17 0 00 000000 		RET			;Done...
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 102
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Setup Channel for I/O

  4059						SUBTTL Disk I/O Routines -- Setup Channel for I/O
  4060
  4061					;CHNSET - Routine to setup channel info for I/O
  4062					;Accepts T1/ Disk address
  4063					;Returns +1 Always
  4064					;	 F/ Setup with RH device code
  4065					;	 T1/ Channel number
  4066
  4067	775005     621 01 0 00 777774 	CHNSET:	TXZ T1,DSKMSK		;[7.1228] Insure useful part of address used
  4068	775006     230 01 0 00 772225 		IDIV T1,DEVDSP+N.SCL	;Get cylinder in T1, sector in T2
  4069	775007     230 02 0 00 772226 		IDIV T2,DEVDSP+N.STK	;Get track in T2, sector in T3
  4070	775010     242 02 0 00 000010 		LSH T2,^D8		;Position the track # for DATAO
  4071	775011     434 02 0 00 000003 		IOR T2,T3		;Add a pinch of sector
  4072	775012     202 02 0 00 772151 		MOVEM T2,CURSEC		;Save sector within cylinder
  4073	775013     230 01 0 00 772224 		IDIV T1,DEVDSP+N.CLP	;Get unit number in T1, cyl in T2
  4074	775014     202 02 0 00 772152 		MOVEM T2,CURCYL		;Save it
  4075	775015     550 12 0 01 772133 		HRRZ P3,DSKTAB(T1)	;Get physical unit number
  4076	775016     202 12 0 00 772153 		MOVEM P3,CURUN		;Store it (P3 preserved for RHRD/RHWT)
  4077	775017     554 01 0 01 772133 		HLRZ T1,DSKTAB(T1)	;Get channel #, Entry-In-Use flag
  4078	775020     620 01 0 00 400000 		TRZ T1,ENTFLG		;Don't forget ENTFLG
  4079	775021     202 01 0 00 772150 		MOVEM T1,CURCHN		;Save for later
  4080	775022     541 00 0 01 000130 		HRRI F,RH0_-2(T1)	;Get IO device code
  4081	775023     263 17 0 00 000000 		RET
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 103
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Setup Channel for I/O

  4082
  4083					;Routine to setup the channel command list for this xfer
  4084
  4085	775024     261 17 0 00 000002 	IOSET:	PUSH P,T2		;Save count of pages
  4086	775025     200 03 0 00 772150 		MOVE T3,CURCHN		;Channel number (again)
  4087	775026     221 03 0 00 000100 		IMULI T3,CCWSZ		;Get offset into CCW page
  4088	775027     270 03 0 00 772147 		ADD T3,CCWADR		;And add it in
  4089	775030     661 03 0 00 200000 		TXO T3,1B1		;Get jump CCW	
  4090	775031     200 01 0 00 772150 		MOVE T1,CURCHN		;Channel number (again)
  4091	775032     242 01 0 00 000002 		LSH T1,2		;Shift it
  4092	775033     202 03 0 01 765000 		MOVEM T3,A%EPT+ICA(T1)	;Store Jump CCW in EPT for RH20
  4093	775034     260 17 0 00 773134 		IOOP(CLEAR)		;Reset RH20
  4094	775035     7 000 20 0 00 002000 
  4095	775036     260 17 0 00 773134 
  4096	775037     7 000 20 0 00 005610 
  4097	775040     260 17 0 00 775200 		CALL LKPORT		;Lock the port (if necessary)
  4098	775041     254 00 0 00 776572 		$ERROR(IOER11)		;Couldn't get it
  4099	775042     205 01 0 00 124000 		MOVX T1,R4%DCA!LR	;Desired cylinder register in RP04
  4100	775043     540 01 0 00 772152 		HRR T1,CURCYL		;Get cylinder
  4101	775044     260 17 0 00 773116 		CALL RHWT1		;Tell RP04 which cylinder
  4102	775045     200 01 0 00 772151 		MOVE T1,CURSEC		;Restore sector within cylinder
  4103	775046     261 17 0 00 000001 		PUSH P,T1		;Save disk address
  4104	775047     661 01 0 00 054000 		TXO T1,R4%DST!LR	;RP04 desired sector and track register
  4105	775050     260 17 0 00 773116 		CALL RHWT1		;Go write sector, track register
  4106	775051     262 17 0 00 000001 		POP P,T1		;Restore disk address
  4107	775052     661 01 0 00 704000 		TXO T1,.RHSBR!LR	;RH20 Block address register
  4108	775053     200 04 0 00 772150 		MOVE T4,CURCHN		;Get channel #
  4109	775054     201 02 0 00 000001 		MOVX T2,1		;Setup bit to shift
  4110	775055     242 02 1 00 000004 		LSH T2,@T4		;Do it
  4111	775056     436 02 0 00 772223 		IORM T2,IOIP		;Say xfer in progress
  4112	775057     260 17 0 00 773116 		CALL RHWT1		;Tell RP04 where the data is
  4113	775060     260 17 0 00 775321 		CALL GETPHY		;Get physical addr in T1
  4114	775061     254 00 0 00 776574 		 $ERROR (MEMMRF)	;Bad address
  4115	775062     322 01 0 00 775117 		JUMPE T1,DOPG0		;Handle separately if for page 0
  4116	775063     200 02 0 17 000000 		MOVE T2,(P)		;Get back count of pages
  4117	775064     220 02 0 00 772227 		IMUL T2,DEVDSP+N.BPP	;Make it number of blocks
  4118	775065     202 02 0 00 000003 		MOVEM T2,T3		;Make a copy
  4119	775066     231 03 0 00 000017 		IDIVI T3,^D15		;Max number of blocks in one IOWD
  4120	775067     332 00 0 00 000004 		SKIPE T4		;Remainder?
  4121	775070     350 00 0 00 000003 		AOS T3			;Yes - increment count of IOWDs needed
  4122	775071     213 00 0 00 000003 		MOVNS T3		;Negate it
  4123	775072     517 00 0 00 000003 		HRLZS T3		;Make AOBJN pointer
  4124	775073     200 04 0 00 772150 		MOVE T4,CURCHN		;Get channel number
  4125	775074     221 04 0 00 000100 		IMULI T4,CCWSZ		;Get offset into CCW page
  4126	775075     540 03 0 00 000004 		HRR T3,T4		;And store in AOBJN pointer
  4127	775076     661 01 0 00 400000 		TXO T1,1B0		;Setup Channel jump (xfer - don't halt)
  4128	775077     202 01 0 03 762000 	IOSLP:	MOVEM T1,A%CCW(T3)	;Store address and opcode
  4129	775100     305 02 0 00 000017 		CAIGE T2,^D15		;Do we have more than 1 xfer's worth?
  4130	775101     334 04 0 00 000002 		SKIPA T4,T2		;No - use only what we have left
  4131	775102     201 04 0 00 000017 		MOVEI T4,^D15		;Yes - use max of 15
  4132	775103     274 02 0 00 000004 		SUB T2,T4		;Number of blocks remaining	
  4133	775104     221 04 0 00 000200 		IMULI T4,BLKSIZ		;Convert to number of words
  4134	775105     137 04 0 00 776576 		DPB T4,[POINT 11,A%CCW(T3),13] ;Put it into the IOWD
  4135	775106     270 01 0 00 000004 		ADD T1,T4		;Increment memory address
  4136	775107     253 03 0 00 775077 		AOBJN T3,IOSLP		;More to do?
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 104
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Setup Channel for I/O

  4137
  4138	775110     402 00 0 03 762000 		SETZM A%CCW(T3)		;Add halt word at end
  4139	775111     262 17 0 00 000001 	IOSEXI:	POP P,T1		;Get count of pages
  4140	775112     607 00 0 00 000010 		TXNN F,F.WRT		;Is this a write?
  4141	775113     334 04 0 00 776577 		SKIPA T4,[.RHSTR!LR!RCLP!STLW!DTES!<-4&1777>B29!R4%CRD!GO];READ DATAO
  4142						JRST [ 	MOVE T4,[.RHSTR!LR!RCLP!STLW!DTES!R4%CWR!GO];RH20 WRITE DATAO
  4143							IMULI T1,-4	;Make it number of blocks
  4144							DPB T1,[POINT 10,T4,29] ;Store count in command
  4145	775114     254 00 0 00 776601 			JRST .+1]	;And continue
  4146	775115     671 04 0 00 772153 		TSO T4,CURUN		;Set correct unit
  4147	775116     263 17 0 00 000000 		RET			;Return success
  4148
  4149	775117     200 03 0 00 772150 	DOPG0:	MOVE T3,CURCHN		;Get channel number
  4150	775120     221 03 0 00 000100 		IMULI T3,CCWSZ		;Get it's offset into CCW page
  4151	775121     205 01 0 00 400400 		MOVX T1,1B0+<<LCORAD>B13> ;Setup skip word
  4152	775122     202 01 0 03 762000 		MOVEM T1,A%CCW(T3)	;Store it
  4153	775123     200 01 0 00 776605 		MOVE T1,[1B0+1B1+<1000-LCORAD>B13+LCORAD] ;Setup IOWD for rest of page
  4154	775124     202 01 0 03 762001 		MOVEM T1,A%CCW+1(T3)	;Store it too
  4155	775125     254 00 0 00 775111 		JRST IOSEXI		;And done
  4156					>				; END IFE FT.MTA
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 105
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Save/Restore Channel Status

  4157						SUBTTL Disk I/O Routines -- Save/Restore Channel Status
  4158
  4159						;ROUTINES TO SAVE AND RESTORE CHANNEL
  4160						;NOTE:  On a 2-pass load, incorrectly restoring the channel
  4161						;	can cause PH2PIM BUGHLT's.  Incorrectly restoring the IVR
  4162						;	can cause IOPGF's.
  4163						;For simplicity's sake, we keep IO unit number out of IVIR register
  4164
  4165	775126     261 17 0 00 000001 	CHNSAV:	PUSH P,T1		;SAVE T1
  4166	775127     261 17 0 00 000013 		PUSH P,P4		;Save P4
  4167	775130     515 13 0 00 777770 		HRLZI P4,-NCHAN		;Get AOBJN pointer
  4168	775131     200 01 0 13 772133 	SAVLP:	MOVE T1,DSKTAB(P4)	;Get status of logical unit
  4169	775132     627 01 0 00 400000 		TLZN T1,ENTFLG		;In use?
  4170	775133     254 00 0 00 775145 		JRST SAVLP1		;No
  4171					   IFN FT.MTA,<	
  4172						LSH T1,6		;Shift channel # into left half
  4173					   >
  4174	775134     556 01 0 00 772150 		HLRZM T1,CURCHN		;Store channel #
  4175	775135     260 17 0 00 773132 		CALL XIO1		;GET DEVICE CODE
  4176	775136     7 000 24 0 00 000001 	CONI .-.,T1		;GET RH20 PI ASSIGNMENT
  4177	775137     405 01 0 00 000407 		ANDI T1,.RHMBE+7	;KEEP JUST MASBUS ENA + PI
  4178	775140     542 01 0 13 772437 		HRRM T1,PIAINI(P4)	;SAVE IT
  4179	775141     205 01 0 00 740000 		MOVX T1,.RHIVR		;INTERRUPT VECTOR REGISTER
  4180	775142     260 17 0 00 775314 		CALL RHDIO		;GET ORIGINAL CONTENTS OF IVR
  4181	775143     405 01 0 00 177777 		ANDI T1,177777		;KEEP JUST DATA BITS
  4182	775144     506 01 0 13 772437 		HRLM T1,PIAINI(P4)	;SAVE IT
  4183	775145     253 13 0 00 775131 	SAVLP1:	AOBJN P4,SAVLP		;DO ALL PHYSICAL UNITS
  4184	775146     262 17 0 00 000013 		POP P,P4		;Restore P4
  4185	775147     262 17 0 00 000001 		POP P,T1		;RESTORE T1
  4186	775150     263 17 0 00 000000 		RET
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 106
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Save/Restore Channel Status

  4187
  4188	775151     261 17 0 00 000001 	CHNRST:	PUSH P,T1		;SAVE 1
  4189	775152     261 17 0 00 000013 		PUSH P,P4		;Save P4
  4190	775153     515 13 0 00 777770 		HRLZI P4,-NCHAN		;Get AOBJN pointer
  4191	775154     200 01 0 13 772133 	RSTLP:	MOVE T1,DSKTAB(P4)	;Get status of logical unit
  4192	775155     627 01 0 00 400000 		TLZN T1,ENTFLG		;In use?
  4193	775156     254 00 0 00 775174 		JRST RSTLP1		;No
  4194					   IFN FT.MTA,<	
  4195						LSH T1,6		;Shift channel # into left half
  4196					   >
  4197	775157     556 01 0 00 772150 		HLRZM T1,CURCHN		;Store channel #
  4198	775160     544 00 0 00 000001 		HLR F,T1		;Get RH # in F
  4199	775161     271 00 0 00 000130 		ADDI F,RH0_-2		;Produce device code for that RH
  4200	775162     260 17 0 00 773134 		IOOP(CLEAR)		;RESET RH20
  4201	775163     7 000 20 0 00 002000 
  4202	775164     260 17 0 00 773134 
  4203	775165     7 000 20 0 00 005610 
  4204	775166     205 01 0 00 744000 		MOVX T1,.RHIVR!LR	;INTERRUPT VECTOR REGISTER
  4205	775167     544 01 0 13 772437 		HLR T1,PIAINI(P4)	;GET INITIAL CONTENTS
  4206	775170     260 17 0 00 775314 		CALL RHDIO		;RESTORE THEM
  4207	775171     550 01 0 13 772437 		HRRZ T1,PIAINI(P4)	;GET RH20 PI ASSIGNMENT
  4208	775172     260 17 0 00 773134 		CALL IOXCT		;GET DEVICE CODE
  4209	775173     7 000 20 0 01 000050 	CONO .-.,.RHDON!.RHAIE(T1) ;RESTORE ORIGINAL PI ASSIGNMENT
  4210	775174     253 13 0 00 775154 	RSTLP1:	AOBJN P4,RSTLP		;DO ALL PHYSICAL UNITS
  4211	775175     262 17 0 00 000013 		POP P,P4		;Restore P4
  4212	775176     262 17 0 00 000001 		POP P,T1		;RESTORE 1
  4213	775177     263 17 0 00 000000 		RET			;AND DONE
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 107
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Grab/Release Disk Port 

  4214						SUBTTL Disk I/O Routines -- Grab/Release Disk Port 
  4215
  4216						;SUBROUTINES TO GRAB/RELEASE PORT ON DUAL-PORTED RP04567
  4217
  4218					   IFE FT.MTA,<
  4219
  4220						;LOCK PORT - return +1 failure, +2 success
  4221	775200     336 00 0 00 772355 	LKPORT:	SKIPN PORTLK		;Can we do it?
  4222	775201     254 00 0 00 773530 		RETSKP			;No, wrong device type
  4223	775202     105 17 0 00 000002 		ADJSP P,2		;Make room for 2 AC's
  4224	775203     124 01 0 17 777777 		DMOVEM T1,-1(P)		;Save T1-T2
  4225	775204     201 02 0 00 141520 		MOVEI T2,TIMOUT		;Timer count
  4226	775205     254 00 0 00 775212 		JRST LKPT2		;Skip channel clear and enter loop
  4227
  4228
  4229						;This loop is coded this way to preserve the channel status
  4230						;if our little nest of timeouts actually times out and we branch
  4231						;to the ERRTYP code
  4232	775206     260 17 0 00 773134 	LKPT1:	IOOP(CLEAR)		;No, try clearing channel and unit
  4233	775207     7 000 20 0 00 002000 
  4234	775210     260 17 0 00 773134 
  4235	775211     7 000 20 0 00 005610 
  4236						;Cover the case where an IO error or popped LAP plug has
  4237						;caused Volume-Valid to be cleared
  4238	775212     200 01 0 00 776253 	LKPT2:	MOVE T1,[R4%CPA!LR!GO]  ;Do pack acknowledge and attempt to seize port
  4239	775213     260 17 0 00 773116 		CALL RHWT1		;Send to drive
  4240	775214     205 01 0 00 000000 		MOVSI T1,(R4%CSR)	;Get port-status
  4241	775215     260 17 0 00 773115 		CALL RHRD1		
  4242	775216     606 01 0 00 004000 		TXNN T1,CR.DVA		;Drive available?
  4243	775217     254 00 0 00 775227 		JRST LKPT3		;No, try again
  4244	775220     205 01 0 00 010000 		MOVSI T1,(R4%DSR)	;Get device status
  4245	775221     260 17 0 00 773115 		CALL RHRD1
  4246	775222     602 01 0 00 001000 		TXNE T1,DS.PGM		;Programmable?
  4247	775223     620 01 0 00 100000 		TXZ T1,DS.ATA		;yes. Ignore attention status then as
  4248									; dual-ported drives roll attentions!
  4249	775224     405 01 0 00 174700 		ANDI T1,DS.MSK		;Keep only appropriate bits
  4250	775225     306 01 0 00 010700 		CAIN T1,DS.GUD		;Drive OK?
  4251	775226     254 00 0 00 775250 		JRST LKPTRS		;Yes, return success
  4252	775227     367 02 0 00 775206 	LKPT3:	SOJG T2,LKPT1		;Keep trying
  4253	775230     254 00 0 00 775251 		JRST LKPTR		;Timeout error, return failure
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 108
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Grab/Release Disk Port 

  4254
  4255
  4256						;UNLOCK PORT - returns +1 always
  4257
  4258	775231     336 00 0 00 772355 	UKPORT:	SKIPN PORTLK		;Can we do it?
  4259	775232     263 17 0 00 000000 		RET			;No, wrong device type
  4260	775233     105 17 0 00 000002 		ADJSP P,2		;Make room for 2 AC's
  4261	775234     124 01 0 17 777777 		DMOVEM T1,-1(P)		;Save T1-T2
  4262	775235     260 17 0 00 773134 		IOOP(CLEAR)		;Clear channel and unit
  4263	775236     7 000 20 0 00 002000 
  4264	775237     260 17 0 00 773134 
  4265	775240     7 000 20 0 00 005610 
  4266	775241     205 01 0 00 010000 		MOVSI T1,(.TMDSR)	;Get status
  4267	775242     260 17 0 00 773115 		CALL RHRD1
  4268	775243     606 01 0 00 001000 		TXNN T1,DS.PGM		;Still in AB mode?
  4269	775244     254 00 0 00 775251 		JRST LKPTR		;No, so no problem with it being locked
  4270	775245     200 01 0 00 776606 		MOVE T1,[R4%CSR!LR!R4%REL!GO] ;Get unlock command
  4271	775246     260 17 0 00 773116 		CALL RHWT1		;Send to drive
  4272	775247     254 00 0 00 775251 		JRST LKPTR		;Return
  4273
  4274						;Restore AC's
  4275	775250     350 00 0 17 777776 	LKPTRS:	AOS -2(P)
  4276	775251     120 01 0 17 777777 	LKPTR:	DMOVE T1,-1(P)		;Restore T1-T2
  4277	775252     105 17 0 00 777776 		ADJSP P,-2		;Back up stack pointer
  4278	775253     263 17 0 00 000000 		RET
  4279
  4280
  4281						;Routine to check if the dual port is still ours
  4282	775254     336 00 0 00 772355 	CKPORT:	SKIPN PORTLK		;Dual-ported device?
  4283	775255     254 00 0 00 773530 		JRST RSKP		;No, so we always have the port
  4284	775256     205 01 0 00 000000 		MOVSI T1,(R4%CSR)	;Get port-status
  4285	775257     260 17 0 00 773115 		CALL RHRD1		
  4286	775260     606 01 0 00 004000 		TXNN T1,CR.DVA		;Drive available?
  4287	775261     263 17 0 00 000000 		RET			;No, return failure
  4288	775262     205 01 0 00 010000 		MOVSI T1,(.TMDSR)	;Get device status
  4289	775263     260 17 0 00 773115 		CALL RHRD1
  4290						;If VV is reset, we may have lost+regained port
  4291						;if DPR is reset, we have lost port
  4292	775264     602 01 0 00 000100 		TXNE T1,DS.VV		;Have we lost Volume Valid?
  4293	775265     606 01 0 00 000400 		TXNN T1,DS.DPR		;Is drive present?
  4294	775266     263 17 0 00 000000 		RET			;Return failure, port ownership in question
  4295	775267     254 00 0 00 773530 		JRST RSKP		;Return success
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 109
BOOT	MAC	16-Feb-88 20:26		Disk I/O Routines -- Disk Device Dispatch Tables

  4296						SUBTTL Disk I/O Routines -- Disk Device Dispatch Tables
  4297
  4298					;DISK DEVICE DISPATCH TABLES
  4299
  4300					DEFINE TYPTAB (NAME,INFO)  <	;CLP,SCL,STK,DOI,CSET,CRST,RTY
  4301					NAME':		..XXX=0
  4302						IRP INFO, < EXP INFO
  4303							    ..XXX=..XXX+1>
  4304					IFN ..XXX-TYPSZ,<PRINTX ?DSKTYP table wrong size>
  4305					>				;End TYPTAB Macro
  4306	775270     000000  000620	TYPTAB (RP4TYP,<N.CLP4,N.SCL4,N.STK4,N.BKP4,DOIO,IOSET>) ;RP04
  4307	775271     000000  000574
  4308	775272     000000  000024
  4309	775273     000000  000004
  4310	775274     000000  774675
  4311	775275     000000  775024
  4312	775276     000000  001440	TYPTAB (RP6TYP,<N.CLP6,N.SCL4,N.STK4,N.BKP4,DOIO,IOSET>) ;RP06
  4313	775277     000000  000574
  4314	775300     000000  000024
  4315	775301     000000  000004
  4316	775302     000000  774675
  4317	775303     000000  775024
  4318	775304     000000  001165	TYPTAB (RP7TYP,<N.CLP7,N.SCL7,N.STK7,N.BKP4,DOIO,IOSET>) ;RP07
  4319	775305     000000  002540
  4320	775306     000000  000053
  4321	775307     000000  000004
  4322	775310     000000  774675
  4323	775311     000000  775024
  4324
  4325					   >	;End IFE FT.MTA
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 110
BOOT	MAC	16-Feb-88 20:26		Tape I/O Routines -- Read Page

  4326						SUBTTL Tape I/O Routines -- Read Page
  4327
  4328					IFN FT.MTA,<
  4329					
  4330					REDPAG:	MOVE T1,[.RHSTR!LR!RCLP!STLW!<-4&1777>B29!R4%CRD!GO] ;RH20 READ DATAO
  4331						AOS FILPAG		;INCREMENT FILE PAGE #
  4332						PUSH P,P2		;SAVE COUNTER
  4333						MOVEI P2,^D100		;RETRY COUNT FOR MAGTAPE
  4334					MRETRY:	CALL TAPIO		;DO IO
  4335						JRST RWSXIT		;WIN
  4336						SOSG P2			;DO RETRY?
  4337						  $ERROR (TAPHTE)	;NO - HARD TAPE ERROR
  4338						CALL BSPACE		;YES - BACKSPACE
  4339						JRST MRETRY		;LOOP
  4340					RWSXIT:	AOS -1(P)		;SKIP RETURN
  4341					RWFXIT:	POP P,P2		;RESTORE P2
  4342						RET			;RETURN
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 111
BOOT	MAC	16-Feb-88 20:26		Tape I/O Routines -- Read Page

  4343						SUBTTL Tape I/O Routines -- Setup Channel
  4344					
  4345					;HERE TO SETUP THE CHANNEL FOR TAPE IO
  4346					
  4347					TAPIO:	HRR F,CURCHN		;Get RH #
  4348						ADDI F,RH0_-2		;Produce device code for that RH
  4349						LDB P3,PKON		;GET TM02
  4350						LDB T4,PCHAN		;GET CHANNEL NUMBER
  4351						CALL XIO1		;GET DEVICE CODE
  4352						CONO .-.,.RHMBE!.RHRAE!.RHCTE!.RHDON ; RESET RH20
  4353						CALL @TAPSIO(P6)	;SET CONTROLLER TO START THE IO
  4354						MOVE T1,[EXP .TMATR!LR+377] ;CLEAR ATTN
  4355						CALL RHWT		;
  4356						MOVE T1,CCWADR		;Get address of CCW page
  4357						TXO T1,1B1		;Make it a channel jump
  4358						LSH T4,2		;COMPUTE OFFSET INTO EPT
  4359						MOVEM T1,A%EPT+ICA(T4)	;STORE
  4360						CALL GETPHY		;GET PHYS ADDR
  4361						 $ERROR (MEMMRF)	;BAD ADDRESS
  4362						JUMPN T1,TAPIO1		;PAGE 0?
  4363						MOVSI T1,(EXP 1B0+<LCORAD>B13) ;YES - SKIP FIRST FEW WDS
  4364						MOVEM T1,A%CCW		;STORE AS FIRST ELEMENT
  4365						MOVE T1,[EXP 1B0+1B1+<1000-LCORAD>B13+LCORAD]
  4366						MOVEM T1,A%CCW+1	;SECOND AND LAST CCW
  4367						JRST TAPIO2		;GO DO IO
  4368					TAPIO1:	TLO T1,(EXP 1B0+1B1+<1000>B13) ;BUILD CCW
  4369						MOVEM T1,A%CCW		;STORE
  4370					TAPIO2:	MOVE T1,[EXP .RHSTR!LR!RCLP+.TMRDF+1777B29] ;SEND COMMAND
  4371						CALL RHWT		; ...
  4372						MOVSI T2,1		;SET WAIT COUNT
  4373					TAPWAT:	CALL IOXCT		;GET DEVICE CODE
  4374						CONI .-.,T1		;GET DEVICE STATUS
  4375						TRNN T1,.RHDON		;DONE ?
  4376						SOJG T2,TAPWAT		;NO - LOOP
  4377						TRNN T1,775000		;ERRORS+
  4378						JUMPG T2,CPOPJ		; NO - EXIT
  4379						JRST CPOPJ1		;YES - SKIP
  4380					
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 112
BOOT	MAC	16-Feb-88 20:26		Tape I/O Routines -- Read Page

  4381						SUBTTL Tape I/O Routines -- Backspace 
  4382					
  4383					;TAPE I/O SUBROUTINES
  4384					BSPACE:	CALL IOXCT		;GET IO CODE
  4385						CONO .-.,2000		;RESET THE RH20 BEFORE
  4386						CALL IOXCT		; DOING BACKSPACE
  4387						CONO .-.,4600		;...
  4388						CALL @STRTMP(P6)	;START THE MICRO PROCESSOR (IF DX20)
  4389						CALL @BACKRC(P6)	;BACKSPACE A RECORD
  4390						MOVSI T2,5		;TIMED WAIT
  4391						CALL @BKWAIT(P6)	;WAIT FOR BACKSPACE TO FINISH
  4392						MOVE T1,[EXP .TMATR!LR+377] ;CLEAR ATTN
  4393						CALL RHWT		;
  4394						SKIPN T2		;TIMEOUT?
  4395						 $ERROR (TAPHTE)	;YES - HARD TAPE ERROR
  4396						RET			;NO
  4397					
  4398					PCHAN:	POINT 6,DSKTAB,23	;POINTER TO CHAN NUMBER
  4399					PKON:	POINT 6,DSKTAB,29	;POINTER TO KON NUMBER
  4400					PUNIT:	POINT 6,DSKTAB,35	;POINT TO TAPE UNIT
  4401					>				;END IFN FT.MTA
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 113
BOOT	MAC	16-Feb-88 20:26		Tape I/O Routines -- Dispatch Tables

  4402						SUBTTL Tape I/O Routines -- Dispatch Tables
  4403
  4404	775312     621 01 0 00 004000 	RHRD:	TLZ T1,(LR)		;NO WRITE
  4405	775313     671 01 0 00 000012 	RHWT:	TSO T1,P3		;INSERT TM02
  4406	775314     260 17 0 00 773134 	RHDIO:	CALL IOXCT		;Here to avoid insertion of unit #
  4407	775315     7 000 14 0 00 000001 	DATAO .-.,T1		;SEND COMMAND
  4408	775316     260 17 0 00 773134 		CALL IOXCT
  4409	775317     7 000 04 0 00 000001 	DATAI .-.,T1		;READ RESULT
  4410	775320     263 17 0 00 000000 		RET
  4411
  4412					IFN FT.MTA,<
  4413					
  4414					;START IO
  4415					TAPSIO:	TM2SIO
  4416						DX2SIO
  4417						TM8SIO
  4418					
  4419					;START MICROPROCESSOR
  4420					STRTMP:	R
  4421						STDX20
  4422						R
  4423					
  4424					;BACKSPACE RECORD
  4425					BACKRC:	TM2BSR
  4426						TM2BSR
  4427						TM8BSR
  4428					
  4429					;WAIT FOR BACKSPACE TO FINISH
  4430					BKWAIT:	BWAIT
  4431						BXWAIT
  4432						R			;(WAITED WHEN WE STARTED IT)
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 114
BOOT	MAC	16-Feb-88 20:26		Tape I/O Routines -- Dispatch Tables

  4433					
  4434					TM2SIO:	MOVEI T1,TMCD16		; SET DENSITY
  4435						LDB T2,PUNIT		;GET DRIVE NUMBER
  4436						IOR T1,T2		; ...
  4437						HRLI T1,(.TMTCR!LR)	;TAPE CONTROL REG
  4438						CALLRET RHWT		; ...
  4439					
  4440					DX2SIO:	LDB T1,PUNIT		;PICK UP UNIT NUMBER
  4441						TRO T1,.TDMOD		;SET THE MODES
  4442						TXO T1,.TDDNR!LR	;GOES INTO DRIVE NUMBER REG
  4443						CALL RHWT		;LOAD THE REG
  4444						MOVX T1,<<-1000*5>&177777> ;SET CORRECT RECORD SIZE
  4445						TXO T1,.TMFCR!LR	;GOES INTO BYTE COUNT REG
  4446						CALL RHWT		;SET RECORD SIZE
  4447						MOVX T1,.TMDSR		;GET THE DEVICE STATUS REG
  4448						CALL RHRD		;
  4449						TXNN T1,.TDMPR		;MAKE SURE IT IS STILL RUNNING
  4450						CALL STDX20		;IF NOT, START IT
  4451						RET
  4452					
  4453					TM8SIO:	MOVEI T1,5000		;SET THE BYTE COUNT REGISTER
  4454						HRLI T1,(LR!.T7BC)	;TELL THE HARDWARE HOW MUCH WE'LL READ
  4455						CALL RHWT
  4456						LDB T1,PUNIT		;SLAVE NUMBER
  4457						TRO T1,T7.SER!T7.CDP!T7.1RC ;NO ERROR REPOS, CORE DUMPE, 1 RECORD
  4458						HRLI T1,(.T7FMT!LR)	;WRITE THE FORMAT REG
  4459						CALLRET RHWT
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 115
BOOT	MAC	16-Feb-88 20:26		Tape I/O Routines -- Dispatch Tables

  4460					
  4461					TM2BSR:	MOVE T1,[EXP .TMFCR!LR+177777] ;REPEAT COUNT
  4462						CALL RHWT		;
  4463						MOVE T1,[EXP .TMCSR!LR+.TMBSF] ;DO BACKSPACE
  4464						CALLRET RHWT		;
  4465					
  4466					TM8BSR:	MOVEI T1,T7.BSR_6	;BACK 1 RECORD
  4467						PUSH P,P2
  4468						MOVE P2,P3
  4469						LDB P3,PUNIT		;GET ACS RIGHT
  4470						CALL T78.ND		;DO IT AND WAIT TILL DONE
  4471						POP P,P2
  4472						LDB P3,PKON		;RESTORE ACS
  4473						RET
  4474					
  4475					BWAIT:	MOVSI T1,(.TMDSR)	;WAIT FOR NO POSN
  4476						CALL RHRD		;
  4477						TRNE T1,TMSPIP		;DONE YET?
  4478						SOJG T2,BWAIT		;NO
  4479						RET
  4480					
  4481					BXWAIT:	MOVX T1,.TMDSR		;READ THE STATUS REG
  4482						CALL RHRD		;
  4483						TRNN T1,.TDATB		;ATTENTION UP?
  4484						SOJG T2,BXWAIT		;NO, LOOP
  4485						RET
  4486					
  4487					IFE FT.DX2,<
  4488					DX2SIO:
  4489					STDX20:
  4490					BXWAIT:	RET
  4491					>
  4492					IFE FT.TM8,<
  4493					TM8SIO:
  4494					TM8BSR:	RET
  4495					>
  4496					>				; END OF IFE FT.MTA
  4497					>				; END OF IFN KLFLG
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 116
BOOT	MAC	16-Feb-88 20:26		Physical Address Checking

  4498						SUBTTL Physical Address Checking
  4499
  4500					;SUBROUTINE TO GET THE PHYSICAL ADDRESS CORRESPONDING
  4501					;TO THE ADDRESS IN P4 (EITHER PHYS OR VIRT DEPENDING ON F.PHYS)
  4502					;RETURN THE RESULT IN T1
  4503					;RETURNS NON-SKIP IF THE ADDR PAGE FAULTS OR NXMS
  4504
  4505
  4506					; PAGE TABLE SLOT USED FOR THIS TEST IS FOR THE LAST FREE PAGE BEFORE VBOOT
  4507
  4508		   	   766741	TSTSLT== <VFREE>+A%PTB	;PAGE TABLE SLOT FOR TESTING
  4509									;I.E., THE SLOT IN A%PTB CORRESPONDING TO PAGE
  4510									; VFREE
  4511		   	   741000	TSTADD==<VFREE>_9		;ADDRESS OF TEST PAGE
  4512
  4513	775321     200 01 0 00 000013 	GETPHY:	MOVE T1,P4		;COPY ADDRESS
  4514	775322     242 01 0 00 777767 		LSH T1,-9		;CONVERT ADDRESS TO PAGE NUMBER
  4515	775323     603 00 0 00 200000 		TXNE F,F.PHYS		;PHYSICAL ADDRESS FOR ARGUMENT ?
  4516	775324     254 00 0 00 775332 		JRST GETPH1		;YES, GO TEST FOR EXTANT PAGE
  4517
  4518					; ARGUMENT IS A VIRTUAL ADDRESS - CONVERT TO PHYSICAL AND TEST
  4519
  4520	775325     257 01 0 13 000000 		MAP T1,(P4)		;GET PHYSICAL PAGE NUMBER
  4521					IFN KLFLG,<
  4522	775326     607 01 0 00 100000 		TLNN T1,(1B2)		;IS PAGE ACCESSIBLE ?
  4523	775327     263 17 0 00 000000 		RET			;NO, RETURN
  4524					>				;END IFN KLFLG
  4525	775330     621 01 0 00 777760 		TXZ T1,MAPBTS		;YES, CLEAR ALL BITS BUT ADDRESS
  4526	775331     242 01 0 00 777767 		LSH T1,-^D9		;CONVERT ADDRESS TO A PAGE #
  4527	775332     260 17 0 00 775336 	GETPH1:	CALL CHKNXM		;Go check out phys address
  4528	775333     263 17 0 00 000000 		RET			;N.G.
  4529	775334     242 01 0 00 000011 		LSH T1,9		;Shift it back to address
  4530	775335     254 00 0 00 773530 		RETSKP			;
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 117
BOOT	MAC	16-Feb-88 20:26		Physical Address Checking

  4531
  4532					; HERE WITH A PHYSICAL ADDRESS TO TEST
  4533					;NOT ALL PHYSICAL PAGES MAY BE IN THE VIRTUAL MAP, SO FOR TESTING WE
  4534					;TEMPORARILY SNEAK THE PHYSICAL ADDRESS INTO A PAGE-TABLE SLOT AND TRY
  4535					;TO REFERENCE THE VIRTUAL PAGE ASSOCIATED WITH THAT SLOT.
  4536
  4537	775336     661 01 0 00 124000 	CHKNXM:	TXO T1,IMMPTR		;FORM IMMEDIATE POINTER (+WRITE+CACHE)
  4538	775337     261 17 0 00 766741 		PUSH P,TSTSLT		;SAVE EXISTING PAGE TABLE ENTRY
  4539	775340     202 01 0 00 766741 		MOVEM T1,TSTSLT		;MAP PAGE TO BE TESTED
  4540	775341     701 02 0 00 741000 		CLRPT TSTADD		;CLEAR PAGER ENTRY FOR TSTADD PAGE
  4541					IFN KLFLG,<
  4542	775342     7 000 20 0 00 022000 	CONO APR,AP.RNX		;TURN OFF NXM FLAG
  4543					>				;END IFN KLFLG
  4544	775343     402 00 0 00 772244 		SETZM PFFLG		;Zero PF flag
  4545	775344     330 00 0 00 741020 	CHKAD:	SKIP TSTADD+20		;Reference Virtual Page
  4546	775345     550 01 0 00 766741 	CHKDON:	HRRZ T1,TSTSLT		;Get Physical Page #
  4547	775346     262 17 0 00 766741 		POP P,TSTSLT		;Restore Original Map Entry
  4548	775347     701 02 0 00 741000 		CLRPT TSTADD		;The Gene Leache memorial instruction
  4549									;Clear pager entry for TSTADD page
  4550					IFN KLFLG,<
  4551	775350     7 000 34 0 00 002000 	CONSO APR,AP.NXM	;NXM ON REFERENCE ?
  4552	775351     332 00 0 00 772244 		SKIPE PFFLG		;Did it page fail??
  4553	775352     334 00 0 00 000000 		SKIPA			;Yes or Yes
  4554	775353     254 00 0 00 773530 		JRST CPOPJ1		;NO, GIVE GOOD RETURN
  4555	775354     7 000 20 0 00 022000 	CONO APR,AP.RNX		;YES, RESET NXM FLAG
  4556	775355     263 17 0 00 000000 		RET			;RETURN BAD
  4557					>				;END IFN KLFLG
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 118
BOOT	MAC	16-Feb-88 20:26		Physical Address Checking

  4558
  4559					;SUBROUTINE TO TEST IF A GIVEN VIRTUAL ADDRESS IS LEGAL
  4560					;VIZ DOES THE ADDR PAGE FAIL, NXM , OR POINT TO A VBOOT PAGE?
  4561					;IF SO, RETURN NON SKIP
  4562
  4563						;FIRST, SEE IF THE ADDRESS SURVIVES PAGE-FAIL OR NXM TEST
  4564	775356     200 01 0 00 000013 	TSTADR:	MOVE T1,P4		;GET ADDR TO TEST
  4565	775357     242 01 0 00 777767 		LSH T1,-9		;CONVERT TO PAGE
  4566	775360     317 01 0 00 772115 		CAMG T1,UPRLIM		;BELOW UPPER LIMIT?
  4567	775361     315 01 0 00 772114 		CAMGE T1,LWRLIM		;ABOVE LOWER LIMIT?
  4568	775362     263 17 0 00 000000 		RET			;NO - BAD
  4569	775363     260 17 0 00 775321 		CALL GETPHY		;CONVERT TO PHYSICAL ADDR
  4570	775364     263 17 0 00 000000 		RET			;BAD RETURN FROM GETPHY
  4571	775365     261 17 0 00 000013 		PUSH P,P4		;SAVE DEST
  4572	775366     261 17 0 00 000000 		PUSH P,F		;SAVE FLAGS
  4573	775367     621 00 0 00 200000 		TLZ F,(F.PHYS)		;TEST VIRT ADDR
  4574	775370     200 02 0 00 000001 		MOVE T2,T1		;PHYS ADDR
  4575	775371     201 13 0 00 742000 		MOVEI P4,A%VFST		;START OF VBOOT AREA
  4576
  4577						;OK SO FAR, SEE IF THE PHYSICAL ADDRESS CORRESPONDS TO THE
  4578						;PHYSICAL ADDRESS OF ANY VBOOT PAGES - IF SO, GIVE BAD RETURN
  4579	775372     260 17 0 00 775321 	TA.NXT:	CALL GETPHY		;CONVERT TO PHYS ADDR
  4580	775373     254 00 0 00 776574 		 $ERROR (MEMMRF)	;IMPOSSIBLE CONDITION
  4581	775374     316 01 0 00 000002 		CAMN T1,T2		;SAME AS TARGET ADDR?
  4582	775375     254 00 0 00 775402 		JRST TA.BAD		;YES - FAIL RETURN
  4583	775376     271 13 0 00 001000 		ADDI P4,1000		;NO - TRY NEXT PAGE
  4584	775377     307 13 0 00 777000 		CAIG P4,VORG_9		;CHECKED ALL PAGES?
  4585	775400     254 00 0 00 775372 		JRST TA.NXT		;NO - LOOP FOR MORE
  4586	775401     350 00 0 17 777776 		AOS -2(P)		;SKIP RETURN (THIS IS PRETTY BAD...)
  4587
  4588	775402     262 17 0 00 000000 	TA.BAD:	POP P,F			;RESTORE FLAGS
  4589	775403     262 17 0 00 000013 		POP P,P4		;RESTORE ADDRESS
  4590	775404     263 17 0 00 000000 		RET			;NON-SKIP RETURN
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 119
BOOT	MAC	16-Feb-88 20:26		Error Message Tables

  4591						SUBTTL Error Message Tables
  4592
  4593					;ERROR MESSAGES
  4594
  4595					DEFINE ERSTR (SYM,SNAM,FNAM,DVSTS,TEXT),
  4596					<	SYM==%COUNT
  4597						IFG SNAM,<%SNAM=%SNAM!<1B<%COUNT>>> ;;TYPE STRUCTURE NAME
  4598						IFG FNAM,<%FNAM=%FNAM!<1B<%COUNT>>> ;;TYPE FILE NAME
  4599						IFG DVSTS,<%DVSTS=%DVSTS!<1B<%COUNT>>> ;;TYPE DEVICE STATUS
  4600					
  4601						%COUNT=%COUNT+1
  4602						[ASCIZ/TEXT/]
  4603					>
  4604	775405     000000  776607	ERRPFX: [ASCIZ/  ?BOOT: /]
  4605
  4606		   	   000000		%COUNT==0	;RESET COUNTER
  4607		   	   000000		%SNAM==0		;STRUCTURE NAMES
  4608		   	   000000		%FNAM==0		;FILE NAMES
  4609		   	   000000		%DVSTS==0	;DEVICE STATUS
  4610
  4611	775406     000000  776611	ERRTAB:	ERSTR (IOER2,1,1,1,IO error - can't read super-index block)
  4612	775407     000000  776621		ERSTR (IOER3,1,1,1,IO error - can't read index block)
  4613	775410     000000  776630		ERSTR (IOER4,1,1,1,IO error - can't read directory page)
  4614	775411     000000  776640		ERSTR (IOER6,1,1,1,IO error - can't read EXE-directory page)
  4615	775412     000000  776651		ERSTR (IOER7,1,1,1,IO error - can't read data page)
  4616	775413     000000  776660		ERSTR (IOER9,1,1,1,IO error - can't write EXE-directory page)
  4617	775414     000000  776671		ERSTR (IOER10,1,0,1,IO error - can't read root-directory index block)
  4618	775415     000000  776703		ERSTR (IOER11,0,0,1,IO error - Port-seize logic timed out)
  4619
  4620	775416     000000  776713		ERSTR (TAPHTE,0,0,1,Hard tape error)
  4621	775417     000000  776717		ERSTR (FILFNF,1,1,0,File not found)
  4622	775420     000000  776722		ERSTR (FILNEF,1,1,0,File not in EXE format)
  4623	775421     000000  776727		ERSTR (FILDRP,1,1,0,File's EXE-directory is longer than 1 page)
  4624	775422     000000  776740		ERSTR (STRHOM,1,0,0,Bad home block)
  4625	775423     000000  776743		ERSTR (STRSNF,1,0,0,Structure not found)
  4626	775424     000000  776747		ERSTR (STRNID,1,0,0,No structure ID)
  4627	775425     000000  776753		ERSTR (STRNBS,0,0,0,Can't find bootable structure)
  4628	775426     000000  776761		ERSTR (STRMTO,0,0,0,More than 1 bootable structure found)
  4629	775427     000000  776771		ERSTR (DMPFTS,0,0,0,Dump error - DUMP.EXE is too small: reconfigure with MAKDMP)
  4630	775430     000000  777005		ERSTR (COMERR,0,0,0,Command error)
  4631	775431     000000  777010		ERSTR (COMUNS,0,0,0,Unknown switch)
  4632	775432     000000  777013		ERSTR (COMINV,0,0,0,Invalid numeric value)
  4633	775433     000000  777020		ERSTR (MEMMRF,0,0,0,Memory reference failed)
  4634	775434     000000  777025		ERSTR (TAPNDR,0,0,0,No ready tape-drive available)
  4635		   774770  000000		%SNAM==%SNAM		;FORCE INTO LISTING
  4636		   770700  000000		%FNAM==%FNAM
  4637		   777000  000000		%DVSTS==%DVSTS
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 120
BOOT	MAC	16-Feb-88 20:26		Clear Core

  4638						SUBTTL Clear Core
  4639
  4640					;SUBROUTINE TO CLEAR CORE
  4641
  4642	775435     475 13 0 00 000000 	CLRCOR:	SETOI P4,		;INITIALIZE ADDRESS
  4643	775436     271 13 0 00 001000 	CLR.NP:	ADDI P4,1000		;NEXT PAGE
  4644	775437     603 13 0 00 777777 		TLNE P4,-1		;DONE 256K?
  4645	775440     263 17 0 00 000000 		RET
  4646	775441     260 17 0 00 775356 		CALL TSTADR		;NO - TEST IF ADDRESS LEGAL
  4647	775442     254 00 0 00 775436 		JRST CLR.NP		;NOT LEGAL - TRY NEXT PAGE
  4648	775443     200 01 0 00 000013 		MOVE T1,P4		;COPY ADDRESS
  4649	775444     620 01 0 00 000777 		TRZ T1,777		;CLEAR LOW ORDER BITS
  4650
  4651						;This test is to protect against zeroing DDT (when loaded)
  4652					IFN BDEBUG,<
  4653	775445     301 01 0 00 260000 		CAIL T1,<DDTPG1_9>	;Is this page within the DDT interval?
  4654	775446     303 01 0 00 320000 		CAILE T1,<DDTPGL_9>	;...
  4655	775447     334 00 0 00 000000 		SKIPA			;No
  4656	775450     254 00 0 00 775436 		JRST CLR.NP		;Yes, lets not wipe DDT
  4657						>			;End IFN BDEBUG
  4658
  4659	775451     336 00 0 00 000001 		SKIPN T1		;PAGE ZERO?
  4660	775452     201 01 0 00 000020 		MOVEI T1,LCORAD		;YES - START AT LOC LCORAD
  4661	775453     402 00 0 01 000000 	CLR.NW:	SETZM (T1)		;CLEAR A WORD OF THE PAGE
  4662	775454     305 01 0 13 000000 		CAIGE T1,(P4)		;DONE?
  4663	775455     344 01 0 00 775453 		AOJA T1,CLR.NW		;NO - LOOP FOR MORE OF THIS PAGE
  4664	775456     254 00 0 00 775436 		JRST CLR.NP		;YES - LOOP FOR MORE
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 121
BOOT	MAC	16-Feb-88 20:26		Get Non-EXE File From Disk

  4665						SUBTTL Get Non-EXE File From Disk
  4666
  4667					IFE FT.EXE, <
  4668					
  4669					;ROUTINE TO GET A FILE FROM DISK TO MEMORY
  4670					;THE VIRTUAL ADDRESSES NEEDED BY THE FILE ARE ASSUMED
  4671					;TO HAVE BEEN MAPPED BY THE CALLER
  4672					
  4673					GET:	SETZM MONFLG		;INDICATE NO SPECIAL ASSUMPTIONS ABOUT FILE
  4674						MOVEI P4,A%FP0		;READ FILE PAGE ZERO
  4675						MOVE P5,A%XB		; DISK ADDR FROM XB
  4676						CALL REDPAG		;READ THE PAGE
  4677						 $ERROR (IOER6)		;CAN'T READ DIRECTORY PAGE
  4678					
  4679						HLRZ T1,A%FP0		;CHECK FORMAT CODE
  4680						CAIE T1,1000		;CODE OK?
  4681						 $ERROR (FILNEF)	;NO
  4682						TLNE F,(F.CLR)		;CLEAR CORE?
  4683						CALL CLRCOR		;YES - CALL SUBR
  4684						MOVN P1,A%FP0		;OK - GET COUNT OF PAGES
  4685						HRLZS P1		;BUILD POINTER WORD
  4686						HRRI P1,A%FP0+1		;FIRST DATA WORD
  4687					
  4688					GET.NP:	MOVE T1,(P1)		;GET PAGE DESCRIPTOR
  4689						MOVE P5,A%XB(T1)	;GET DISK ADDRESS OF PAGE
  4690						LDB P4,[POINT 9,T1,17]	;GET MEMORY PAGE ADDR
  4691						LSH P4,9		;CONVERT PAGE NO. TO ADDRESS
  4692						CALL TSTADR		;CHECK IF ADDRESS IS LEGAL
  4693						 JRST GT.NP1		;NO - SKIP READ
  4694						CALL REDPAG		;READ THE PAGE
  4695						 $ERROR (IOER7)		;CAN'T READ DATA PAGE
  4696					GT.NP1:	AOBJN P1,GET.NP		;BACK FOR MORE
  4697					
  4698						SKIPG P3,(P1)		;IF POSITIVE, IS IMMED. ADDR
  4699						MOVE P3,(P3)		;IF NEG, IS POINTER
  4700						CALLRET SETSA		;SET STARTING ADDR AND RETURN
  4701					
  4702					>				; END OF IFE FT.EXE
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 122
BOOT	MAC	16-Feb-88 20:26		Get EXE File From Disk

  4703						SUBTTL Get EXE File From Disk
  4704
  4705					IFN FT.EXE, <
  4706
  4707					; EXE BLOCK TYPE DISPATCH TABLE
  4708
  4709	775457     001776  775504	EXETAB:	.EXDIR ,, G.DIR
  4710	775460     001777  773531		.EXEND ,, R
  4711	775461     001775  775622		.EXENT ,, G.ENT
  4712	775462     001774  775631		.EXPDV ,, G.PDV
  4713		   	   000004		EXESIZ==.-EXETAB
  4714
  4715					; ROUTINE TO GET A FILE FROM DISK TO MEMORY.  READS EXE FORMAT FILES.
  4716
  4717					GET:	IFN FT.MTA,<		;ONLY FOR MAGTAPE
  4718						SETOM XBNUM		;Only "short" files on mag tape
  4719						SKIPE DIRFLG		;EXE DIRECTORY READ YET ?
  4720						JRST G.CLR		;YES, DO NOT READ IT AGAIN
  4721						SETOM DIRFLG		;NO, INDICATE WE HAVE READ EXE DIR
  4722					   >				;END OF IFN FT.MTA CONDITIONAL
  4723	775463     402 00 0 00 772126 		SETZM FILPAG		;INITIALIZE FILE PAGE #
  4724	775464     201 13 0 00 771000 		MOVEI P4,A%FP0		;READ INTO FILE PAGE 0
  4725	775465     200 14 0 00 770000 		MOVE P5,A%XB+0		;EXE DIRECTORY IS PAGE 0 OF FILE
  4726	775466     260 17 0 00 774643 		CALL REDPAG		;READ THE EXE DIRECTORY PAGE
  4727	775467     254 00 0 00 777033 		 $ERROR (IOER6)		;CAN'T READ DIRECTORY PAGE
  4728
  4729
  4730	775470   			G.CLR:				; ** REMOVED NEXT 2 INSTRUCTIONS UNTIL MAP INSTR FIXED **
  4731
  4732	775470     603 00 0 00 100000 		TXNE F,F.CLR		;CLEAR CORE ?
  4733	775471     260 17 0 00 775435 		CALL CLRCOR		;YES, GO ZERO SOME MEMORY
  4734
  4735	775472     201 10 0 00 771000 		MOVEI P1,A%FP0		;INITIALIZE EXE DIRECTORY POINTER
  4736	775473     554 01 0 10 000000 	G.DSP:	HLRZ T1,(P1)		;GET BLOCK TYPE FROM DIRECTORY
  4737	775474     205 02 0 00 777774 		MOVSI T2,-EXESIZ	;FORM AOBJN POINTER TO TYPE TABLE
  4738	775475     554 03 0 02 775457 	G.DSP1:	HLRZ T3,EXETAB(T2)	;GET A KNOWN BLOCK TYPE CODE
  4739	775476     316 03 0 00 000001 		CAMN T3,T1		;FOUND A VALID BLOCK TYPE ?
  4740	775477     254 00 0 00 775502 		JRST G.GO		;YES, GO PROCESS THE BLOCK
  4741	775500     253 02 0 00 775475 		AOBJN T2,G.DSP1		;NO, GO CHECK REMAINING VALID CODES
  4742	775501     254 00 0 00 776552 		 $ERROR (FILNEF)	;BAD FORMAT
  4743
  4744	775502     550 01 0 02 775457 	G.GO:	HRRZ T1,EXETAB(T2)	;GET ADDRESS OF PROCESSING ROUTINE
  4745	775503     254 00 0 01 000000 		JRST (T1)		;GO PROCESS BLOCK
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 123
BOOT	MAC	16-Feb-88 20:26		Get EXE File From Disk -- Directory Block

  4746						SUBTTL Get EXE File From Disk -- Directory Block
  4747
  4748					; HERE TO PROCESS EXE FILE DIRECTORY BLOCK
  4749
  4750	775504     550 11 0 10 000000 	G.DIR:	HRRZ P2,(P1)		;GET # OF WORDS IN EXE DIRECTORY
  4751	775505     275 11 0 00 000001 		SUBI P2,1		;GET # OF WORDS IN DIRECTORY - 1
  4752	775506     271 10 0 00 000001 		ADDI P1,1		;POINT TO FIRST 2-WORD DESCRIPTOR
  4753
  4754	775507     135 06 0 00 777035 	G.DIR0:	LOAD Q2,DIRPT,(P1)	;GET REPEAT COUNT
  4755	775510     271 06 0 00 000001 		ADDI Q2,1		;GET # OF PAGES TO READ
  4756	775511     135 13 0 00 777036 		LOAD P4,DIPRO,(P1)	;GET PROCESS PAGE #
  4757	775512     242 13 0 00 000011 		LSH P4,9		;CONVERT PAGE # TO ADDRESS
  4758	775513     135 05 0 00 777037 		LOAD Q1,DIFIL,(P1)	;GET FILE PAGE #
  4759	775514     621 00 0 00 200000 	G.DIR1:	TXZ F,F.PHYS		;ASSUME VIRTUAL ADDRESS
  4760	775515     337 00 0 00 772354 		SKIPG MONLOD		;DON'T DO THIS IF NOT FIRST PASS OF LOAD
  4761	775516     307 13 0 00 777777 		CAIG P4,777777		;IS THIS PAGE BEYOND OUR 1-SECTION
  4762									; VIRTUAL SPACE?
  4763	775517     254 00 0 00 775521 		JRST G.DIR8		;NO
  4764	775520     661 00 0 00 200000 		TXO F,F.PHYS		;YES, CONSIDER IT PHYSICAL
  4765	
  4766	775521     322 05 0 00 775567 	G.DIR8:	JUMPE Q1,G.DIR4		;ALL ZERO PAGE, HANDLE SPECIALLY
  4767	775522     201 01 0 00 775356 		MOVEI T1,TSTADR		;ASSUME THIS IS OUR CHECK ROUTINE
  4768	775523     603 00 0 00 200000 		TXNE F,F.PHYS		;ARE WE WRITING TO A PHYSICAL PAGE?
  4769	775524     201 01 0 00 775321 		MOVEI T1,GETPHY		;YES, USE THIS ROUTINE
  4770	775525     260 17 0 01 000000 		CALL (T1)		;GO SEE IF MEMORY ADDRESS IS LEGAL
  4771	775526     254 00 0 00 775560 		  JRST G.DIR2		;NOT LEGAL, GO TRY NEXT PAGE
  4772
  4773					   IFN FT.MTA,<			;DOING MAGTAPE?
  4774						CAMGE Q1,FILPAG		;READING PAGE ALREADY PASSED ?
  4775						 $ERROR (FILNEF)	;YES, CANNOT GO BACKWARDS ON TAPE
  4776						CAMLE Q1,FILPAG		;NEED NEXT SEQUENTIAL PAGE IN FILE ?
  4777						JRST [	PUSH P,P4	;NO, SAVE CORE ADDRES
  4778							MOVEI P4,A%DIR	;GET A USELESS PAGE FOR DUMMY READ
  4779							CALL REDPAG	;READ NEXT SEQUENTIAL PAGE
  4780							 $ERROR (IOER7)	;ERROR READING PAGE
  4781							POP P,P4	;RESTORE ORIGINAL CORE ADDRESS
  4782							JRST G.DIR1 ]	;GO TRY AGAIN
  4783					   >				;END OF IFN FT.MTA
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 124
BOOT	MAC	16-Feb-88 20:26		Get EXE File From Disk -- Directory Block

  4784
  4785	775527     335 00 0 00 772145 		SKIPGE XBNUM		;Long or short file?
  4786	775530     254 00 0 00 775550 		JRST LODPAG		;Short, we always have correct XB
  4787	775531     135 01 0 00 777040 		LDB T1,[POINT 18,Q1,26]	;Get index-block # for this file page
  4788	775532     316 01 0 00 772145 		CAMN T1,XBNUM		;Correct XB currently loaded?
  4789	775533     254 00 0 00 775550 		JRST LODPAG		;Yes
  4790	775534     135 14 0 00 777041 		LOAD P5,IDXADR,A%SXB(T1) ;No, get the disk address of the correct one
  4791	775535     337 00 0 00 000014 		SKIPG P5		;Do we have an address?
  4792	775536     254 00 0 00 776552 		 $ERROR(FILNEF)		;EXE directory data and super-index block
  4793									; do not agree
  4794	775537     202 01 0 00 772145 		MOVEM T1,XBNUM		;Set up XB # for soon-to-be loaded XB
  4795	775540     261 17 0 00 000013 		PUSH P,P4		;Save P4
  4796	775541     261 17 0 00 000000 		PUSH P,F		;Save flags
  4797	775542     621 00 0 00 200000 		TXZ F,F.PHYS		;Do virtual read for XB
  4798	775543     201 13 0 00 770000 		MOVEI P4,A%XB		;Load XB here
  4799	775544     260 17 0 00 774643 		CALL REDPAG		;Load it
  4800	775545     254 00 0 00 776554 	 	 $ERROR(IOER3)		;Failed
  4801	775546     262 17 0 00 000000 		POP P,F			;Recover F
  4802	775547     262 17 0 00 000013 		POP P,P4		;Recover P4	
  4803	775550     200 01 0 00 000005 	LODPAG:	MOVE T1,Q1		;Get file page number
  4804	775551     405 01 0 00 000777 		ANDI T1,777		;Keep only section-relative page #
  4805	775552     200 14 0 01 770000 		MOVE P5,A%XB(T1)	;GET DISK ADDRESS FROM INDEX BLOCK
  4806	775553     260 17 0 00 774643 		CALL REDPAG		;READ A DATA PAGE FROM EXE FILE
  4807	775554     254 00 0 00 777042 		 $ERROR (IOER7)		;ERROR READING PAGE
  4808	775555     326 13 0 00 775560 		JUMPN P4,G.DIR2		;PAGE ZERO?
  4809	775556     336 00 0 00 772354 		SKIPN MONLOD		;PASS ZERO?
  4810	775557     260 17 0 00 775634 		CALL CHKPG0		;YES
  4811	775560     363 06 0 00 775563 	G.DIR2:	SOJLE Q2,G.DIR3		;DECREMENT REPEAT COUNT, LOOP IF MORE
  4812	775561     271 13 0 00 001000 		ADDI P4,1000		;NO MORE. POINT TO NEXT PROCESS PAGE
  4813	775562     344 05 0 00 775514 		AOJA Q1,G.DIR1		;GO READ NEXT PAGE OF EXE FILE.
  4814
  4815	775563     271 10 0 00 000002 	G.DIR3:	ADDI P1,.DISIZ		;POINT TO NEXT DESCRIPTOR
  4816	775564     275 11 0 00 000002 		SUBI P2,.DISIZ		;DECREMENT DIRECTORY BLOCK WORD COUNT
  4817	775565     322 11 0 00 775473 		JUMPE P2,G.DSP		;GO PROCESS NEXT BLOCK IF DONE
  4818	775566     254 00 0 00 775507 		JRST G.DIR0		;GO READ NEXT SET OF PAGES FROM EXE FILE
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 125
BOOT	MAC	16-Feb-88 20:26		Get EXE File From Disk -- Directory Block

  4819
  4820					;[7.1001] Here when .EXE directory entry wants a zero page 
  4821
  4822	775567     603 00 0 00 200000 	G.DIR4:	TXNE F,F.PHYS		;[7.1001] ARE WE WRITING TO A PHYSICAL PAGE?
  4823	775570     254 00 0 00 775600 		IFSKP.			;[7.1001] 
  4824	775571     260 17 0 00 775356 		  CALL TSTADR		;[7.1001] (P4/) NO - CHECK THE PAGE 
  4825	775572     254 00 0 00 775603 	 	    JRST G.DIR5		;[7.1001] BAD PAGE, DO NOT CLEAR IT
  4826	775573     402 00 0 13 000000 		  SETZM (P4)		;[7.1001] CLEAR FIRST WORD OF PAGE
  4827	775574     205 01 0 13 000000 		  MOVSI T1,(P4)		;[7.1001] GET START ADDRESS FOR BLT
  4828	775575     541 01 0 13 000001 		  HRRI T1,1(P4)		;[7.1001] GET DESTINATION ADDRESS FOR BLT
  4829	775576     251 01 0 13 000777 		  BLT T1,777(P4)	;[7.1001] CLEAR PAGE TO ZEROS
  4830	775577     254 00 0 00 775603 		ELSE.			;[7.1001] 
  4831	775600     260 17 0 00 775321 		  CALL GETPHY		;[7.1001] (P4/) YES - CHECK THE PHYSICAL ADDRESS
  4832	775601     254 00 0 00 775603 	 	    JRST G.DIR5		;[7.1001] BAD PAGE, DO NOT CLEAR IT
  4833	775602     260 17 0 00 775604 		  CALL PHYZRO		;[7.1001] (P4/) CLEAR OUT THE PHYSICAL PAGE
  4834	775603   				ENDIF.
  4835	775603     364 05 0 00 775560 	G.DIR5:	SOJA Q1,G.DIR2		;GO SEE IF MORE PAGES TO CLEAR
  4836
  4837					;[7.1001] PHYZRO - Clears out a page which is beyond what BOOT can normally 
  4838					;       access (ie any page above 777). This code temporarily puts
  4839					;	the physical address into the "test" page slot to reference
  4840					;	it as virtual and then uses XBLT to clear the page.
  4841					;
  4842					;Call with P4/ address
  4843					;
  4844					;Returns + 1 always
  4845
  4846	775604     200 01 0 00 766741 	PHYZRO:	MOVE T1,TSTSLT		;GET EXISTING PAGE TABLE ENTRY
  4847	775605     202 01 0 00 772127 		MOVEM T1,SAVSLT		;SAVE IT AWAY
  4848	775606     200 01 0 00 000013 		MOVE T1,P4		;GET ADDRESS
  4849	775607     242 01 0 00 777767 		LSH T1,-^D9		;MAKE INTO A PAGE
  4850	775610     661 01 0 00 124000 		TXO T1,IMMPTR		;FORM IMMEDIATE POINTER (+WRITE+CACHE)
  4851	775611     202 01 0 00 766741 		MOVEM T1,TSTSLT		;MAP P4'S ADDRESS THRU TEST PAGE
  4852	775612     701 02 0 00 741000 		CLRPT TSTADD		;CLEAR PAGER ENTRY FOR TSTADD PAGE
  4853	775613     402 00 0 00 741000 		SETZM TSTADD		;CLEAR FIRST WORD OF PAGE
  4854	775614     200 01 0 00 777044 		MOVE T1,[TSTADD,,TSTADD+1] ;SET UP FOR BLT
  4855	775615     251 01 0 00 741777 		BLT T1,TSTADD+777	;CLEAR THE PAGE
  4856	775616     200 01 0 00 772127 		MOVE T1,SAVSLT		;GET ORIGINAL TSTSLT CONTENTS
  4857	775617     202 01 0 00 766741 		MOVEM T1,TSTSLT		;RESTORE ORIGINAL MAP ENTRY
  4858	775620     701 02 0 00 741000 		CLRPT TSTADD		;CLEAR PAGER ENTRY FOR TSTADD PAGE
  4859	775621     263 17 0 00 000000 		RET			;FINISHED
  4860
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 126
BOOT	MAC	16-Feb-88 20:26		Get EXE File From Disk -- Directory Block

  4861
  4862
  4863					COMMENT %
  4864						Used to analyze errors in page selection/rejection logic.
  4865						Can get a bit tedious on 2-pass loads
  4866
  4867						;Routine to report when we couldn't or wouldn't load a page
  4868					LODERR:	PUSH P,Q1		;Save the Q's
  4869						PUSH P,Q2
  4870						PUSH P,Q3
  4871						CALL CRLF
  4872						MOVE Q2,ERRPFX
  4873						CALL OUTSTR
  4874						MOVEI Q2,[ASCIZ/Failed to load file page /]
  4875						CALL OUTSTR
  4876						MOVE Q2,-2(P)		;Get file page from saved copy of Q1
  4877						CALL OUTOCT		;Output it
  4878						MOVEI Q2,[ASCIZ/ to memory page /]
  4879						CALL OUTSTR
  4880						MOVE Q2,P4		;Get process page
  4881						LSH Q2,-9		;Convert to page
  4882						CALL OUTOCT		;Output it
  4883						CALL CRLF		;Terminate line
  4884						POP P,Q3		;Restore Q's
  4885						POP P,Q2
  4886						POP P,Q1
  4887						RET		%	;End comment
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 127
BOOT	MAC	16-Feb-88 20:26		Get EXE File From Disk --  Entry Vector/PDV Blocks

  4888						SUBTTL Get EXE File From Disk --  Entry Vector/PDV Blocks
  4889
  4890						;HERE TO PROCESS ENTRY VECTOR BLOCK
  4891
  4892	775622     336 00 0 10 000001 	G.ENT:	SKIPN 1(P1)		;ENTRY VECTOR SIZE NON-ZERO ?
  4893	775623     254 00 0 00 776552 		 $ERROR (FILNEF)	;NO, BAD FILE FORMAT
  4894	775624     200 12 0 10 000002 		MOVE P3,2(P1)		;YES, GET START ADDRESS
  4895	775625     260 17 0 00 774236 		CALL SETSA		;GO SET STARTING ADDRESS
  4896	775626     550 01 0 10 000000 		HRRZ T1,(P1)		;GET SIZE OF ENTRY VECTOR BLOCK
  4897	775627     270 10 0 00 000001 		ADD P1,T1		;UPDATE POINTER INTO EXE DIRECTORY
  4898	775630     254 00 0 00 775473 		JRST G.DSP		;GO HANDLE NEXT EXE FILE BLOCK
  4899
  4900						;Here to process PDV block
  4901	775631     550 01 0 10 000000 	G.PDV:	HRRZ T1,(P1)		;GET SIZE OF PDV BLOCK
  4902	775632     270 10 0 00 000001 		ADD P1,T1		;UPDATE POINTER INTO EXE DIRECTORY
  4903	775633     254 00 0 00 775473 		JRST G.DSP		;GO HANDLE NEXT EXE FILE BLOCK
  4904
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 128
BOOT	MAC	16-Feb-88 20:26		Get EXE File From Disk -- Check Memory Page 0

  4905						SUBTTL Get EXE File From Disk -- Check Memory Page 0
  4906
  4907						COMMENT %
  4908					Routine to read memory page zero of .EXE file and set BOOT parameters
  4909					accordingly.
  4910
  4911					This routine has 2 different behaviors, depending on the version number of
  4912					the monitor.  In V6 and later monitors, this routine reads data from
  4913					the BOOT communications region in the .EXE file and sets various BOOT
  4914					parameters.
  4915
  4916					For older monitors, or non-monitor .EXE files, BOOT behaves as follows:
  4917
  4918					If .JBSYM is non-zero, BOOT will not load in any pages above the
  4919					end of the symbol table, unless specific page-limits are specified in
  4920					the command.  BOOT uses this feature to load only that portion of the
  4921					monitor up to the end of the symbols.  MEXEC will then specify a page-range
  4922					in order to get the swappable monitor loaded.
  4923
  4924						%	;End comment
  4925
  4926	775634     200 01 0 00 000200 	CHKPG0:	MOVE T1,BUTCOD		;Get the code
  4927	775635     312 01 0 00 777045 		CAME T1,[BTCOD]		;Correct?
  4928	775636     254 00 0 00 775657 		JRST CHGLIM		;No, older-style load
  4929	775637     135 01 0 00 777046 		LDB T1,[POINT 6,137,11]	;Get the major version
  4930	775640     303 01 0 00 000006 		CAILE T1,M%MAJ		;Above the threshold version?
  4931	775641     254 00 0 00 775652 		JRST SETLIM		;Yes, do new-style load
  4932	775642     302 01 0 00 000006 		CAIE T1,M%MAJ		;At the threshold version?
  4933	775643     254 00 0 00 775657 		JRST CHGLIM		;No, older-style load
  4934	775644     135 01 0 00 777047 		LDB T1,[POINT 6,137,17] ;Get the minor version
  4935	775645     303 01 0 00 000000 		CAILE T1,M%MIN		;The threshold minor version?
  4936	775646     254 00 0 00 775652 		JRST SETLIM		;Above it, do new-style load
  4937	775647     550 01 0 00 000137 		HRRZ T1,137		;Get the edit number
  4938	775650     305 01 0 00 006070 		CAIGE T1,M%EDT		;The threshold edit?
  4939	775651     254 00 0 00 775657 		JRST CHGLIM		;No, older-style load
  4940
  4941	775652     200 01 0 00 000203 	SETLIM:	MOVE T1,BUTLLM		;Get the lower load limit
  4942	775653     202 01 0 00 772114 		MOVEM T1,LWRLIM		;Set it
  4943	775654     200 01 0 00 000204 		MOVE T1,BUTULM		;Get the upper load limit
  4944	775655     202 01 0 00 772115 		MOVEM T1,UPRLIM		;Set it
  4945	775656     263 17 0 00 000000 		RET
  4946
  4947	775657     607 00 0 00 000200 	CHGLIM:	TXNN F,F.NCHL		;DON'T WANT TO CHANGE THE LIMITS?
  4948	775660     336 01 0 00 000116 		SKIPN T1,.JBSYM		;OR HAVE NO SYMBOL POINTER?
  4949	775661     263 17 0 00 000000 		RET			;YES, DO NOTHING
  4950	775662     574 02 0 00 000001 		HLRE T2,T1		;GET NEGATIVE LENGTH
  4951	775663     274 01 0 00 000002 		SUB T1,T2		;COMPUTE ADDRESS RIGHT AFTER SYMBOL TABLE
  4952	775664     201 01 0 01 777777 		MOVEI T1,-1(T1)		;BACK OFF TO LAST ADDRESS TO READ
  4953	775665     242 01 0 00 777767 		LSH T1,-^D9		;CONVERT TO PAGE NUMBER
  4954	775666     202 01 0 00 772115 		MOVEM T1,UPRLIM		;SET NEW UPPER LIMIT
  4955	775667     263 17 0 00 000000 		RET			;DONE
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 129
BOOT	MAC	16-Feb-88 20:26		Save Memory on DUMP.EXE

  4956						SUBTTL Save Memory on DUMP.EXE
  4957
  4958					IFE FT.MTA, <
  4959					;Routine called to write the DUMP.EXE file on the structure pointed to
  4960					;by STRNAM
  4961
  4962	775670     200 06 0 00 772250 	SAVE:	MOVE Q2,MSGHDR		;Get message header
  4963	775671     260 17 0 00 774305 		CALL OUTSTR		;Display it
  4964	775672     201 06 0 00 777050 		MOVEI Q2,[ASCIZ/Dumping] /] ;[7.1228] 
  4965	775673     260 17 0 00 774305 		CALL OUTSTR		;Write out something to make me feel good
  4966	775674     201 01 0 00 000062 		MOVEI T1,NDMPM		;Get report limit for dump errors
  4967	775675     202 01 0 00 772243 		MOVEM T1,DERCNT		;Keep it here
  4968	775676     402 00 0 00 772145 		SETZM XBNUM		;XB #0 already mapped
  4969	775677     402 00 0 00 772123 		SETZM IOCNTR		;Count of number of calls to WRTPAG
  4970	775700     402 00 0 00 772124 		SETZM PGCNTR		;Count of number of pages written
  4971	775701     402 00 0 00 771000 		SETZM A%FP0		;Zero out directory page 
  4972	775702     200 01 0 00 776254 		MOVE T1,[A%FP0,,A%FP0+1]; ...
  4973	775703     251 01 0 00 771777 		BLT T1,A%FP0+777	; ...
  4974	775704     476 00 0 00 771000 		SETOM A%FP0		;Flag to say directory page not created yet
  4975	775705     661 00 0 00 200000 		TXO F,F.PHYS		;Say we are using physical addresses
  4976	775706     402 00 0 00 000001 		SETZM T1		;Start at page 0
  4977
  4978	775707     261 17 0 00 000001 	SAV.LP:	PUSH P,T1		;Save starting physical page number
  4979	775710     260 17 0 00 775733 		CALL GETPGS		;Go get set of contiguous pages
  4980	775711     326 02 0 00 775714 		JUMPN T2,SAV.WR		;[7.1228] Write some
  4981	775712     262 17 0 00 000001 		POP P,T1		;[7.1228] Restore the page
  4982	775713     344 01 0 00 775725 		AOJA T1,SAV.EX		;[7.1228] Try next page next time
  4983
  4984	775714     242 13 0 00 000011 	SAV.WR:	LSH P4,^D9		;[7.1228] Shift page number to an address
  4985	775715     261 17 0 00 000002 		PUSH P,T2		;Save number of pages to write
  4986	775716     260 17 0 00 774623 		CALL WRTPAG		;Go write the pages
  4987	775717     262 17 0 00 000002 		POP P,T2		;Get back count of pages
  4988	775720     262 17 0 00 000001 		POP P,T1		;Starting page number
  4989	775721     260 17 0 00 776052 		CALL MAKDIR		;Set up dir page info
  4990	775722     350 00 0 00 772123 		AOS IOCNTR		;Increment counter of IO requests
  4991	775723     272 02 0 00 772124 		ADDM T2,PGCNTR		;Count up how many pages we have written
  4992	775724     270 01 0 00 000002 		ADD T1,T2		;Get address of first page in next group
  4993	775725     313 01 0 00 772146 	SAV.EX:	CAMLE T1,HIADDR		;Higher than we have?
  4994	775726     254 00 0 00 776100 		JRST WRTDIR		;Yes - done, go write out directory page
  4995	775727     315 01 0 00 772357 		CAMGE T1,DEXEPC		;Is there room in the file for another page?
  4996	775730     254 00 0 00 775707 		JRST SAV.LP		;Yes - go get next set
  4997	775731     661 00 0 00 000002 		TXO F,F.DPER		;No - say so
  4998	775732     254 00 0 00 776100 		JRST WRTDIR		;Write directory page and finish up
  4999
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 130
BOOT	MAC	16-Feb-88 20:26		Save Memory on DUMP.EXE -- Get Set of Pages to Write

  5000						SUBTTL Save Memory on DUMP.EXE -- Get Set of Pages to Write
  5001
  5002					;GETPGS - Get a set of contiguous pages to write out
  5003					;Accepts T1/ Physical page to start checking at
  5004					;
  5005					;Returns +1   P4/ Physical memory page to start writing
  5006					;	      T2/ Number of pages to write
  5007					;	      P5/ Disk address to write to
  5008					;
  5009					;Use of ACs herein:
  5010					;		T1 - Physical page we are checking out
  5011					;		T2 - Current cylinder
  5012					;		T3 - Current sector - to check if it is contiguous
  5013					;		T4 - Offset into index block
  5014					;		P1 - Copy of T1 at call, incremented each time thru loop
  5015					;			this value is passed to CHKADR
  5016					;		P2 - Number of pages to write
  5017					;		Q3 - Last page address returned by CHKADR
  5018					;			this value is used to compare against the next
  5019					;			value returned by CHKADR, to see if we have
  5020					;			consecutive pages
  5021
  5022	775733     261 17 0 00 000001 	GETPGS:	PUSH P,T1		;Save physical page we are looking at
  5023	775734     350 04 0 00 000001 		AOS T4,T1		;Increment it and move to T4
  5024	775735     242 01 0 00 777767 		LSH T1,-^D9		;Determine which XB is needed
  5025	775736     260 17 0 00 776030 		CALL MAPXB		;And go get it
  5026	775737     262 17 0 00 000001 		POP P,T1		;Get back physical page we are looking at
  5027	775740     402 00 0 00 000011 		SETZM P2		;Zero out page counter
  5028	775741     405 04 0 00 000777 		ANDI T4,777		;Keep just low order bits
  5029	775742     135 02 0 00 777052 		LOAD T2,IDXADR,A%XB(T4) ;Get disk address for this page
  5030	775743     322 02 0 00 773531 		JUMPE T2,R		;[7.1228] Can't write this page if not address
  5031	775744     261 17 0 00 000002 		PUSH P,T2		;Save disk address to write
  5032	775745     202 01 0 00 000010 		MOVEM T1,P1		;Store physical page number to check out
  5033	775746     260 17 0 00 776005 		CALL CHKADR		;See if we should write page in T1 or
  5034									; if CHKADR tells us to write some other page
  5035	775747     254 00 0 00 776000 		 JRST DONE		;Can't write this page
  5036	775750     350 00 0 00 000011 		AOS P2			;Increment page counter, OK to write one page
  5037	775751     322 01 0 00 775777 		JUMPE T1,DONE0		;[7.1228] If page 0 write it out separately
  5038	775752     230 02 0 00 772225 		IDIV T2,DEVDSP+N.SCL	;Isolate cyl/sect in T2/T3
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 131
BOOT	MAC	16-Feb-88 20:26		Save Memory on DUMP.EXE -- Get Set of Pages to Write

  5039
  5040					;Check the next page to see if it fits in this group of pages
  5041
  5042	775753     202 01 0 00 000007 	CHKNXT:	MOVEM T1,Q3		;Save page number returned by CHKADR
  5043	775754     350 01 0 00 000010 		AOS T1,P1		;Determine next page to check out
  5044	775755     313 01 0 00 772146 		CAMLE T1,HIADDR		;Higher than we have?
  5045	775756     254 00 0 00 776000 		JRST DONE		;Yes - done with this group
  5046	775757     350 00 0 00 000004 		AOS T4			;Increment XB index
  5047	775760     303 04 0 00 000777 		CAILE T4,777		;Are we into next XB yet?
  5048	775761     260 17 0 00 776021 		CALL NEXTXB		;Go get next XB
  5049	775762     135 05 0 00 777052 		LOAD Q1,IDXADR,A%XB(T4) ;Get disk address for next page
  5050	775763     322 05 0 00 776000 		JUMPE Q1,DONE		;[7.1228] Done if not a real disk address
  5051	775764     230 05 0 00 772225 		IDIV Q1,DEVDSP+N.SCL	;Get Sec/Cyl in Q1/Q2
  5052	775765     312 05 0 00 000002 		CAME Q1,T2		;Same cylinder?
  5053	775766     254 00 0 00 776000 		JRST DONE		;No - can't add this page to group
  5054	775767     270 03 0 00 772227 		ADD T3,DEVDSP+N.BPP	;Add number of blocks per page
  5055	775770     316 06 0 00 000003 		CAMN Q2,T3		;Same sector?
  5056	775771     260 17 0 00 776005 		CALL CHKADR		;See if page is OK to write
  5057	775772     254 00 0 00 776000 		 JRST DONE		;Don't write out this page
  5058	775773     307 11 0 00 000137 		CAIG P2,MXPDMP		;[7.1228] Is it over the amount to dump?
  5059	775774     302 01 0 07 000001 		CAIE T1,1(Q3)		;Is this the next contiguous page?
  5060	775775     254 00 0 00 776000 		JRST DONE		;No - don't write it out then
  5061
  5062					;Have to check here if T2.G.1020. pages. If so - have to make several write
  5063					;requests - currently impossible, as no disks have cylinders that large
  5064 
  5065	775776     344 11 0 00 775753 		AOJA P2,CHKNXT		;Add this page to group and check next page
  5066
  5067					;Done with this group - return proper arguments
  5068
  5069	775777     202 01 0 00 000007 	DONE0:	MOVEM T1,Q3		;[7.1228] Here if page 0
  5070	776000     200 13 0 00 000007 	DONE:	MOVE P4,Q3		;Get starting page number to write out
  5071	776001     275 13 0 11 777777 		SUBI P4,-1(P2)		; by subtracting amount-1 from last page
  5072	776002     200 02 0 00 000011 		MOVE T2,P2		;Get number of pages to write
  5073	776003     262 17 0 00 000014 		POP P,P5		;Get starting disk address
  5074	776004     263 17 0 00 000000 		RET
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 132
BOOT	MAC	16-Feb-88 20:26		Save Memory on DUMP.EXE -- Should Page be Written?

  5075						SUBTTL Save Memory on DUMP.EXE -- Should Page be Written?
  5076
  5077					;CHKADR - Routine to determine if page should be written out
  5078					;It may return the address of another page to write out, as in the
  5079					;case where BOOT has moved itself and saved what it clobberred. In this
  5080					;case, CHKADR returns the page number of the page that SHOULD be in
  5081					;the page we have called CHKADR to check out (i.e. the page that should
  5082					;be written out in the place of this page)
  5083					;Called with T1/ Phys. Memory address
  5084					;Returns +1/ Don't write this page
  5085					;	 +2/ Write a page (may not be the page in the call)
  5086					;		T1/ Phys. Memory address to write
  5087	776005     311 01 0 00 772233 	CHKADR:	CAML T1,LODBAS		;Where BOOT landed?
  5088	776006     313 01 0 00 772240 		CAMLE T1,MCEPAG		;In microcode pages?
  5089	776007     334 00 0 00 000000 		SKIPA			;No - continue
  5090	776010     263 17 0 00 000000 		RET			;Yes - don't write it yet
  5091	776011     311 01 0 00 772235 		CAML T1,TOPBAS		;Where BOOT now resides?
  5092	776012     313 01 0 00 772236 		CAMLE T1,TOPTOP		;...
  5093	776013     254 00 0 00 776016 		JRST CHKRET		;No - continue
  5094	776014     274 01 0 00 772235 		SUB T1,TOPBAS		;Get offset into source area
  5095	776015     270 01 0 00 772233 		ADD T1,LODBAS		;  and return the address of page that should
  5096									;  be written out in it's place
  5097	776016     260 17 0 00 775336 	CHKRET:	CALL CHKNXM		;See if page OK - NXM etc...
  5098	776017     263 17 0 00 000000 		RET			;No - return bad
  5099	776020     254 00 0 00 773530 		RETSKP			;Address is good
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 133
BOOT	MAC	16-Feb-88 20:26		Save Memory on DUMP.EXE --  Map Index Blocks

  5100						SUBTTL Save Memory on DUMP.EXE --  Map Index Blocks
  5101
  5102	776021     261 17 0 00 000001 	NEXTXB:	PUSH P,T1		;Save T1 over call
  5103	776022     200 01 0 00 772145 		MOVE T1,XBNUM		;Get current XB
  5104	776023     350 00 0 00 000001 		AOS T1			;Increment it for next one
  5105	776024     260 17 0 00 776030 		CALL MAPXB		;Map in next
  5106	776025     262 17 0 00 000001 		POP P,T1		;Get Back T1
  5107	776026     402 00 0 00 000004 		SETZM T4		;Reset XB index
  5108	776027     263 17 0 00 000000 		RET			;Return
  5109
  5110					;MAPXB T1/ Number of XB we want - clobbers T1
  5111	776030     316 01 0 00 772145 	MAPXB:	CAMN T1,XBNUM		;Is the one we want here?
  5112	776031     263 17 0 00 000000 		RET			;Yes - return
  5113	776032     261 17 0 00 000001 		PUSH P,T1
  5114	776033     261 17 0 00 000002 		PUSH P,T2
  5115	776034     261 17 0 00 000003 		PUSH P,T3
  5116	776035     261 17 0 00 000004 		PUSH P,T4
  5117	776036     202 01 0 00 772145 		MOVEM T1,XBNUM		;Store number of new XB
  5118	776037     135 14 0 00 777041 		LOAD P5,IDXADR,A%SXB(T1);Get disk address
  5119	776040     201 13 0 00 770000 		MOVEI P4,A%XB		;READ INTO XB PAGE
  5120	776041     621 00 0 00 200000 		TXZ F,F.PHYS		;Read a virtual page
  5121	776042     260 17 0 00 774643 		CALL REDPAG		;Go do it
  5122	776043     254 00 0 00 776554 		 $ERROR (IOER3)		;ERROR READING PAGE
  5123	776044     661 00 0 00 200000 		TXO F,F.PHYS		;Back to physical addressing
  5124	776045     262 17 0 00 000004 		POP P,T4
  5125	776046     262 17 0 00 000003 		POP P,T3
  5126	776047     262 17 0 00 000002 		POP P,T2
  5127	776050     262 17 0 00 000001 		POP P,T1
  5128	776051     263 17 0 00 000000 		Ret 			;And done
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 134
BOOT	MAC	16-Feb-88 20:26		Save Memory on DUMP.EXE -- Add Entry to EXE Dir Page

  5129						SUBTTL Save Memory on DUMP.EXE -- Add Entry to EXE Dir Page
  5130
  5131					;MAKDIR - Routine to add an entry to the Dir page of the EXE file
  5132					;Called with T1/ Physical page number we just wrote
  5133					;	     T2/ number of pages we just wrote
  5134					;Returns +1 OK
  5135
  5136	776052     337 03 0 00 771000 	MAKDIR:	SKIPG T3,A%FP0		;Have we started dir page yet?
  5137	776053     254 00 0 00 776066 		JRST NEWENT		;No - make first entry
  5138	776054     550 05 0 03 771001 		HRRZ Q1,A%FP0+1(T3)	;Get last process page written
  5139	776055     135 06 0 00 777053 		LOAD Q2,RPT,A%FP0+1(T3)	;Get repeat count of this entry
  5140	776056     270 05 0 00 000006 		ADD Q1,Q2		;Increment it to see
  5141	776057     302 05 0 01 777777 		CAIE Q1,-1(T1)		; if we have a contiguous set
  5142	776060     254 00 0 00 776066 		JRST NEWENT		;No - go write new entry
  5143	776061     270 06 0 00 000002 		ADD Q2,T2		;Does this group make
  5144	776062     301 06 0 00 001000 		CAIL Q2,1000		; it too big?
  5145	776063     254 00 0 00 776066 		JRST NEWENT		;Yes - new entry
  5146	776064     137 06 0 00 777053 	MAKDON:	STOR Q2,RPT,A%FP0+1(T3)	;No - increment count
  5147	776065     263 17 0 00 000000 		RET			; And done...
  5148
  5149	776066     271 03 0 00 000002 	NEWENT:	ADDI T3,.DRSIZ		;Increment index
  5150	776067     301 03 0 00 001000 		CAIL T3,PGSIZ		;Have we exceeded max size of directory page?
  5151	776070     254 00 0 00 777054 		 $ERROR(FILDRP)		;Yes - report it
  5152	776071     202 03 0 00 771000 		MOVEM T3,A%FP0		;And save for next time
  5153	776072     542 01 0 03 771000 		HRRM T1,A%FP0(T3)	;Save file page number to write
  5154	776073     350 00 0 03 771000 		AOS A%FP0(T3)		;Increment it...
  5155	776074     202 01 0 03 771001 		MOVEM T1,A%FP0+1(T3)	;Store process page number 
  5156									; (physical page address)
  5157	776075     202 02 0 00 000006 		MOVEM T2,Q2		;Get number of pages
  5158	776076     370 00 0 00 000006 		SOS Q2			;Decrement for repeat count
  5159	776077     254 00 0 00 776064 		JRST MAKDON		;And finish
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 135
BOOT	MAC	16-Feb-88 20:26		Save Memory on DUMP.EXE -- Write EXE Dir Page

  5160						SUBTTL Save Memory on DUMP.EXE -- Write EXE Dir Page
  5161
  5162					;WRTDIR - Finish directory page and write it out
  5163
  5164	776100     201 01 0 00 000002 	WRTDIR:	MOVEI T1,2		;Increment size of directory block
  5165	776101     272 01 0 00 771000 		ADDM T1,A%FP0		; ...
  5166	776102     201 01 0 00 001776 		MOVEI T1,.EXDIR		;Get directory block type
  5167	776103     506 01 0 00 771000 		STOR T1,DIDIR		;Store In EXE Directory
  5168	776104     550 07 0 00 771000 		HRRZ Q3,A%FP0		;Get size
  5169	776105     271 07 0 00 771000 		ADDI Q3,A%FP0		;Get offset into page
  5170	776106     201 01 0 00 001775 		MOVEI T1,.EXENT		;Get entry vector block type
  5171	776107     506 01 0 07 000000 		STOR T1,VBTYP,(Q3)	;Put block type in entry vector block
  5172	776110     201 01 0 00 000004 		MOVEI T1,.VBSIZ		;Get size of Entry Vector Block
  5173	776111     542 01 0 07 000000 		STOR T1,VBSIZ,(Q3)	;Store size of Entry Vector Block
  5174	776112     201 01 0 00 000001 		MOVEI T1,EVLEN		;Get length of Entry Vector
  5175	776113     202 01 0 07 000001 		STOR T1,VBCNT,(Q3)	;Store length of Entry Vector
  5176	776114     201 01 0 00 000140 		MOVEI T1,EVADR		;Get address of Entry Vector
  5177	776115     202 01 0 07 000002 		STOR T1,VBADR,(Q3)	;Store address of Entry Vector
  5178	776116     271 07 0 00 000004 		ADDI Q3,.VBSIZ		;Point to next block in EXE directory
  5179	776117     201 01 0 00 001777 		MOVEI T1,.EXEND		;Get end block type code
  5180	776120     506 01 0 07 000000 		STOR T1,EBTYP,(Q3)	;Store block type in end block
  5181	776121     201 01 0 00 000001 		MOVEI T1,.EBSIZ		;Get size of end block
  5182	776122     542 01 0 07 000000 		STOR T1,EBSIZ,(Q3)	;Store size of end block
  5183	776123     621 00 0 00 200000 		TXZ F,F.PHYS		;Turn off Physical Addresses
  5184	776124     402 00 0 00 000001 		SETZM T1		;Say we want XB 0
  5185	776125     260 17 0 00 776030 		CALL MAPXB		;And go get it mapped
  5186	776126     135 14 0 00 777056 		LOAD P5,IDXADR,A%XB+0	;Write out Page 0 of file
  5187	776127     336 00 0 00 000014 		SKIPN P5		;Complain if no Page zero
  5188	776130     254 00 0 00 776552 		 $ERROR (FILNEF)	;No page 0
  5189	776131     201 13 0 00 771000 		MOVEI P4,A%FP0		;Get core address of EXE directory
  5190	776132     201 02 0 00 000001 		MOVEI T2,1		;Say just write one page, please
  5191	776133     260 17 0 00 774636 		CALL WRTWAT		;Write directory page and wait for completion
  5192	776134     254 00 0 00 777057 		 $ERROR(IOER9)		;Error writing directory page
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 136
BOOT	MAC	16-Feb-88 20:26		Save Memory on DUMP.EXE -- Write EXE Dir Page

  5193
  5194					;File has been completely written, give a summary and return.
  5195
  5196	776135     260 17 0 00 774706 		CALL CHKIO		;Wait until all I/O has completed
  5197	776136     623 00 0 00 000002 		TXZE F,F.DPER		;Dump error?
  5198	776137     254 00 0 00 777061 		 $ERROR (DMPFTS)	;Yes - DUMP.EXE too short
  5199						MOVEI Q2,[ASCIZ/[OK]
  5200	776140     201 06 0 00 776271 	/]
  5201	776141     627 00 0 00 000001 		TXZN F,F.IOER		;Don't say OK if there were errors
  5202	776142     260 17 0 00 774305 		CALL OUTSTR
  5203						MOVEI Q2,[ASCIZ/
  5204	776143     201 06 0 00 777063 	  Number of pages written: /]
  5205	776144     260 17 0 00 774305 		CALL OUTSTR		;Output it
  5206	776145     200 06 0 00 772124 		MOVE Q2,PGCNTR		;Get number of pages
  5207	776146     260 17 0 00 774314 		CALL OUTOCT		;Output it
  5208						MOVEI Q2,[ASCIZ\
  5209	776147     201 06 0 00 777071 	  Number of I/O requests: \]
  5210	776150     260 17 0 00 774305 		CALL OUTSTR		;...
  5211	776151     200 06 0 00 772123 		MOVE Q2,IOCNTR		;Get it
  5212	776152     260 17 0 00 774314 		CALL OUTOCT		;Output it
  5213	776153     260 17 0 00 773562 		CALL CRLF
  5214	776154     263 17 0 00 000000 		RET			;ALL DONE
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 137
BOOT	MAC	16-Feb-88 20:26		Save Memory on DUMP.EXE -- Report Error

  5215						SUBTTL Save Memory on DUMP.EXE -- Report Error
  5216
  5217	776155     377 00 0 00 772243 	DMPERR:	SOSG DERCNT		;HAVE WE REACHED THE REPORT LIMIT?
  5218	776156     263 17 0 00 000000 		POPJ P,			;YES, RETURN
  5219	776157     261 17 0 00 000005 		PUSH P,Q1		;SAVE OUR AC'S
  5220	776160     261 17 0 00 000006 		PUSH P,Q2
  5221	776161     261 17 0 00 000007 		PUSH P,Q3
  5222	776162     661 00 0 00 000001 		TXO F,F.IOER		;INDICATE A WRITE ERROR OCCURRED
  5223	776163     200 01 0 00 772243 		MOVE T1,DERCNT		;GET THE LIMIT
  5224	776164     306 01 0 00 000061 		CAIN T1,NDMPM-1		;FIRST TIME THROUGH?
  5225	776165     260 17 0 00 773562 		CALL CRLF		;YES
  5226	776166     200 06 0 00 775405 		MOVE Q2,ERRPFX		;GET THE ERROR PREFIX
  5227	776167     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT IT
  5228	776170     201 06 0 00 777077 		MOVEI Q2,[ASCIZ/IO error while dumping page:  /]
  5229	776171     260 17 0 00 774305 		CALL OUTSTR		;OUTPUT IT
  5230	776172     200 01 0 00 772150 		MOVE T1,CURCHN		;Get current xferring channel 
  5231	776173     221 01 0 00 000004 		IMULI T1,4		;4 words per channel logout area
  5232	776174     135 06 0 00 777106 		LDB Q2,[POINT 13,A%EPT+2(T1),26];Get address of page 
  5233	776175     260 17 0 00 774314 		CALL OUTOCT		;OUTPUT IT
  5234	776176     260 17 0 00 773562 		CALL CRLF		;OUTPUT A CRLF
  5235	776177     260 17 0 00 774335 		CALL OUTSTS		;OUTPUT CHANNEL/DEVICE STATUS
  5236	776200     262 17 0 00 000007 		POP P,Q3		;RESTORE AC'S
  5237	776201     262 17 0 00 000006 		POP P,Q2
  5238	776202     262 17 0 00 000005 		POP P,Q1
  5239	776203     263 17 0 00 000000 		POPJ P,			;RETURN
  5240					>				; END IFE FT.MTA
  5241					>				; END OF IFN FT.EXE
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 138
BOOT	MAC	16-Feb-88 20:26		Literals

  5242						SUBTTL Literals
  5243
  5244	776204     777730  772365	PDP:	IOWD PDLEN,PDL		;Push down pointer
  5245
  5246	776205   				LIT
  5247	776205     000000  017777
  5248	776206     762000  762001
  5249	776207     7 040 7 0 00 100000 
  5250	776210     7 040 7 0 00 000017 
  5251	776211     7 040 4 0 00 000000 
  5252	776212     541 05 0 00 000030 
  5253	776213     256 00 0 00 000005 
  5254	776214     256 00 0 00 000003 
  5255	776215     254 00 0 00 772537 
  5256	776216     620 05 0 00 000010 
  5257	776217     256 00 0 00 000005 
  5258	776220     254 00 0 00 772535 
  5259	776221     7 040 4 0 05 000000 
  5260	776222     201 01 0 01 000000 
  5261	776223     242 01 0 00 000032 
  5262	776224     270 01 0 00 776221 
  5263	776225     202 01 0 00 772436 
  5264	776226     254 00 0 00 772544 
  5265	776227     000400  000000
  5266	776230     133 102 117 117 124 
  5267	776231     072 040 000 000 000 
  5268	776232     265 01 0 00 772605 
  5269	776233     077 102 117 117 124 
  5270	776234     072 040 124 162 141 
  5271	776235     160 040 141 164 040 
  5272	776236     000 000 000 000 000 
  5273	776237     102 117 117 124 040 
  5274	776240     126 000 000 000 000 
  5275	776241     772000  772001
  5276	776242     412371  752174
  5277	776243     000 0000 000000 
  5278	776244     332 00 0 00 772133 
  5279	776245     254 00 0 00 772712 
  5280	776246     254 00 0 00 772674 
  5281	776247     44 06 0 00 000011 
  5282	776250     772133  772134
  5283	776251     133 052 102 117 117 
  5284	776252     124 072 040 000 000 
  5285	776253     004000  000023
  5286	776254     771000  771001
  5287	776255     771000  771200
  5288	776256     201 06 0 00 000017 
  5289	776257     254 00 0 00 773614 
  5290	776260     201 06 0 00 000015 
  5291	776261     254 00 0 00 773614 
  5292	776262     332 00 0 00 772245 
  5293	776263     254 00 0 00 776256 
  5294	776264     254 00 0 00 776260 
  5295	776265     201 06 0 00 000016 
  5296	776266     254 00 0 00 773614 
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 138-1
BOOT	MAC	16-Feb-88 20:26		Literals

  5297	776267     400003  000000
  5298	776270     32 07 1 17 000000 
  5299	776271     133 117 113 135 015 
  5300	776272     012 000 000 000 000 
  5301	776273     123 164 141 162 164 
  5302	776274     151 156 147 000 000 
  5303	776275     155 151 143 162 157 
  5304	776276     143 157 144 145 040 
  5305	776277     126 000 000 000 000 
  5306	776300     135 040 000 000 000 
  5307	776301     660 01 0 00 011400 
  5308	776302     254 00 0 00 773266 
  5309	776303     550 03 0 00 000001 
  5310	776304     260 17 0 00 773115 
  5311	776305     405 01 0 00 177777 
  5312	776306     306 03 0 01 000000 
  5313	776307     263 17 0 00 000000 
  5314	776310     254 00 0 00 773310 
  5315	776311     550 03 0 00 000001 
  5316	776312     201 01 0 00 043411 
  5317	776313     260 17 0 00 773266 
  5318	776314     205 01 0 00 360000 
  5319	776315     260 17 0 00 773115 
  5320	776316     405 01 0 00 000377 
  5321	776317     306 03 0 01 000000 
  5322	776320     263 17 0 00 000000 
  5323	776321     254 00 0 00 773312 
  5324	776322     103 122 101 115 040 
  5325	776323     166 145 162 151 146 
  5326	776324     171 000 000 000 000 
  5327	776325     127 157 162 153 151 
  5328	776326     156 147 040 155 145 
  5329	776327     155 157 162 171 040 
  5330	776330     166 145 162 151 146 
  5331	776331     171 000 000 000 000 
  5332	776332     107 157 157 144 040 
  5333	776333     000 000 000 000 000 
  5334	776334     040 102 141 144 000 
  5335	776335     040 130 117 122 000 
  5336	776336     040 103 110 116 072 
  5337	776337     000 000 000 000 000 
  5338	776340     040 104 130 062 060 
  5339	776341     101 072 000 000 000 
  5340	776342     040 104 130 062 060 
  5341	776343     102 072 000 000 000 
  5342	776344     50 57 55 00 00 00 
  5343	776345     200 01 0 00 771203 
  5344	776346     312 01 0 00 772130 
  5345	776347     263 17 0 00 000000 
  5346	776350     254 00 0 00 773403 
  5347	776351     201 06 0 00 000020 
  5348	776352     254 00 0 00 773614 
  5349	776353     201 06 0 00 000014 
  5350	776354     254 00 0 00 773614 
  5351	776355     704000  000012
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 138-2
BOOT	MAC	16-Feb-88 20:26		Literals

  5352	776356     704000  000000
  5353	776357     004000  000007
  5354	776360     004000  000021
  5355	776361     716200  000071
  5356	776362     06 12 0 00 000004 
  5357	776363     044000  000377
  5358	776364     040 120 141 147 145 
  5359	776365     040 106 141 151 154 
  5360	776366     040 141 164 040 120 
  5361	776367     103 072 040 000 000 
  5362	776370     054 040 120 141 147 
  5363	776371     145 040 106 141 151 
  5364	776372     154 040 127 157 162 
  5365	776373     144 072 040 000 000 
  5366	776374     44 07 0 00 772056 
  5367	776375     130 130 130 000 000 
  5368	776376     201 06 0 00 776375 
  5369	776377     260 17 0 00 774305 
  5370	776400     254 00 0 00 772637 
  5371	776401     010700  772055
  5372	776402     201 05 0 00 000007 
  5373	776403     260 17 0 00 773604 
  5374	776404     262 17 0 00 000001 
  5375	776405     254 00 0 00 773536 
  5376	776406     261 17 0 00 000001 
  5377	776407     135 05 0 00 000007 
  5378	776410     561 01 0 00 777777 
  5379	776411     312 07 0 00 776401 
  5380	776412     316 07 0 00 776374 
  5381	776413     254 00 0 00 776402 
  5382	776414     133 01 0 00 000007 
  5383	776415     260 17 0 00 773604 
  5384	776416     201 05 0 00 000134 
  5385	776417     260 17 0 00 773604 
  5386	776420     202 01 0 00 000007 
  5387	776421     262 17 0 00 000001 
  5388	776422     254 00 0 00 773536 
  5389	776423     057 104 015 000 000 
  5390	776424     200 03 0 00 776423 
  5391	776425     254 00 0 00 773572 
  5392	776426     015 000 00000000 
  5393	776427     200 03 0 00 776426 
  5394	776430     254 00 0 00 773572 
  5395	776431     774770  000000
  5396	776432     072 040 040 000 000 
  5397	776433     770700  000000
  5398	776434     777000  000000
  5399	776435     772437  772440
  5400	776436     154 157 141 144 151 
  5401	776437     156 147 040 163 167 
  5402	776440     141 160 160 141 142 
  5403	776441     154 145 040 155 157 
  5404	776442     156 151 164 157 162 
  5405	776443     054 040 160 141 163 
  5406	776444     163 040 000 000 000 
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 138-3
BOOT	MAC	16-Feb-88 20:26		Literals

  5407	776445     114 157 141 144 151 
  5408	776446     156 147 135 040 000 
  5409	776447     44 07 0 00 000163 
  5410	776450     774155  772002
  5411	776451     201 06 0 00 000022 
  5412	776452     254 00 0 00 773614 
  5413	776453     000000  000741
  5414	776454     201 06 0 00 000023 
  5415	776455     254 00 0 00 773614 
  5416	776456     104 125 115 120 000 
  5417	776457     115 117 116 111 124 
  5418	776460     122 000 000 000 000 
  5419	776461     123 131 123 124 105 
  5420	776462     115 000 000 000 000 
  5421	776463     105 130 105 000 000 
  5422	776464     063 064 060 000 000 
  5423	776465     201 06 0 00 000024 
  5424	776466     254 00 0 00 773614 
  5425	776467     015 012 040 040 040 
  5426	776470     040 040 040 102 117 
  5427	776471     117 124 040 166 145 
  5428	776472     162 163 151 157 156 
  5429	776473     072 040 040 040 040 
  5430	776474     040 040 040 000 000 
  5431	776475     040 040 040 040 040 
  5432	776476     040 115 151 143 162 
  5433	776477     157 143 157 144 145 
  5434	776500     040 166 145 162 163 
  5435	776501     151 157 156 072 040 
  5436	776502     040 000 000 000 000 
  5437	776503     104 130 062 060 101 
  5438	776504     072 040 000 000 000 
  5439	776505     12 06 0 00 000001 
  5440	776506     00 12 0 00 000001 
  5441	776507     051 015 012 000 000 
  5442	776510     00 03 0 00 000005 
  5443	776511     011 103 150 141 156 
  5444	776512     156 145 154 055 163 
  5445	776513     164 141 164 165 163 
  5446	776514     040 050 103 117 116 
  5447	776515     111 040 122 110 054 
  5448	776516     051 072 040 040 000 
  5449	776517     040 040 040 104 145 
  5450	776520     166 151 143 145 055 
  5451	776521     163 164 141 164 165 
  5452	776522     163 072 040 040 000 
  5453	776523     777777  600000
  5454	776524     011 104 145 166 151 
  5455	776525     143 145 040 145 162 
  5456	776526     162 157 162 055 162 
  5457	776527     145 147 151 163 164 
  5458	776530     145 162 163 040 040 
  5459	776531     050 061 051 040 040 
  5460	776532     000 000 000 000 000 
  5461	776533     040 040 050 063 051 
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 138-4
BOOT	MAC	16-Feb-88 20:26		Literals

  5462	776534     040 040 000 000 000 
  5463	776535     777772  000000
  5464	776536     201 06 0 00 000006 
  5465	776537     254 00 0 00 773614 
  5466	776540     104 111 122 105 103 
  5467	776541     124 117 122 131 000 
  5468	776542     44 07 0 00 776540 
  5469	776543     00 41 0 01 000002 
  5470	776544     201 06 0 00 000011 
  5471	776545     254 00 0 00 773614 
  5472	776546     00 41 0 01 000025 
  5473	776547     201 06 0 00 000000 
  5474	776550     254 00 0 00 773614 
  5475	776551     00 24 0 00 767000 
  5476	776552     201 06 0 00 000012 
  5477	776553     254 00 0 00 773614 
  5478	776554     201 06 0 00 000001 
  5479	776555     254 00 0 00 773614 
  5480	776556     201 06 0 00 000002 
  5481	776557     254 00 0 00 773614 
  5482	776560     00 11 0 00 000010 
  5483	776561     41 03 0 01 000000 
  5484	776562     00 41 0 01 000000 
  5485	776563     000001  000001
  5486	776564     270 10 0 00 776563 
  5487	776565     253 10 0 00 774563 
  5488	776566     254 00 0 00 776544 
  5489	776567     262 17 0 00 000002 
  5490	776570     412 02 0 00 772223 
  5491	776571     263 17 0 00 000000 
  5492	776572     201 06 0 00 000007 
  5493	776573     254 00 0 00 773614 
  5494	776574     201 06 0 00 000025 
  5495	776575     254 00 0 00 773614 
  5496	776576     26 13 0 03 762000 
  5497	776577     716200  377471
  5498	776600     716200  200061
  5499	776601     200 04 0 00 776600 
  5500	776602     221 01 0 00 777774 
  5501	776603     137 01 0 00 776362 
  5502	776604     254 00 0 00 775115 
  5503	776605     617400  000020
  5504	776606     004000  000013
  5505	776607     040 040 077 102 117 
  5506	776610     117 124 072 040 000 
  5507	776611     111 117 040 145 162 
  5508	776612     162 157 162 040 055 
  5509	776613     040 143 141 156 047 
  5510	776614     164 040 162 145 141 
  5511	776615     144 040 163 165 160 
  5512	776616     145 162 055 151 156 
  5513	776617     144 145 170 040 142 
  5514	776620     154 157 143 153 000 
  5515	776621     111 117 040 145 162 
  5516	776622     162 157 162 040 055 
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 138-5
BOOT	MAC	16-Feb-88 20:26		Literals

  5517	776623     040 143 141 156 047 
  5518	776624     164 040 162 145 141 
  5519	776625     144 040 151 156 144 
  5520	776626     145 170 040 142 154 
  5521	776627     157 143 153 000 000 
  5522	776630     111 117 040 145 162 
  5523	776631     162 157 162 040 055 
  5524	776632     040 143 141 156 047 
  5525	776633     164 040 162 145 141 
  5526	776634     144 040 144 151 162 
  5527	776635     145 143 164 157 162 
  5528	776636     171 040 160 141 147 
  5529	776637     145 000 000 000 000 
  5530	776640     111 117 040 145 162 
  5531	776641     162 157 162 040 055 
  5532	776642     040 143 141 156 047 
  5533	776643     164 040 162 145 141 
  5534	776644     144 040 105 130 105 
  5535	776645     055 144 151 162 145 
  5536	776646     143 164 157 162 171 
  5537	776647     040 160 141 147 145 
  5538	776650     000 000 000 000 000 
  5539	776651     111 117 040 145 162 
  5540	776652     162 157 162 040 055 
  5541	776653     040 143 141 156 047 
  5542	776654     164 040 162 145 141 
  5543	776655     144 040 144 141 164 
  5544	776656     141 040 160 141 147 
  5545	776657     145 000 000 000 000 
  5546	776660     111 117 040 145 162 
  5547	776661     162 157 162 040 055 
  5548	776662     040 143 141 156 047 
  5549	776663     164 040 167 162 151 
  5550	776664     164 145 040 105 130 
  5551	776665     105 055 144 151 162 
  5552	776666     145 143 164 157 162 
  5553	776667     171 040 160 141 147 
  5554	776670     145 000 000 000 000 
  5555	776671     111 117 040 145 162 
  5556	776672     162 157 162 040 055 
  5557	776673     040 143 141 156 047 
  5558	776674     164 040 162 145 141 
  5559	776675     144 040 162 157 157 
  5560	776676     164 055 144 151 162 
  5561	776677     145 143 164 157 162 
  5562	776700     171 040 151 156 144 
  5563	776701     145 170 040 142 154 
  5564	776702     157 143 153 000 000 
  5565	776703     111 117 040 145 162 
  5566	776704     162 157 162 040 055 
  5567	776705     040 120 157 162 164 
  5568	776706     055 163 145 151 172 
  5569	776707     145 040 154 157 147 
  5570	776710     151 143 040 164 151 
  5571	776711     155 145 144 040 157 
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 138-6
BOOT	MAC	16-Feb-88 20:26		Literals

  5572	776712     165 164 000 000 000 
  5573	776713     110 141 162 144 040 
  5574	776714     164 141 160 145 040 
  5575	776715     145 162 162 157 162 
  5576	776716     000 000 000 000 000 
  5577	776717     106 151 154 145 040 
  5578	776720     156 157 164 040 146 
  5579	776721     157 165 156 144 000 
  5580	776722     106 151 154 145 040 
  5581	776723     156 157 164 040 151 
  5582	776724     156 040 105 130 105 
  5583	776725     040 146 157 162 155 
  5584	776726     141 164 000 000 000 
  5585	776727     106 151 154 145 047 
  5586	776730     163 040 105 130 105 
  5587	776731     055 144 151 162 145 
  5588	776732     143 164 157 162 171 
  5589	776733     040 151 163 040 154 
  5590	776734     157 156 147 145 162 
  5591	776735     040 164 150 141 156 
  5592	776736     040 061 040 160 141 
  5593	776737     147 145 000 000 000 
  5594	776740     102 141 144 040 150 
  5595	776741     157 155 145 040 142 
  5596	776742     154 157 143 153 000 
  5597	776743     123 164 162 165 143 
  5598	776744     164 165 162 145 040 
  5599	776745     156 157 164 040 146 
  5600	776746     157 165 156 144 000 
  5601	776747     116 157 040 163 164 
  5602	776750     162 165 143 164 165 
  5603	776751     162 145 040 111 104 
  5604	776752     000 000 000 000 000 
  5605	776753     103 141 156 047 164 
  5606	776754     040 146 151 156 144 
  5607	776755     040 142 157 157 164 
  5608	776756     141 142 154 145 040 
  5609	776757     163 164 162 165 143 
  5610	776760     164 165 162 145 000 
  5611	776761     115 157 162 145 040 
  5612	776762     164 150 141 156 040 
  5613	776763     061 040 142 157 157 
  5614	776764     164 141 142 154 145 
  5615	776765     040 163 164 162 165 
  5616	776766     143 164 165 162 145 
  5617	776767     040 146 157 165 156 
  5618	776770     144 000 000 000 000 
  5619	776771     104 165 155 160 040 
  5620	776772     145 162 162 157 162 
  5621	776773     040 055 040 104 125 
  5622	776774     115 120 056 105 130 
  5623	776775     105 040 151 163 040 
  5624	776776     164 157 157 040 163 
  5625	776777     155 141 154 154 072 
  5626	777000     040 162 145 143 157 
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 138-7
BOOT	MAC	16-Feb-88 20:26		Literals

  5627	777001     156 146 151 147 165 
  5628	777002     162 145 040 167 151 
  5629	777003     164 150 040 115 101 
  5630	777004     113 104 115 120 000 
  5631	777005     103 157 155 155 141 
  5632	777006     156 144 040 145 162 
  5633	777007     162 157 162 000 000 
  5634	777010     125 156 153 156 157 
  5635	777011     167 156 040 163 167 
  5636	777012     151 164 143 150 000 
  5637	777013     111 156 166 141 154 
  5638	777014     151 144 040 156 165 
  5639	777015     155 145 162 151 143 
  5640	777016     040 166 141 154 165 
  5641	777017     145 000 000 000 000 
  5642	777020     115 145 155 157 162 
  5643	777021     171 040 162 145 146 
  5644	777022     145 162 145 156 143 
  5645	777023     145 040 146 141 151 
  5646	777024     154 145 144 000 000 
  5647	777025     116 157 040 162 145 
  5648	777026     141 144 171 040 164 
  5649	777027     141 160 145 055 144 
  5650	777030     162 151 166 145 040 
  5651	777031     141 166 141 151 154 
  5652	777032     141 142 154 145 000 
  5653	777033     201 06 0 00 000003 
  5654	777034     254 00 0 00 773614 
  5655	777035     33 11 0 10 000001 
  5656	777036     00 33 0 10 000001 
  5657	777037     00 33 0 10 000000 
  5658	777040     11 22 0 00 000005 
  5659	777041     00 24 0 01 767000 
  5660	777042     201 06 0 00 000004 
  5661	777043     254 00 0 00 773614 
  5662	777044     741000  741001
  5663	777045     707707  707077
  5664	777046     30 06 0 00 000137 
  5665	777047     22 06 0 00 000137 
  5666	777050     104 165 155 160 151 
  5667	777051     156 147 135 040 000 
  5668	777052     00 24 0 04 770000 
  5669	777053     33 11 0 03 771001 
  5670	777054     201 06 0 00 000013 
  5671	777055     254 00 0 00 773614 
  5672	777056     00 24 0 00 770000 
  5673	777057     201 06 0 00 000005 
  5674	777060     254 00 0 00 773614 
  5675	777061     201 06 0 00 000021 
  5676	777062     254 00 0 00 773614 
  5677	777063     015 012 040 040 116 
  5678	777064     165 155 142 145 162 
  5679	777065     040 157 146 040 160 
  5680	777066     141 147 145 163 040 
  5681	777067     167 162 151 164 164 
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 138-8
BOOT	MAC	16-Feb-88 20:26		Literals

  5682	777070     145 156 072 040 000 
  5683	777071     015 012 040 040 116 
  5684	777072     165 155 142 145 162 
  5685	777073     040 157 146 040 111 
  5686	777074     057 117 040 162 145 
  5687	777075     161 165 145 163 164 
  5688	777076     163 072 040 000 000 
  5689	777077     111 117 040 145 162 
  5690	777100     162 157 162 040 167 
  5691	777101     150 151 154 145 040 
  5692	777102     144 165 155 160 151 
  5693	777103     156 147 040 160 141 
  5694	777104     147 145 072 040 040 
  5695	777105     000 000 000 000 000 
  5696	777106     11 15 0 01 765002 
  5697
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 139
BOOT	MAC	16-Feb-88 20:26		End of BOOT Code

  5698						SUBTTL End of BOOT Code
  5699
  5700						DEFINE CODLFT (N),<IF2,PRINTX [N words free in code area]> ;[7.1228]
  5701						CODLFT (\<777776-.>)	;[7.1228]
  5702						IFG <A%VORG-.>,<BLOCK <A%VORG-.>>
  5703	777127   				BLOCK <777-<.&777>>
  5704	777777     254 00 0 00 773660 		JRST VBOOT		;MUST BE LAST INSTRUCTION IN LAST PAGE
  5705					IFG <.-A%VORG-1000>,<PRINTX ? Maximum code size exceeded>
  5706	007000'00				DEPHASE
  5707
  5708	007000'00			CODEND:
  5709
  5710					;This code is executed in the AC's near GOTCOR.
  5711					;	P2/ address of first word to be moved from low end to high
  5712					;	P3/ address of first word to be moved from high end to low
  5713					;	P4/ number of words to move
  5714
  5715	007000'00  200 14 0 12 000000 	BOTMOV:	MOVE P5,(P3)		;GET NONBOOT WORD
  5716	007001'00  250 14 0 11 000000 		EXCH P5,(P2)		;EXCHANGE WITH BOOT
  5717	007002'00  202 14 0 12 000000 		MOVEM P5,(P3)		;BOOT INTO HIGH CORE
  5718	007003'00  350 00 0 00 000011 		AOS P2			;NEXT WORD
  5719	007004'00  350 00 0 00 000012 		AOS P3			;...
  5720	007005'00  367 13 0 00 000001 		SOJG P4,T1		;DO ALL WORDS
  5721	007006'00  254 00 0 10 772044 	MOVEND:	JRST <CORMVD-ENT>+<A%CODE-1000-A%VORG>(P1) ;GO TO MOVED BOOT
  5722		   	   000006	  MVCLEN==MOVEND-BOTMOV		;Length of moving code (-1)
  5723
  5724					;PAGE FAULT HANDLER UNTIL AFTER BOOT IS MOVED
  5725
  5726	007007'00			PAGTRP:
  5727					IFN KLFLG,<
  5728	007007'00  350 00 0 16 007502 		AOS CODEND-ENT+UPTPFO(16) ;THE PC OF THE PAGE FAIL
  5729	007010'00  254 00 1 16 007502 		JRST @CODEND-ENT+UPTPFO(16) ;PROCEED
  5730					>				;END OF IFN KLFLG
  5731
  5732					>				;END IFN FT.PRT&2
  5733	007011'00				BLOCK <1000-<.&777>>	;LEAVE SPACE FOR TEMPORARY EPT
  5734
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 140
BOOT	MAC	16-Feb-88 20:26		Patching BOOT Under Timesharing

  5735						SUBTTL Patching BOOT Under Timesharing
  5736
  5737					;This code interfaces with the V6 KDDT and also allows BOOT's timeshareing
  5738					;core image to be mapped to high-core (so that the symbols can be used) and
  5739					;unmaps the pages when ^Z is typed to KDDT (again, in user mode).
  5740					;BOOT knows nothing about this code, and it is not moved when BOOT moves
  5741					;to high core.  It should be remembered that future monitor changes might
  5742					;cause the resident monitor to overlay this code (and, indeed, KDDT itself).
  5743
  5744					IFN BDEBUG,<
  5745						.PSECT MAPCOD,DDTPRE	;Linked on first page preceding DDT
  5746
  5747						EXTERN DDTX
  5748		   	   000001		MSEC1==:1		;KDDT wants this
  5749
  5750	000000'01  254 14 0 00 000031'	DDTENT:	XSFM PCSTOR		;Get PC flags
  5751	000001'01  250 01 0 00 000031'		EXCH T1,PCSTOR		;Get the flags
  5752	000002'01  607 01 0 00 010000 		TXNN T1,1B5		;User mode?
  5753	000003'01  254 00 0 00 000011'		JRST EXEC		;No
  5754
  5755						;Here in user mode
  5756	000004'01  200 01 0 00 000036'		MOVE T1,[.FHSLF,,<ENT_-9>+1]
  5757	000005'01  200 02 0 00 000037'		MOVE T2,[.FHSLF,,<A%CODE>_-9]
  5758	000006'01  200 03 0 00 000040'		MOVE T3,[PM%RD!PM%WR!PM%EX!PM%CNT!A$CODE]
  5759	000007'01  104 00 0 00 000056 		PMAP
  5760	000010'01  254 00 0 00 000000*		JRST DDTX		;Enter KDDT in user mode
  5761
  5762						;Here if in EXEC mode
  5763	000011'01  332 00 0 00 000032'	EXEC:	SKIPE EFLAG		;First time through?
  5764	000012'01  254 00 0 00 000016'		JRST EXEC1		;No
  5765						;1'st time through preamble
  5766	000013'01  200 01 0 00 000116 		MOVE T1,116		;Get pointer to symbol table
  5767	000014'01  202 01 0 00 000033'		MOVEM T1,SYMTAB		;Save symbol table pointer
  5768	000015'01  254 00 0 00 000020'		JRST DDTGO		;Prepare to enter KDDT
  5769						;N'th time through preamble
  5770	000016'01  200 01 0 00 000033'	EXEC1:	MOVE T1,SYMTAB		;Get symbol table pointer
  5771	000017'01  202 01 0 00 000116 		MOVEM T1,116		;Restore it		
  5772
  5773	000020'01  200 01 0 00 000031'	DDTGO:	MOVE T1,PCSTOR		;Recover contents of T1
  5774									;Very important if he has restarted DDT
  5775	000021'01  476 00 0 00 000032'		SETOM EFLAG		;Indicate we have been through preamble
  5776	000022'01  254 00 0 00 000010*		JRST DDTX		;Enter KDDT in exec mode
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 141
BOOT	MAC	16-Feb-88 20:26		Patching BOOT Under Timesharing

  5777			
  5778
  5779						;Here after exiting EDDT in user mode with ^Z
  5780						;We are guaranteed to get here only in user mode
  5781	000023'01  476 00 0 00 000001 	DDTCZ::	SETOM T1		;Unmap the pages
  5782	000024'01  200 02 0 00 000037'		MOVE T2,[.FHSLF,,<A%CODE>_-9]
  5783	000025'01  200 03 0 00 000040'		MOVE T3,[PM%RD!PM%WR!PM%EX!PM%CNT!A$CODE]
  5784	000026'01  104 00 0 00 000056 		PMAP
  5785	000027'01  104 00 0 00 000170 	DDTEX:	HALTF
  5786	000030'01  254 00 0 00 000000'		JRST DDTENT
  5787
  5788						;Storage for DDT preamble code
  5789	000031'01  000 00 0 00 000000 	PCSTOR:	Z			;Storage for PC flags
  5790	000032'01  000 00 0 00 000000 	EFLAG:	Z			;Nonzero means we have been here before
  5791	000033'01  000 00 0 00 000000 	SYMTAB:	Z			;Place to save symbol table pointer
  5792
  5793	000034'01  000 00 0 00 000000 		Z
  5794	000035'01  000 00 0 00 000000 		Z
  5795	000036'01				LIT
  5796	000036'01  400000  000000#
  5797	000037'01  400000  000772
  5798	000040'01  560000  000006
  5799	000041'01			PATCH:	BLOCK <777-<.&777>>	;Our patch area
  5800
  5801						>			;End IFN BDEBUG
  5802
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page 142
BOOT	MAC	16-Feb-88 20:26		End of BOOT

  5803						SUBTTL End of BOOT
  5804
  5805		   254000  000000'	IFN FT.PRT&1,<END JRST ENT>	;GIVE START ADR IF ASSEMBLED PT 1

NO ERRORS DETECTED

PROGRAM BREAK IS 010000
PSECT 1 BREAK IS 000777 FOR  MAPCOD
CPU TIME USED 00:00.443

155P CORE USED
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page S-1
BOOT	MAC	16-Feb-88 20:26		SYMBOL TABLE

A$CODE		000006	spd	CHKLP		774707		DBG3		771125	spd	DS.WRL		004000	spd	
A%CCW		762000	spd	CHKNXM		775336		DCFLG		000000	sin	DSKMSK	777774	000000	spd	
A%CODE		772000	spd	CHKNXT		775753		DCHK		773143		DSKSIZ		000010	spd	
A%CST		742000	spd	CHKPG0		775634		DDTADR		261000	spd	DSKTAB		772133		
A%DATA		772000	spd	CHKRET		776016		DDTLEN		000040	spd	DSKTYP		772132		
A%DIR		763000	spd	CHKSTR		773047		DDTPG1		000260	spd	DTCNOW		772436		
A%DPG		764000	spd	CHKUNI		773104		DDTPGL		000320	spd	DTE		000200	spd	
A%EPT		765000	spd	CHNRST		775151		DDTPRE		260000	spd	DTECMD		765451		
A%FP0		771000	spd	CHNSAV		775126		DDX20		773146		DTEF11		765450		
A%POST		740000	spd	CHNSET		775005		DEBUG		000000	sin	DTEFLG		765444		
A%PTB		766000	spd	CHNTAB		772154		DECIN		774222		DTEMTD		765455	spd	
A%SXB		767000	spd	CKPORT		775254		DEF.FN		774155		DTEMTI		765456	spd	
A%VFST		742000	spd	CLEQIN		000001	sin	DEF.WT		774154		DTEN		000004	spd	
A%VORG		777000	spd	CLR.NP		775436		DEFBEG		772002	spd	DTEOPR		765453		
A%XB		770000	spd	CLR.NW		775453		DEFDAT		774155		DTEPRV		100000	sin	
A.DATA		772450	spd	CLRCOR		775435		DEFEND		772011	spd	DTES		200000	spd	
ADJBP	133000	000000	sin	CLRPT	701100	000000		DERCNT		772243		DTFLG		000001	sin	
AP.CLR		020000	spd	CODE		001450'		DEV		772125		DVX1		772674		
AP.NXM		002000	spd	CODEND		007000'		DEVDSP		772224		DVXLP		772705		
AP.RES		200000	spd	CODHOM		707070	spd	DEVNAM		772661		DXAMCV		772241		
AP.RNX		022000	spd	COMERR		000022	spd	DEVX		772667		DXASA		002253'	ext	
AP.SET		010000	spd	COMINV		000024	spd	DEXEPC		772357		DXASZ		000000	ext	
APPNUL		774143		COMUNS		000023	spd	DFFLGS		000000	spd	DXBMCV		772242		
APR		000000	sin	CORMVD		000044'		DI%WRT	100000	000000	spd	DXBSA		000000	spd	
APRSER		772447		CPOPJ		773531		DIDIR	777777	000000	spd	DXBSZ		000001	spd	
BDEBUG		000001	sin	CPOPJ1		773530		DIFIL	000777	777777	spd	DXESA		000000	spd	
BLKSIZ		000200	spd	CPYSTR		774004		DIFLG	777000	000000	spd	DXESZ		000001	spd	
BOOTFL		000206	sin	CR.DVA		004000	spd	DIORG		772144		DXLDFT		773207		
BOTMOV		007000'		CRLF		773562		DIPRO	000777	777777	spd	DXVRFT		773212		
BT%HOD	200000	000000	sin	CSTADR		000002	spd	DIRPT	777000	000000	spd	DYNFLG		000000	sin	
BT%RPM	400000	000000	sin	CSTDTA		000001	spd	DIRST		772360		EBSIZ		777777	spd	
BTCOD	707707	707077	sin	CSTMSK		000000	spd	DIRSTR		772003		EBTYP	777777	000000	spd	
BTFLGS		772247		CTSFLG		000000	sin	DIRTMP		772011		ED.NUM		001777	spd	
BUTCMD		000163	sin	CURCHN		772150		DISIZ		777777	spd	EDDBLK		772253	int	
BUTCOD		000200	sin	CURCYL		772152		DMPERR		776155		ELOC		000141	spd	
BUTEPT		000203	sin	CURNAM		772131		DMPFTS		000021	spd	ENT		000000'		
BUTLLM		000203	sin	CURPAG		772143		DOIO		774675		ENTFLG		400000	spd	
BUTPGS		000202	sin	CURSEC		772151		DONE		776000		EPTATR		000421	spd	
BUTPHY		000204	sin	CURUN		772153		DONE0		775777		EPTEST		000540	spd	
BUTSTA		000207	sin	CX		000016		DOOP0		773445		EPTPDO		000422	spd	
BUTULM		000204	sin	D$DIR		772022		DOOP1		773452		EPTSPT		000760	spd	
BUTVIR		000205	sin	D$EXT		772042		DOOP2		773467		ERACS		772204		
CALL	260740	000000		D$FIL		772012		DOPG0		775117		ERRET		773653		
CALLRE	254000	000000	spd	D$ISTR		772056		DOSTRT		773736		ERRPFX		775405		
CCWADR		772147		D$LB		772111		DS.ATA		100000	spd	ERRTAB		775406		
CCWSZ		000100	spd	D$SW		772054		DS.DPR		000400	spd	ERRTYP		773614		
CFSSCA		000001	sin	D$TMP		772032		DS.DRY		000200	spd	EVADR		000140	spd	
CHGLIM		775657		D$UB		772107		DS.ERR		040000	spd	EVLEN		000001	spd	
CHKAD		775344		D$VER		772052		DS.GUD		010700	spd	EXESIZ		000004	spd	
CHKADR		776005		D.DOIO		000004	spd	DS.LST		002000	spd	EXETAB		775457		
CHKCHN		773067		D.SET		000005	spd	DS.MOL		010000	spd	EXIT		773727		
CHKDON		775345		DA.IDX		000001	spd	DS.MSK		174700	spd	EXPGSZ		000001	spd	
CHKHM1		773403		DB.IDX		000003	spd	DS.PGM		001000	spd	EXTJSB		000000	sin	
CHKHOM		773363		DBG1		000043'		DS.PIP		020000	spd	EXTSTR		772004		
CHKIO		774706		DBG2		000007	spd	DS.VV		000100	spd	F		000000	spd	
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page S-2
BOOT	MAC	16-Feb-88 20:26		SYMBOL TABLE

F.ACT	020000	000000	spd	FT.EXE		000001	spd	GX.DON		774507		LAHFLG		000001	sin	
F.ALL	000400	000000	spd	FT.MTA		000000	spd	GX.NE		774461		LBSTR		772010		
F.BACK	010000	000000	spd	FT.PRT		000003	spd	GX.NV		774475		LCORAD		000020	spd	
F.CLR	100000	000000	spd	FT.RP2		000000	spd	GX.NV1		774502		LDX20		773215		
F.DPER	000002	000000	spd	FT.TM8		000001	spd	HALTF	104000	000170	int	LDX20A		773220		
F.DUMP	002000	000000	spd	FT.UDB		000000	spd	HIADDR		772146		LDX20B		773236		
F.EDDT	001000	000000	spd	FTD36M		000000	sin	HOMBTF		771217	spd	LDX20C		773251		
F.INFO	000100	000000	spd	FTKLIP		000000	sin	HOMCOD		771376	spd	LKPORT		775200		
F.IOER	000001	000000	spd	FTMSCP		000001	sin	HOMID		771201	spd	LKPT1		775206		
F.NCHL	000200	000000	spd	FTNSPS		000000	sin	HOMLUN		771204	spd	LKPT2		775212		
F.OUT	004000	000000	spd	FTP4R		000001	sin	HOMNAM		771200	spd	LKPT3		775227		
F.PHYS	200000	000000	spd	FTRTST		000001	sin	HOMRXB		771210	spd	LKPTR		775251		
F.STRT	040000	000000	spd	G.CLR		775470		HOMSER		771364	spd	LKPTRS		775250		
F.WRIT	400000	000000	spd	G.DIR		775504		HOMSNM		771203	spd	LODBAS		772233		
F.WRT	000010	000000	spd	G.DIR0		775507		HWRACB		000006	sin	LODPAG		775550		
F11.DM	200000	000000	spd	G.DIR1		775514		ICA		000000	spd	LODRUN		773705		
F11.LD	400000	000000	spd	G.DIR2		775560		ICD.BT		000003	spd	LODTOP		772234		
F11.OK		000001	spd	G.DIR3		775563		ICD.DN		000001	spd	LODTYP		772252		
FB%DEL	040000	000000	sin	G.DIR4		775567		ICD.EF		000002	spd	LODX20		773136		
FB%LNG	010000	000000	sin	G.DIR5		775603		ICD.SR		000021	spd	LR	004000	000000	spd	
FB%NXF	020000	000000	sin	G.DIR8		775521		IDXADR	000003	777777	spd	LWRLIM		772114		
FBADR	777777	777777	spd	G.DSP		775473		IMMCOD		000001	sin	M%EDT		006070	spd	
FBBYV	777777	777777	spd	G.DSP1		775475		IMMPTR	124000	000000	spd	M%MAJ		000006	spd	
FBCTL	777777	777777	spd	G.ENT		775622		INFO		774242		M%MIN		000000	spd	
FBEXL	077777	777777	spd	G.GO		775502		IOCNTR		772123		MAKDIR		776052		
FBEXT	777777	777777	spd	G.PDV		775631		IOER10		000006	spd	MAKDON		776064		
FBGEN	777777	000000	spd	GET		775463		IOER11		000007	spd	MAPBTS	777760	000000	spd	
FBGNL	077777	777777	spd	GET	104000	000200	int	IOER2		000000	spd	MAPCOD		000000	ext	
FBNAM	777777	777777	spd	GET.EL		773555		IOER3		000001	spd	MAPDIR		774423		
FDLP		772733		GET.W		773536		IOER4		000002	spd	MAPXB		776030		
FDSK		772724		GETCAL		773722		IOER6		000003	spd	MAXCHN		000007	spd	
FDSK1		772740		GETCM1		772624		IOER7		000004	spd	MAXCOR		772232		
FDSK2		772744		GETCO1		772652		IOER9		000005	spd	MAXDRV		000007	spd	
FDSK3		772746		GETCOM		772637		IOIP		772223		MAXUNI		772121		
FDSK4		772751		GETDG1		774324		IOLOOP		774735		MCEPAG		772240		
FDSK5		773037		GETDIG		774322		IORTRY		774750		MCSPAG		772237		
FILDRP		000013	spd	GETIDX		774456		IOSET		775024		MEMMRF		000025	spd	
FILFNF		000011	spd	GETPAG		774542		IOSEXI		775111		MONACB		000000	spd	
FILNEF		000012	spd	GETPG1		774552		IOSLP		775077		MONLOD		772354		
FILPAG		772126		GETPGS		775733		IOWAIT		774724		MONPDV		772353	int	
FILSTR		772002		GETPH1		775332		IOXCT		773134		MOVAC		000001	spd	
FIND		774556		GETPHY		775321		ISTRNG		772000		MOVEND		007006'		
FND.NF		774563		GETST1		773566		J1		000023'		MRET1		773656		
FND.NM		774604		GETST3		773572		J2		000030'		MRET2		773655		
FND1		774435		GETSTR		773532		J3		000112'		MSCDBG		000000	sin	
FND2		774437		GO		000001	spd	J4		772477		MSGHDR		772250		
FNDCMD		772122		GOTCOR		000034'		J5		772546		MVCLEN		000006	spd	
FNDCOR		000025'		GOTDRV		772755		J6		772550		MXPDMP		000137	spd	
FNDDEV		772450		GOTDV0		772771		J7		772551		N.BKP4		000004	spd	
FNDIDX		774426		GOTDV1		773005		KCFLG		000000	sin	N.BPP		000003	spd	
FNDSTE		772117		GOTDV2		773017		KLFLG		000001	sin	N.CLP		000000	spd	
FNDSTR		772116		GOTDV3		773025		KLIFLG		772251		N.CLP4		000620	spd	
FNDSTV		772120		GOTDV4		773035		KLP.VR		037700	spd	N.CLP6		001440	spd	
FOUND		772712		GOTDX		773147		KLPCHN		000007	spd	N.CLP7		001165	spd	
FT.DX2		000001	spd	GX.DN1		774536		KLPMSK	400003	000000	spd	N.SCL		000001	spd	
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page S-3
BOOT	MAC	16-Feb-88 20:26		SYMBOL TABLE

N.SCL4		000574	spd	PFERR		773477		RADIN		774225		ST.1B		774175		
N.SCL7		002540	spd	PFFLG		772244		RCLP	002000	000000	spd	ST.2		774200		
N.SPG2		000001	spd	PFH		773501		RD0		773430		ST.3		774204		
N.STK		000002	spd	PFH1		773514		RD00		773432		ST.4		774207		
N.STK4		000024	spd	PFLAGS		772356		RD0A		773434		ST.5		774212		
N.STK7		000053	spd	PGCACB	007000	000000	sin	RD10		773427		ST.6		774215		
NCHAN		000010	spd	PGCLDE		200000	sin	RDPGRT		774537		ST.7		774220		
NCSTPG		000020	spd	PGCLKE		400000	sin	REDPAG		774643		START		772001		
NDMPM		000062	spd	PGCNTR		772124		RET	263740	000000		STDX20		773163		
NEWENT		776066		PGKLMD		040000	sin	RETRY		774754		STLW	000200	000000	spd	
NEXTXB		776021		PGLACB	400000	000000	sin	RH%XFR	400000	000000	spd	STPORG		774000		
NMEG	000004	000000		PGLUBR	100000	000000	sin	RH0		000540	spd	STRCM1		774615		
NOLDDX		772246		PGPACB	000700	000000	sin	RHCI1		773124		STRCMP		774610		
NORP20		772561		PGSIZ		001000	sin	RHCO1		773127		STRHOM		000014	spd	
NOTDMP		774523		PGTPEN		020000	sin	RHDIO		775314		STRMTO		000020	spd	
NOVER		773313		PHYADR	000017	777000	spd	RHDIO1		773117		STRNAM		772130		
NOVERC		773310		PHYORG		001000	spd	RHERR		775120	spd	STRNBS		000017	spd	
NOVERW		773312		PHYPAG		017777	spd	RHRD		775312		STRNID		000016	spd	
NRETRY		000500	spd	PHYZRO		775604		RHRD1		773115		STRSNF		000015	spd	
NXT.CH		774115		PI0ENB		000010	spd	RHWT		775313		STTSIZ		000035	spd	
NXT.EX		774131		PIAINI		772437		RHWT1		773116		SWSTR		772006		
NXT.NT		774122		PIENB		000020	spd	RP4TYP		775270		SWTAB		774073		
NXT.ST		774146		PM%CNT	400000	000000	sin	RP6TYP		775276		SWXTAB		774076		
NXTSTA		774107		PM%EX	020000	000000	sin	RP7TYP		775304		SYMAD	077777	777777	spd	
NXXTAB		774151		PM%RD	100000	000000	sin	RPT	777000	000000	spd	SYMBOT		763003	spd	
O	000000000000#	pol	PM%WR	040000	000000	sin	RSKP		773530		SYMET	700000	000000	spd	
OCTIN		774224		PMAP	104000	000056	int	RSTART		772615		SYMTOP		763004	spd	
OCTRET		774333		PORG		100000	spd	RSTLP		775154		SYMVL	777777	777777	spd	
OUTASC		774330		PORTLK		772355		RSTLP1		775174		T1		000001		
OUTOCN		774312		PTCACH	004000	000000	sin	RWCMN		774660		T2		000002		
OUTOCT		774314		PTRCOD	700000	000000	sin	SAV.EX		775725		T3		000003		
OUTST1		774306		PTWR	020000	000000	sin	SAV.LP		775707		T4		000004		
OUTSTR		774305		Q1		000005		SAV.WR		775714		T7.1RC		000004	spd	
OUTSTS		774335		Q2		000006		SAVE		775670		T7.BSR		000023	spd	
P		000017		Q3		000007		SAVE	104000	000202	int	T7.CDP		030000	spd	
P.NOS		774071		R		773531		SAVLP		775131		T7.ICD		000077	spd	
P.NXS		774047		R4%ATN	040000	000000	spd	SAVLP1		775145		T7.RDF		000071	spd	
P.NXT		774015		R4%CDC		000010	spd	SAVSLT		772127		T7.RDY		100000	spd	
P.SA		774067		R4%CPA		000022	spd	SETCST		000106'		T7.REW		000007	spd	
P.SW2		774062		R4%CRC		000006	spd	SETEP1		772514		T7.SER		100000	spd	
P.TRM		774023		R4%CRD		000070	spd	SETEP3		772533		T7.SNS		000011	spd	
P1		000010		R4%CSK		000004	spd	SETEP4		772544		T7.TMR		100000	spd	
P2		000011		R4%CSR		000000	spd	SETEP5		772537		T8.IDX		000002	spd	
P3		000012		R4%CWR		000060	spd	SETEPT		772471		TA.BAD		775402		
P4		000013		R4%DCA	120000	000000	spd	SETLCV		773740		TA.NXT		775372		
P5		000014		R4%DSR	010000	000000	spd	SETLIM		775652		TAPHTE		000010	spd	
P6		000015		R4%DST	050000	000000	spd	SETPTB		000075'		TAPNDR		000026	spd	
PAG		000010	spd	R4%DTR	060000	000000	spd	SETRTY		774663		TAPTYP		772132	spd	
PAGTRP		007007'		R4%ER1	020000	000000	spd	SETSA		774236		TDX20		773141		
PARSE		774010		R4%ER2	140000	000000	spd	SHRCOD		000002	sin	TFIL		773644		
PASS		772245		R4%ER3	150000	000000	spd	SMFLG		000000	sin	TIMOUT		141520	spd	
PASS0		773720		R4%REL		000012	spd	SPTADR		000003	spd	TIMSET		774734		
PDL		772366		R4%RIP		000020	spd	SPTDSW		000000	sin	TM.IDX		000000	spd	
PDLEN		000050	spd	R4%TYP		000777	spd	ST.0		774165		TMCD16		002000	spd	
PDP		776204		RAD.NX		774226		ST.1		774172		TMCD8		001400	spd	
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page S-4
BOOT	MAC	16-Feb-88 20:26		SYMBOL TABLE

TMCVER		774255		WRTWAT		774636		.DRSIZ		000002	spd	.TDIBR	360000	000000	spd	
TMSDRY		000200	spd	XADR		000000	spd	.DTMMN		004400	spd	.TDICB		100000	spd	
TMSIDB		000010	spd	XBNUM		772145		.DTTYO		004000	spd	.TDIRR	300000	000000	spd	
TMSMOL		010000	spd	XCHAN		000003	spd	.DXATP		000060	spd	.TDMNR	030000	000000	spd	
TMSPIP		020000	spd	XCNT		000002	spd	.DXBTP		000061	spd	.TDMOD		016000	spd	
TO11DB		020000	spd	XCTU	256200	000000		.EBSIZ		000001	spd	.TDMPR		010000	spd	
TOP2		000125'		XDSK		000001	spd	.EXDIR		001776	spd	.TDPCR	310000	000000	spd	
TOPBAS		772235		XI		773266		.EXEND		001777	spd	.TDPEB		020000	spd	
TOPTOP		772236		XIO1		773132		.EXENT		001775	spd	.TDPIB		010000	spd	
TRAP		772605		XJRSTF	254240	000000	int	.EXPDV		001774	spd	.TDSCB		000020	spd	
TRAPPC		772604		XMOVEI	415000	000000	int	.FBADR		000003	sin	.TDSTB		000004	spd	
TRYTYP		773171		XSFM	254600	000000	int	.FBBYV		000011	sin	.TDSTR	200000	000000	spd	
TSSTRT		773735		Z.END		772125	spd	.FBCTL		000001	sin	.TDSTS	010000	000000	spd	
TSTADD		741000	spd	Z.STRT		772000	spd	.FBEXL		000002	sin	.TDTCR	210000	000000	spd	
TSTADR		775356		ZERO		774160		.FBEXT		000027	sin	.TDTER	230000	000000	spd	
TSTCOR		000026'		ZOOT		772361		.FBGEN		000007	sin	.TMATR	040000	000000	spd	
TSTM1		772513		$DIDIR		771000	spd	.FBGNL		000025	sin	.TMBSF		000033	spd	
TSTMEM		772504		$DIFIL		000000	spd	.FBNAM		000026	sin	.TMCSR		000000	spd	
TSTSLT		766741	spd	$DIPRO		000001	spd	.FHSLF		400000	sin	.TMDSR	010000	000000	spd	
TYI		773575		$DIRPT		000001	spd	.JBSYM		000116	spd	.TMDTR	060000	000000	spd	
TYO		773604		$EBSIZ		000000	spd	.R4TYP		000020	spd	.TMERR	020000	000000	spd	
TYPBVR		774270		$EBTYP		000000	spd	.R5TYP		000021	spd	.TMFCR	050000	000000	spd	
TYPDX2		773344		$ED.NU		000001	spd	.R6TYP		000022	spd	.TMRDF		000071	spd	
TYPFIL		774406		$FBADR		000003	spd	.R7TYP		000042	spd	.TMRWF		000007	spd	
TYPST1		774376		$FBBYV		000011	spd	.RHAIE		000040	spd	.TMTCR	110000	000000	spd	
TYPSTR		774374		$FBCTL		000001	spd	.RHCLP		000200	spd	.VBSIZ		000004	spd	
TYPSZ		000006	spd	$FBEXL		000002	spd	.RHCTE		001000	spd	
UBSTR		772007		$FBEXT		000027	spd	.RHDON		000010	spd	
UKPORT		775231		$FBGEN		000007	spd	.RHIVR	740000	000000	spd	
UPRLIM		772115		$FBGNL		000025	spd	.RHMBE		000400	spd	
UPTPFN		000503	spd	$FBNAM		000026	spd	.RHMBR		002000	spd	
UPTPFO		000502	spd	$IDXAD		000000	spd	.RHRAE		004000	spd	
UPTPFW		000500	spd	$RPT		000000	spd	.RHSBR	700000	000000	spd	
V%EDIT		000315	spd	$SYMAD		000000	spd	.RHSTP		000020	spd	
V%MAJO		000011	spd	$SYMET		000000	spd	.RHSTR	710000	000000	spd	
V%MINO		000000	spd	$SYMVL		000001	spd	.SYMAD		000000	sin	
V%WHO		000000	spd	$VBADR		000002	spd	.SYMVL		000001	sin	
VBADR	777777	777777	spd	$VBCNT		000001	spd	.T7BC	050000	000000	spd	
VBCNT	777777	777777	spd	$VBSIZ		000000	spd	.T7FMT	020000	000000	spd	
VBDDAT		772144	sin	$VBTYP		000000	spd	.T7ICD	010000	000000	spd	
VBEND		777000	sin	$VR.NU		000001	spd	.T7ICN	130000	000000	spd	
VBEPT		765000	sin	%COUNT		000027	spd	.T7ND0	140000	000000	spd	
VBOOT		773660	int	%DVSTS	777000	000000	spd	.T7SR	070000	000000	spd	
VBOOT1		773665	int	%FNAM	770700	000000	spd	.T7TMS	210000	000000	spd	
VBSIZ		777777	spd	%SNAM	774770	000000	spd	.T8TYP		000101	spd	
VBSTRT		763000	sin	..0005		775600	spd	.TDATB		100000	spd	
VBTRET		772722		..0006		775603	spd	.TDAYR	240000	000000	spd	
VBTYP	777777	000000	spd	..CSC		000004	spd	.TDCEB		040000	spd	
VERNUM		772113		..CSN		000003	spd	.TDCIB		040000	spd	
VERSTR		772005		..MX1	744000	000000	spd	.TDDEB		002000	spd	
VFREE		000741	spd	..MX2		000001	spd	.TDDNR	210000	000000	spd	
VORG		000777	spd	..PST		000003	spd	.TDE0R	260000	000000	spd	
VR.NUM		176000	spd	..XXX		000006		.TDE1R	270000	000000	spd	
WRTDIR		776100		.CHCRT		000015	sin	.TDERR	020000	000000	spd	
WRTPAG		774623		.DISIZ		000002	spd	.TDFLR	230000	000000	spd	
BOOT - DISK AND TAPE BOOTSTRAP	MACRO %53B(1247) 21:13 22-Mar-;6 Page S-5
BOOT	MAC	16-Feb-88 20:26		SYMBOL TABLE FOR PSECT   MAPCOD

DDTCZ		000023'	int	
DDTENT		000000'		
DDTEX		000027'		
DDTGO		000020'		
DDTX		000022'	ext	
EFLAG		000032'		
EXEC		000011'		
EXEC1		000016'		
MSEC1		000001	sin	
PATCH		000041'		
PCSTOR		000031'		
SYMTAB		000033'		
..TX1	010000	000000	spd	
..TX2		000001	spd	


A$CODE	  1219#	  1221	  5758	  5783
A%CCW	  1237#	  1238	  1238#	  1832	  1833	  1834	  1946	  2063	  2064	  3244	  3245	  3247	  4128	  4134
	  4138	  4152	  4154
A%CODE	  1221#	  1222	  1222#	  1243	  1258	  1612	  1625	  5721	  5757	  5782
A%CST	  1239#	  1240	  1240#	  1671	  1673	  1676	  1702	  1724
A%DATA	  1243#	  1280	  1762
A%DIR	  1235#	  1236	  1236#	  1449	  1459	  1460	  3717
A%DPG	  1233#	  1234	  1234#	  3823	  3829
A%EPT	  1231#	  1232	  1232#	  1450	  1630	  1658	  1666	  1724	  1908	  1909	  1910	  1911	  1932	  2003
	  2914	  2915	  2922	  2936	  2940	  3041	  3042	  3043	  3044	  3045	  3046	  3241	  4092	  5232
A%FP0	  1223#	  1224	  1224#	  1271	  1462	  1463	  1464	  1465	  1466	  1467	  1468	  1469	  2056	  2105
	  2106	  2107	  2122	  4724	  4735	  4971	  4972	  4973	  4974	  5136	  5138	  5139	  5146	  5152
	  5153	  5154	  5155	  5165	  5167	  5168	  5169	  5189
A%POST	  1246#	  1247
A%PTB	  1229#	  1230	  1230#	  1658	  1666	  1671	  1702	  1799	  3240	  4508
A%SXB	  1227#	  1228	  1228#	  3802	  3805	  4790	  5118
A%VFST	  1241#	  1247	  1612	  1615	  1617	  1780	  1783	  3236	  4575
A%VORG	  1242#	  1451	  1615	  1617	  1625	  1630	  1780	  1783	  3235	  3244	  3245	  5702	  5705	  5721
A%XB	  1225#	  1226	  1226#	  3718	  3724	  3809	  3822	  4725	  4798	  4805	  5029	  5049	  5119	  5186
A.DATA	  1280#	  1285	  1287	  1287#	  1288	  1288#	  1292	  1293	  1293#	  1294	  1294#	  1295	  1295#	  1296
	  1296#	  1297	  1297#	  1298	  1298#	  1299	  1299#	  1300	  1300#	  1301	  1305	  1305#	  1306	  1306#
	  1307	  1307#	  1308	  1308#	  1309	  1309#	  1310	  1310#	  1311	  1311#	  1312	  1312#	  1313	  1313#
	  1315	  1315#	  1316	  1316#	  1317	  1317#	  1318	  1318#	  1322	  1322#	  1323	  1323#	  1331	  1331#
	  1332	  1332#	  1333	  1333#	  1334	  1334#	  1335	  1335#	  1337	  1342	  1342#	  1343	  1343#	  1344
	  1344#	  1345	  1345#	  1346	  1346#	  1349	  1349#	  1355	  1355#	  1357	  1357#	  1358	  1358#	  1360
	  1360#	  1361	  1361#	  1362	  1362#	  1363	  1363#	  1364	  1364#	  1365	  1365#	  1372	  1372#	  1373
	  1373#	  1374	  1374#	  1385	  1385#	  1400	  1400#	  1402	  1402#	  1403	  1403#	  1404	  1404#	  1405
	  1405#	  1406	  1406#	  1408	  1408#	  1409	  1409#	  1410	  1410#	  1411	  1411#	  1412	  1412#	  1413
	  1413#	  1414	  1414#	  1415	  1415#	  1416	  1416#	  1424	  1424#	  1425	  1425#	  1428	  1428#	  1429
	  1429#	  1432	  1432#	  1433	  1433#	  1435	  1435#	  1436	  1436#	  1437	  1437#	  1438	  1438#	  1442
	  1442#	  1443	  1443#	  1444	  1444#	  1445	  1445#	  1762	  1768
AP.CLR	   872#	   878
AP.NXM	   875#	   878	  1594	  1807	  4551
AP.RES	   871#	  1550
AP.RNX	   878#	  1591	  1596	  1796	  4542	  4555
AP.SET	   873#
APPNUL	  3264	  3269	  3395#
APR	  1550	  1591	  1594	  1596	  1796	  1807	  1943	  4542	  4551	  4555
APRSER	  1445#	  1945	  2804
BDEBUG	    94#	   846	  1196	  1427	  1678	  1810	  1905	  4652	  5744
BLKSIZ	  1059#	  4133
BOOTFL	  3234
BOTMOV	  1610	  1611	  5715#	  5722
BT%HOD	  3093
BT%RPM	  2031	  2167
BTCOD	  4927
BTFLGS	  1415#	  2030	  2169	  3092
BUTCMD	  3250
BUTCOD	  4926
BUTEPT	  3242
BUTLLM	  4941
BUTPGS	  3237
BUTPHY	  3246
BUTSTA	  3239
BUTULM	  4943
BUTVIR	  3248
CCWADR	  1361#	  1948	  1999	  4088
CCWSZ	  1033#	  2005	  2062	  4087	  4125	  4150
CFSSCA	    76#
CHGLIM	  4928	  4933	  4939	  4947#
CHKAD	  2923	  4545#
CHKADR	  5033	  5056	  5087#
CHKCHN	  2068	  2181#
CHKDON	  2929	  4546#
CHKHM1	  2802	  2811#
CHKHOM	  2109	  2124	  2792#
CHKIO	  3980#	  3991	  5196
CHKLP	  3981#	  3989
CHKNXM	  4527	  4537#	  5097
CHKNXT	  5042#	  5065
CHKPG0	  4810	  4926#
CHKRET	  5093	  5097#
CHKSTR	  2143	  2154#	  2156
CHKUNI	  2071	  2214#
CHNRST	  3219	  3992	  4188#
CHNSAV	  3181	  4165#
CHNSET	  3898	  3924	  4049	  4067#
CHNTAB	  1372#	  3955	  3956	  3960	  3961	  4041	  4042	  4043	  4044
CKPORT	  3971	  4282#
CLEQIN	    77#
CLR.NP	  4643#	  4647	  4656	  4664
CLR.NW	  4661#	  4663
CLRCOR	  4642#	  4733
CODE	  1767#
CODEND	  1576	  1578	  5708#	  5728	  5729
CODHOM	  1470#	  2796
COMERR	  3287	  3375	  4630#
COMINV	  3519	  4632#
COMUNS	  3317	  4631#
CORMVD	  1625#	  5721
CPOPJ	  2950#	  3272	  3516
CPOPJ1	  2947#	  4554
CPYSTR	  3254	  3258	  3262	  3268	  3271#	  3274
CR.DVA	   990#	  4242	  4286
CRLF	  1924	  1934	  1961	  2028	  2698	  2931	  2994	  2999#	  3098	  3126	  3569	  3663	  3680	  5213
	  5225	  5234
CSTADR	  1499#	  1726
CSTDTA	  1498#
CSTMSK	  1497#	  1728
CTSFLG	    63#
CURCHN	  1362#	  2053	  2076	  2181	  2251	  2728	  2816	  3911	  3937	  3953	  3982	  3983	  4079	  4086
	  4090	  4108	  4124	  4149	  4174	  4197	  5230
CURCYL	  1364#	  4039	  4053	  4074	  4100
CURNAM	  1345#	  2807	  2808	  2809	  3119
CURPAG	  1355#	  1873	  3824	  3830
CURSEC	  1363#	  4038	  4054	  4072	  4102
CURUN	  1365#	  2054	  2067	  2073	  2230	  2735	  2814	  4040	  4052	  4076	  4146
CX	  1154#	  1953	  2036	  3131	  3134	  3135	  3136	  3172	  4034	  4035	  4036	  4037	  4055	  4056
	  4057
D$DIR	  1306#	  3458	  3464
D$EXT	  1308#	  3478
D$FIL	  1305#	  3471
D$ISTR	  1311#	  2955	  2969	  2970	  3012
D$LB	  1313#	  3496
D$SW	  1310#	  3490
D$TMP	  1307#	  3424
D$UB	  1312#	  3321	  3502
D$VER	  1309#	  3484
D.DOIO	  1382#	  3943
D.SET	  1383#	  1384	  3942
DA.IDX	  1151#	  2535	  2549	  2623	  2625	  2632	  2650	  2730
DB.IDX	  1153#	  2544	  2581	  2732
DBG1	  1618#
DBG2	  1257#
DBG3	  1258#
DCFLG	    61#
DCHK	  2532	  2538#
DDTADR	  1266#	  1267
DDTCZ	  5781#
DDTENT	  5750#	  5786
DDTEX	  5785#
DDTGO	  5768	  5773#
DDTLEN	  1263#	  1265
DDTPG1	  1264#	  1265	  1266	  1811	  4653
DDTPGL	  1265#	  4654
DDTPRE	  1198	  1267#	  5745
DDTX	  5747#	  5760	  5776
DDX20	  2544#
DEBUG	    85#
DECIN	  3292	  3511#
DEF.FN	  3417#
DEF.WT	  3329	  3415#
DEFBEG	  1292#	  3279
DEFDAT	  3279	  3416#
DEFEND	  1301#	  3280
DERCNT	  1411#	  4967	  5217	  5223
DEV	  1335#	  1953	  1975	  2144	  2150	  2798	  2989
DEVDSP	  1385#	  2118	  2119	  3942	  3943	  4068	  4069	  4073	  4117	  5038	  5051	  5054
DEVNAM	  1981#	  1986
DEVX	  1983	  1987#
DEXEPC	  1436#	  3797	  4995
DFFLGS	  1160#	  2168
DI%WRT	  1080#
DIDIR	  1077#	  5167
DIFIL	  1081#	  4758
DIFLG	  1079#
DIORG	  1357#	  1452	  2055	  2826	  2827	  2828	  3723
DIPRO	  1083#	  4756
DIRPT	  1082#	  4754
DIRST	  1437#	  3729	  3733	  3743
DIRSTR	  1294#	  3253	  3458	  3464	  3702	  3728
DIRTMP	  1300#	  3730	  3731	  3738
DISIZ	  1078#
DMPERR	  3900	  3926	  3986	  5217#
DMPFTS	  4629#	  5198
DOIO	  3967#	  4310	  4316	  4322
DONE	  5035	  5045	  5050	  5053	  5057	  5060	  5070#
DONE0	  5037	  5069#
DOOP0	  2880#
DOOP1	  2885#	  2887
DOOP2	  2890	  2894	  2899#
DOPG0	  4115	  4149#
DOSTRT	  3225	  3227#
DS.ATA	   993#	  1005	  4247
DS.DPR	  1000#	  1004	  4293
DS.DRY	  1001#	  1004	  2860
DS.ERR	   994#	  1005	  2893
DS.GUD	  1004#	  1005	  4250
DS.LST	   998#
DS.MOL	   996#	  1004
DS.MSK	  1005#	  4249
DS.PGM	   999#	  4246	  4268
DS.PIP	   995#	  1005
DS.VV	  1002#	  1004	  4292
DS.WRL	   997#	  1005
DSKMSK	  1046#	  1047	  4067
DSKSIZ	  1033	  1341#	  1349	  1994
DSKTAB	  1349#	  1938	  1976	  1988	  1992	  1993	  1994	  2154	  2812	  2815	  2818	  4075	  4077	  4168
	  4191
DSKTYP	  1346#	  1347	  1997	  2088	  2111	  2112	  2139	  2159
DTCNOW	  1443#	  1856	  1866	  3081
DTE	  1841	  1842	  1843	  1855	  3051#
DTECMD	  1864	  3043#	  3079
DTEF11	  3042#	  3069	  3071
DTEFLG	  1838	  1867	  3041#
DTEMTD	  3045#	  3077	  3082
DTEMTI	  1839	  3046#	  3067	  3072	  3217
DTEN	  1840	  3047#
DTEOPR	  3044#
DTEPRV	  1841	  3052#
DTES	   986#	  4141	  4142
DTFLG	    60#
DVX1	  1978	  1992#
DVXLP	  2003#	  2006
DXAMCV	  1409#	  1896	  2580	  3552
DXASA	  1878	  1895	  2506#	  2550	  2627	  2634	  2652
DXASZ	  1889	  2506#	  2622
DXBMCV	  1410#	  1898	  2582
DXBSA	  1879	  1897	  2518#	  2626	  2633	  2651
DXBSZ	  1889	  2519#	  2624
DXESA	  2515#	  2518
DXESZ	  2516#	  2519
DXLDFT	  2551	  2590#
DXVRFT	  2553	  2598#
DYNFLG	    62#
EBSIZ	  1090#	  5182
EBTYP	  1089#	  5180
ED.NUM	  3576#	  3585
EDDBLK	  1428#	  1430
EFLAG	  5763	  5775	  5790#
ELOC	  1063#	  3223
ENT	  1258	  1271	  1535#	  1566	  1568	  1574	  1576	  1578	  1583	  1595	  1598	  1599	  1610	  1697
	  1706	  1708	  1725	  1726	  1727	  1728	  1744	  1760	  1761	  5721	  5728	  5729	  5756	  5805
ENTFLG	  1348#	  2817	  4078	  4169	  4192
EPTATR	  1475#	  1642
EPTEST	  1474#	  1662
EPTPDO	  1476#
EPTSPT	  1477#	  1660	  1724
ERACS	  1373#	  4034	  4035	  4036	  4037	  4055	  4057
ERRET	  2942	  3131#
ERRPFX	  2932	  3099	  4604#	  5226
ERRTAB	  3102	  4611#
ERRTYP	  2148	  2149	  2155	  2813	  2824	  2829	  3091#	  3287	  3317	  3375	  3519	  3726	  3773	  3783
	  3804	  3807	  3811	  3827	  3850	  3865	  4098	  4114	  4580	  4727	  4742	  4792	  4800	  4807
	  4893	  5122	  5151	  5188	  5192	  5198
EVADR	  1098#	  5176
EVLEN	  1099#	  5174
EXEC	  5753	  5763#
EXEC1	  5764	  5770#
EXESIZ	  4713#	  4737
EXETAB	  4709#	  4713	  4738	  4744
EXIT	  3186	  3219#
EXPGSZ	  1060#
EXTJSB	    68#
EXTSTR	  1295#	  3261	  3478	  3710	  3746
F	  1136#	  1542	  1568	  1771	  1772	  2251	  2252	  2253	  3176	  3183	  3185	  3190	  3221	  3226
	  3281	  3295	  3296	  3298	  3304	  3325	  3327	  3338	  3345	  3346	  3347	  3349	  3350	  3356
	  3357	  3358	  3359	  3372	  3389	  3392	  3400	  3407	  3408	  3529	  3650	  3681	  3902	  3933
	  3958	  3983	  3984	  4045	  4046	  4080	  4140	  4198	  4199	  4515	  4572	  4573	  4588	  4732
	  4759	  4764	  4768	  4796	  4797	  4801	  4822	  4947	  4975	  4997	  5120	  5123	  5183	  5197
	  5201	  5222
F.ACT	  1165#	  3185	  3338	  3345	  3346	  3347	  3349	  3350	  3357	  3359
F.ALL	  1170#	  3296	  3298	  3304	  3357
F.BACK	  1166#	  3372	  3407
F.CLR	  1163#	  3338	  3346	  3347	  3359	  4732
F.DPER	  1174#	  4997	  5197
F.DUMP	  1168#	  3295	  3325	  3349
F.EDDT	  1169#	  3221	  3281	  3359
F.INFO	  1172#	  3183	  3358
F.IOER	  1175#	  5201	  5222
F.NCHL	  1171#	  3296	  3357	  3389	  4947
F.OUT	  1167#	  3392	  3400	  3408
F.PHYS	  1162#	  4515	  4573	  4759	  4764	  4768	  4797	  4822	  4975	  5120	  5123	  5183
F.STRT	  1164#	  3226	  3338	  3347	  3356	  3529
F.WRIT	  1161#	  3327	  3349	  3350
F.WRT	  1173#	  3902	  3933	  3958	  4045	  4046	  4140
F11.DM	  1421#	  1568	  3006
F11.LD	  1420#	  1568	  3009
F11.OK	  1422#
FB%DEL	  3788
FB%LNG	  3800
FB%NXF	  3788
FBADR	  3799
FBBYV	  1104#	  3796
FBCTL	  1103#	  3787
FBEXL	  3771
FBEXT	  3764
FBGEN	  3776
FBGNL	  3781
FBNAM	  3859
FDLP	  2061#	  2065
FDSK	  2023	  2053#	  2153
FDSK1	  2067#	  2078
FDSK2	  2069	  2071#	  2075
FDSK3	  2073#	  2094	  2104	  2120	  2125	  2137
FDSK4	  2070	  2076#
FDSK5	  2079	  2142#
FILDRP	  4623#	  5151
FILFNF	  3773	  3783	  3850	  3865	  4621#
FILNEF	  3807	  4622#	  4742	  4792	  4893	  5188
FILPAG	  1342#	  4723
FILSTR	  1293#	  3257	  3330	  3331	  3471	  3706	  3745
FIND	  3760	  3840#
FND.NF	  3846#	  3864
FND.NM	  3853	  3863#
FND1	  3730#	  3744
FND2	  3733#	  3737
FNDCMD	  1332#	  1973	  2034
FNDCOR	  1593#	  1598
FNDDEV	  1744	  1771#
FNDIDX	  3189	  3723#
FNDSTE	  1322#	  3758	  3761	  3793
FNDSTR	  1318#	  3757	  3790	  3846	  3852
FNDSTV	  1323#	  3777	  3778
FOUND	  1977	  1990	  2028#	  2170
FT.DX2	   860	  2082	  2499
FT.EXE	   854	  4667	  4705
FT.MTA	   853	  1401	  1941	  1962	  1965	  1996	  2008	  2022	  2050	  2259	  2791	  2834	  3113	  3188
	  3348	  3352	  3671	  3716	  3754	  3835	  3889	  4171	  4194	  4218	  4328	  4412	  4717	  4773
	  4958
FT.PRT	   855	  1455	  1517	  5805
FT.RP2	   862	  2508	  2513	  2540	  3554
FT.TM8	   861
FT.UDB	   852	  3016	  3057
FTD36M	    65#
FTKLIP	    73#	   851#	  1891	  2193	  2196	  2743	  3560
FTMSCP	    74#
FTNSPS	    64#
FTP4R	    90#
FTRTST	    91#
G.CLR	  4730#
G.DIR	  4709	  4750#
G.DIR0	  4754#	  4818
G.DIR1	  4759#	  4813
G.DIR2	  4771	  4808	  4811#	  4835
G.DIR3	  4811	  4815#
G.DIR4	  4766	  4822#
G.DIR5	  4825	  4832	  4835#
G.DIR8	  4763	  4766#
G.DSP	  4736#	  4817	  4898	  4903
G.DSP1	  4738#	  4741
G.ENT	  4711	  4892#
G.GO	  4740	  4744#
G.PDV	  4712	  4901#
GET	  3211	  4717#
GET.EL	  2985	  2993#
GET.W	  2960#	  2974	  2981	  2988	  2991
GETCAL	  3207	  3211#
GETCM1	  1938#	  3132
GETCO1	  1960	  1972#
GETCOM	  1953#	  2037	  2964
GETDG1	  3630	  3638#
GETDIG	  3636#	  3640	  3644
GETIDX	  3741	  3757#
GETPAG	  3762	  3770	  3775	  3780	  3786	  3820#	  3847	  3857	  3866	  3874
GETPG1	  3825	  3828#
GETPGS	  4979	  5022#
GETPH1	  4516	  4527#
GETPHY	  4113	  4513#	  4569	  4579	  4769	  4831
GETST1	  2958	  3006#
GETST3	  3008	  3011	  3012#
GETSTR	  1972	  2955#
GO	   983#	  2098	  2856	  2862	  2866	  4141	  4142	  4238	  4270
GOTCOR	  1595	  1606#
GOTDRV	  2072	  2081#
GOTDV0	  2091	  2098#	  2140
GOTDV1	  2111#	  2126
GOTDV2	  2110	  2121#
GOTDV3	  2089	  2131#
GOTDV4	  2133	  2135	  2139#
GOTDX	  2536	  2546#
GX.DN1	  3801	  3809#
GX.DON	  3779	  3786#
GX.NE	  3761#	  3772
GX.NV	  3769	  3775#	  3784
GX.NV1	  3780#	  3789
HIADDR	  1360#	  1794	  1809	  4993	  5044
HOMBTF	  1467#	  2166
HOMCOD	  1469#	  2123	  2795
HOMID	  1463#
HOMLUN	  1465#	  2811	  2819
HOMNAM	  1462#	  2122	  2792
HOMRXB	  1466#	  2825
HOMSER	  1468#	  2803
HOMSNM	  1464#	  2799	  2806
HWRACB	  1718
ICA	   896#	  2003	  4092
ICD.BT	   965#
ICD.DN	   962#
ICD.EF	   964#
ICD.SR	   963#
IDXADR	  1047#	  3805	  4790	  5029	  5049	  5118	  5186
IMMCOD	   882
IMMPTR	   882#	  1694	  4537	  4850
INFO	  3184	  3538#
IOCNTR	  1333#	  4969	  4990	  5211
IOER10	  3726	  4617#
IOER11	  4098	  4618#
IOER2	  3804	  4611#
IOER3	  3811	  4612#	  4800	  5122
IOER4	  3827	  4613#
IOER6	  4614#	  4727
IOER7	  4615#	  4807
IOER9	  4616#	  5192
IOIP	  1374#	  1940	  3990	  4006	  4022	  4026	  4111
IOLOOP	  4013#	  4015
IORTRY	  4016	  4019	  4024#
IOSET	  4085#	  4311	  4317	  4323
IOSEXI	  4139#	  4155
IOSLP	  4128#	  4136
IOWAIT	  3899	  3912	  3925	  3938	  3985	  4004#
IOXCT	  2253#	  3967	  3969	  3973	  4013	  4017	  4093	  4095	  4200	  4202	  4208	  4232	  4234	  4262
	  4264	  4406	  4408
ISTRNG	  1287#	  3177	  3282
J1	  1591#
J2	  1596#
J3	  1720#
J4	  1802#
J5	  1865#
J6	  1867#
J7	  1868#
KCFLG	    59#
KLFLG	    57#	   859	   864	   874	   877	   881	  1481	  1496	  1537	  1554	  1558	  1575	  1581	  1590
	  1639	  1647	  1670	  1703	  1716	  1723	  1734	  1737	  1742	  1770	  1825	  1875	  1944	  2096
	  2179	  2213	  2835	  2913	  3058	  3216	  3542	  3888	  4521	  4541	  4550	  5727
KLIFLG	  1424#	  1772	  3096	  3233
KLP.VR	  1039#
KLPCHN	  1037#
KLPMSK	  1038#	  2190	  2191
LAHFLG	    67#
LBSTR	  1299#	  3297	  3496
LCORAD	  1066#	  4151	  4153	  4660
LDX20	  2552	  2554	  2622#
LDX20A	  2625#	  2638
LDX20B	  2628	  2639#
LDX20C	  2650#	  2655
LKPORT	  4097	  4221#
LKPT1	  4232#	  4252
LKPT2	  4226	  4238#
LKPT3	  4243	  4252#
LKPTR	  4253	  4269	  4272	  4276#
LKPTRS	  4251	  4275#
LODBAS	  1402#	  1779	  5087	  5095
LODPAG	  4786	  4789	  4803#
LODRUN	  3190	  3197#
LODTOP	  1403#	  1782
LODTYP	  1425#	  1771	  1959	  2957	  3013	  3095
LODX20	  2085	  2530#
LR	   982#	  2098	  2229	  2565	  2568	  2590	  2598	  2636	  2641	  2657	  2661	  2669	  2672	  2675
	  2678	  2681	  2683	  2850	  2852	  2856	  2862	  2866	  2903	  4099	  4104	  4107	  4141	  4142
	  4204	  4238	  4270	  4404
LWRLIM	  1316#	  3301	  4567	  4942
M%EDT	   839#	  4938
M%MAJ	   837#	  4930	  4932
M%MIN	   838#	  4935
MAKDIR	  4989	  5136#
MAKDON	  5146#	  5159
MAPBTS	  1065#	  1947	  2058	  4525
MAPDIR	  3717#	  3727	  3742
MAPXB	  5025	  5105	  5111#	  5185
MAXCHN	  1034#	  1444	  2002	  2060	  2077	  3179	  3988
MAXCOR	  1400#	  1872	  3243
MAXDRV	  1036#	  2074
MAXUNI	  1331#	  1958	  2142	  2821	  2822	  2823
MCEPAG	  1408#	  1894	  5088
MCSPAG	  1406#	  1886
MEMMRF	  4114	  4580	  4633#
MONACB	  1062#	  1718
MONLOD	  1432#	  1939	  3174	  3199	  3203	  4760	  4809
MONPDV	  1429#	  1430
MOVAC	  1257	  1608#	  1609
MOVEND	  1611	  5721#	  5722
MRET1	  3131	  3135#
MRET2	  2036	  3134#
MSCDBG	    75#
MSEC1	  5748#
MSGHDR	  1416#	  1902	  2033	  2573	  3197	  4962
MVCLEN	  1257	  5722#
MXPDMP	  1398#	  5058
N.BKP4	  1389#	  1398	  2867	  4309	  4315	  4321
N.BPP	  1381#	  4117	  5054
N.CLP	  1378#	  4073
N.CLP4	  1392#	  4306
N.CLP6	  1393#	  4312
N.CLP7	  1394#	  4318
N.SCL	  1379#	  4068	  5038	  5051
N.SCL4	  1390#	  1398	  4307	  4313
N.SCL7	  1391#	  4319
N.SPG2	  1397#
N.STK	  1380#	  4069
N.STK4	  1396#	  4308	  4314
N.STK7	  1395#	  4320
NCHAN	  1035#	  1372	  4167	  4190
NCSTPG	  1182#	  1189	  1239	  1705
NDMPM	  1064#	  4966	  5224
NEWENT	  5137	  5142	  5145	  5149#
NEXTXB	  5048	  5102#
NMEG	  1180#	  1182
NOLDDX	  1414#	  1899	  2084	  2152
NORP20	  1880	  1884#
NOTDMP	  3792	  3795	  3798#
NOVER	  2690	  2694#
NOVERC	  2605	  2689#
NOVERW	  2615	  2692#
NRETRY	  2843#	  2855
NXT.CH	  3372#	  3401
NXT.EX	  3379	  3381	  3385#
NXT.NT	  3377#	  3383
NXT.ST	  3386	  3399#
NXTSTA	  3284	  3365#
NXXTAB	  3391	  3406#
O	  1271#
OCTIN	  3300	  3306	  3333	  3513#
OCTRET	  3637	  3646#
OUTASC	  3632	  3642#
OUTOCN	  3625#	  3655	  3662	  3670	  3678
OUTOCT	  1923	  2704	  2710	  2717	  2729	  2736	  2937	  2941	  3204	  3581	  3586	  3593	  3597	  3601
	  3627#	  5207	  5212	  5233
OUTST1	  3613#	  3616
OUTSTR	  1921	  1936	  1970	  2559	  2574	  2576	  2579	  2585	  2697	  2700	  2706	  2712	  2727	  2734
	  2933	  2935	  2939	  2963	  3100	  3103	  3118	  3198	  3202	  3206	  3209	  3214	  3540	  3548
	  3551	  3604	  3612#	  3652	  3657	  3665	  3673	  3703	  3707	  3711	  4963	  4965	  5202	  5205
	  5210	  5227	  5229
OUTSTS	  3129	  3650#	  5235
P	  1156#	  1614	  1777	  1780	  1781	  1782	  1783	  1784	  1785	  1820	  1821	  1822	  1919	  1933
	  1954	  2083	  2086	  2253	  2645	  2659	  2667	  2674	  2694	  2707	  2713	  2725	  2738	  2919
	  2920	  2921	  2926	  2927	  2928	  2947	  2966	  2973	  2980	  3097	  3101	  3108	  3111	  3115
	  3123	  3128	  3171	  3579	  3584	  3628	  3639	  3641	  3646	  3647	  3650	  3681	  3855	  3858
	  3872	  3875	  3897	  3901	  3904	  3981	  3987	  4008	  4021	  4025	  4038	  4039	  4040	  4047
	  4050	  4052	  4053	  4054	  4085	  4103	  4106	  4116	  4139	  4165	  4166	  4184	  4185	  4188
	  4189	  4211	  4212	  4223	  4224	  4260	  4261	  4275	  4276	  4277	  4538	  4547	  4571	  4572
	  4586	  4588	  4589	  4795	  4796	  4801	  4802	  4978	  4981	  4985	  4987	  4988	  5022	  5026
	  5031	  5073	  5102	  5106	  5113	  5114	  5115	  5116	  5124	  5125	  5126	  5127	  5218	  5219
	  5220	  5221	  5236	  5237	  5238	  5239
P.NOS	  3311	  3338#
P.NXS	  3315#	  3319
P.NXT	  3284#	  3289
P.SA	  3328	  3333#
P.SW2	  3322	  3327#
P.TRM	  3285	  3291#
P1	  1144#	  1592	  1593	  1597	  1598	  1615	  1625	  1626	  1630	  1631	  1632	  1633	  1634	  1642
	  1648	  1653	  1658	  1660	  1662	  1666	  1671	  1676	  1686	  1702	  1704	  1724	  1726	  1777
	  1778	  1779	  1793	  1799	  1800	  1815	  1816	  3771	  3772	  3781	  3782	  3820	  3828	  3842
	  3843	  3844	  3855	  3856	  3858	  3863	  3864	  3867	  3872	  3873	  3875	  4735	  4736	  4750
	  4752	  4754	  4756	  4758	  4815	  4892	  4894	  4896	  4897	  4901	  4902	  5032	  5043	  5721
P2	  1145#	  1612	  1614	  1653	  1654	  1715	  1718	  1720	  1735	  1740	  1743	  1974	  1979	  1987
	  1991	  4750	  4751	  4816	  4817	  5027	  5036	  5058	  5065	  5071	  5072	  5716	  5718
P3	  1146#	  1615	  1793	  1797	  1809	  1811	  1814	  1817	  1818	  3293	  3299	  3301	  3305	  3307
	  3514	  3520	  3521	  3527	  4075	  4076	  4405	  4894	  5715	  5717	  5719
P4	  1147#	  1617	  2850	  2852	  2880	  3366	  3394	  3717	  3724	  3802	  3809	  3823	  3955	  4041
	  4166	  4167	  4168	  4178	  4182	  4183	  4184	  4189	  4190	  4191	  4205	  4207	  4210	  4211
	  4513	  4520	  4564	  4571	  4575	  4583	  4584	  4589	  4642	  4643	  4644	  4648	  4662	  4724
	  4756	  4757	  4761	  4795	  4798	  4802	  4808	  4812	  4826	  4827	  4828	  4829	  4848	  4984
	  5070	  5071	  5119	  5189	  5720
P5	  1148#	  1609	  1610	  1611	  1626	  1783	  1786	  1787	  1788	  1789	  1872	  3283	  3285	  3286
	  3288	  3365	  3387	  3388	  3718	  3723	  3799	  3805	  3806	  3822	  3824	  3830	  3896	  3923
	  3956	  4042	  4048	  4725	  4790	  4791	  4805	  5073	  5118	  5186	  5187	  5715	  5716	  5717
P6	  1149#	  2530	  2535	  2544	  2549	  2581	  2623	  2625	  2632	  2650	  2730	  2732	  3180
PAG	  1555	  1559	  1582	  1586	  1720	  1738	  1743
PAGTRP	  1574	  5726#
PARSE	  3182	  3279#
PASS	  1413#	  1995	  2147	  2151
PASS0	  3200	  3208#
PATCH	  5799#
PCSTOR	  5750	  5751	  5773	  5789#
PDL	  1442#	  5244
PDLEN	  1441#	  1442	  5244
PDP	  1919	  1933	  1954	  5244#
PFERR	  1646	  2914#
PFFLG	  1412#	  2925	  4544	  4552
PFH	  1931	  2919#
PFH1	  2924	  2931#
PFLAGS	  1435#	  3135	  3169
PGCACB	  1718
PGCLDE	  1556	  1739
PGCLKE	  1556	  1739
PGCNTR	  1334#	  4970	  4991	  5206
PGKLMD	  1735
PGLACB	  1718
PGLUBR	  1715	  1718
PGPACB	  1718
PGSIZ	  1033	  1058#	  5150
PGTPEN	  1735
PHYADR	  1190#
PHYORG	  1216#
PHYPAG	  1189#	  1190	  1818	  3323
PHYZRO	  4833	  4846#
PI0ENB	  1842	  1845	  1849	  3053#
PIAINI	  1444#	  2182	  3176	  3178	  3179	  4178	  4182	  4205	  4207
PIENB	  1845	  3054#
PM%CNT	  5758	  5783
PM%EX	  5758	  5783
PM%RD	  5758	  5783
PM%WR	  5758	  5783
PORG	   848
PORTLK	  1433#	  2158	  2162	  2165	  4221	  4258	  4282
PTCACH	   882
PTRCOD	   882	  1661
PTWR	   882	  1661
Q1	  1141#	  1843	  1845	  1846	  1849	  1850	  1855	  1860	  1863	  1864	  1865	  2551	  2553	  2630
	  2637	  2654	  2695	  2702	  2708	  2715	  2737	  2919	  2922	  2923	  2928	  2961	  2965	  2967
	  2971	  2977	  2982	  2983	  2984	  2986	  2987	  2993	  2999	  3001	  3069	  3071	  3078	  3079
	  3080	  3251	  3252	  3255	  3256	  3259	  3260	  3265	  3266	  3271	  3272	  3273	  3373	  3374
	  3380	  3399	  3582	  3587	  3594	  3598	  3613	  3614	  3631	  3638	  3640	  3642	  3689	  3690
	  3691	  3695	  3700	  3704	  3708	  3730	  3736	  4758	  4766	  4787	  4803	  4813	  4835	  5049
	  5050	  5051	  5052	  5138	  5140	  5141	  5219	  5238
Q2	  1142#	  1920	  1922	  1935	  1963	  2148	  2149	  2155	  2557	  2573	  2575	  2578	  2584	  2689
	  2692	  2699	  2701	  2705	  2707	  2711	  2713	  2714	  2725	  2726	  2728	  2731	  2733	  2735
	  2738	  2813	  2824	  2829	  2920	  2927	  2932	  2934	  2936	  2938	  2940	  2962	  3097	  3099
	  3101	  3102	  3114	  3115	  3117	  3119	  3120	  3122	  3123	  3127	  3128	  3197	  3201	  3203
	  3205	  3208	  3212	  3253	  3257	  3261	  3267	  3271	  3282	  3287	  3291	  3297	  3303	  3309
	  3310	  3317	  3373	  3375	  3515	  3519	  3538	  3547	  3550	  3580	  3585	  3592	  3596	  3600
	  3602	  3612	  3613	  3629	  3630	  3651	  3654	  3656	  3660	  3661	  3664	  3668	  3669	  3672
	  3676	  3677	  3693	  3702	  3706	  3710	  3726	  3761	  3773	  3783	  3804	  3807	  3811	  3827
	  3846	  3850	  3865	  3877	  4098	  4114	  4580	  4727	  4742	  4754	  4755	  4792	  4800	  4807
	  4811	  4893	  4962	  4964	  5055	  5122	  5139	  5140	  5143	  5144	  5146	  5151	  5157	  5158
	  5188	  5192	  5198	  5199	  5203	  5206	  5208	  5211	  5220	  5226	  5228	  5232	  5237
Q3	  1143#	  2921	  2926	  2955	  2956	  2967	  2969	  2970	  2975	  2979	  2986	  2990	  2993	  2996
	  3250	  3252	  3256	  3260	  3266	  3273	  3367	  3368	  3369	  3396	  3399	  3625	  3627	  3628
	  3629	  3631	  3636	  3638	  3764	  3765	  3766	  3848	  3849	  3851	  3852	  3854	  3856	  3859
	  3860	  3861	  3873	  3876	  3878	  5042	  5059	  5069	  5070	  5168	  5169	  5171	  5173	  5175
	  5177	  5178	  5180	  5182	  5221	  5236
R	  2949#	  3614	  4710	  5030
R4%ATN	  1008#	  2903
R4%CDC	  1024#
R4%CPA	  1027#	  2098	  4238
R4%CRC	  1023#	  2856
R4%CRD	  1029#	  2866	  4141
R4%CSK	  1022#
R4%CSR	   989#	  2098	  2856	  2862	  4240	  4270	  4284
R4%CWR	  1028#	  4142
R4%DCA	  1012#	  4099
R4%DSR	   992#	  2858	  2891	  3658	  4244
R4%DST	  1009#	  4104
R4%DTR	  1010#
R4%ER1	  1007#	  3666
R4%ER2	  1011#
R4%ER3	  1013#	  3674
R4%REL	  1025#	  4270
R4%RIP	  1026#	  2862
R4%TYP	  1016#	  2081
RAD.NX	  3515#	  3522
RADIN	  3512	  3514#
RCLP	   984#	  2866	  4141	  4142
RD0	  2108	  2852#
RD00	  2856#	  2905
RD0A	  2858#	  2861
RD10	  2121	  2850#
RDPGRT	  3719	  3810#
REDPAG	  3725	  3803	  3810	  3826	  3923#	  4726	  4799	  4806	  5121
RETRY	  4028	  4034#
RH%XFR	  1014#
RH0	   895#	  2252	  3984	  4080	  4199
RHCI1	  2187	  2217	  2241#	  2885	  2895
RHCO1	  2184	  2186	  2221	  2245#	  2889	  2900	  2902
RHDIO	  4180	  4206	  4406#
RHDIO1	  2231#
RHERR	  1030#	  2896	  4018
RHRD	  4404#
RHRD1	  2101	  2215	  2229#	  2601	  2611	  2644	  2859	  2892	  3659	  3667	  3675	  4241	  4245	  4267
	  4285	  4289
RHWT	  4405#
RHWT1	  2099	  2230#	  2566	  2569	  2591	  2631	  2642	  2658	  2662	  2670	  2673	  2676	  2679	  2682
	  2684	  2857	  2863	  2881	  2884	  2904	  4101	  4105	  4112	  4239	  4271
RP4TYP	  2113	  4306#
RP6TYP	  2115	  4312#
RP7TYP	  2117	  4318#
RPT	  1068#	  5139	  5146
RSKP	  2189	  2194	  2222	  2639	  2830	  2946#	  3883	  3914	  3940	  4007	  4023	  4222	  4283	  4295
	  4530	  5099
RSTART	  1912	  1925	  1931#
RSTLP	  4191#	  4210
RSTLP1	  4193	  4210#
RWCMN	  3903	  3934	  3942#	  4051
SAV.EX	  4982	  4993#
SAV.LP	  4978#	  4996
SAV.WR	  4980	  4984#
SAVE	  3191	  4962#
SAVLP	  4168#	  4183
SAVLP1	  4170	  4183#
SAVSLT	  1343#	  4847	  4856
SETCST	  1707#	  1708
SETEP1	  1815	  1817#
SETEP3	  1844#	  1861
SETEP4	  1857	  1863#
SETEP5	  1848	  1858#
SETEPT	  1796#	  1819
SETLCV	  3218	  3233#
SETLIM	  4931	  4936	  4941#
SETPTB	  1693#	  1697
SETRTY	  3905	  3936	  3953#
SETSA	  3334	  3526#	  4895
SHRCOD	  1661
SMFLG	    58#
SPTADR	  1500#	  1725
SPTDSW	    86#
ST.0	  3283	  3450#	  3505
ST.1	  3451	  3458#
ST.1B	  3451	  3464#
ST.2	  3451	  3459	  3465	  3471#
ST.3	  3451	  3472	  3478#
ST.4	  3451	  3472	  3479	  3484#
ST.5	  3451	  3472	  3479	  3485	  3490#
ST.6	  3388	  3491	  3496#
ST.7	  3497	  3502#
START	  1288#	  3224	  3227	  3527	  3528
STDX20	  2555	  2564#
STLW	   985#	  2866	  4141	  4142
STPORG	  3288	  3446#	  3506
STRCM1	  3877#	  3881
STRCMP	  3767	  3862	  3872#
STRHOM	  2824	  2829	  4624#
STRMTO	  2813	  4628#
STRNAM	  1344#	  1942	  1987	  1991	  2800	  3120
STRNBS	  2148	  4627#
STRNID	  2155	  4626#
STRSNF	  2149	  4625#
STTSIZ	   890#	  3428	  3505
SWSTR	  1297#	  3309	  3490
SWTAB	  3313	  3341#
SWXTAB	  3320	  3345#
SYMAD	  3854
SYMBOT	  1459#	  3840	  3842
SYMET	  3848
SYMTAB	  5767	  5770	  5791#
SYMTOP	  1460#	  3841
SYMVL	  3851
T1	  1137#	  1574	  1576	  1578	  1579	  1580	  1583	  1586	  1611	  1618	  1631	  1632	  1634	  1640
	  1642	  1646	  1648	  1658	  1659	  1660	  1661	  1662	  1676	  1686	  1695	  1696	  1704	  1705
	  1707	  1708	  1724	  1725	  1727	  1728	  1738	  1739	  1740	  1743	  1746	  1797	  1798	  1799
	  1800	  1801	  1802	  1803	  1804	  1805	  1806	  1833	  1834	  1840	  1853	  1854	  1855	  1856
	  1861	  1878	  1881	  1882	  1884	  1889	  1893	  1894	  1895	  1896	  1897	  1898	  1901	  1902
	  1907	  1908	  1909	  1910	  1911	  1918	  1931	  1932	  1941	  1942	  1943	  1944	  1945	  1946
	  1947	  1948	  1955	  1957	  1973	  1975	  1981	  1992	  1994	  1999	  2000	  2003	  2005	  2029
	  2032	  2033	  2034	  2061	  2062	  2063	  2064	  2073	  2074	  2076	  2077	  2088	  2090	  2092
	  2098	  2100	  2103	  2105	  2107	  2113	  2115	  2117	  2118	  2119	  2122	  2123	  2142	  2154
	  2156	  2159	  2160	  2161	  2163	  2164	  2181	  2182	  2183	  2185	  2188	  2190	  2191	  2214
	  2216	  2218	  2220	  2229	  2230	  2232	  2234	  2242	  2246	  2547	  2550	  2564	  2565	  2567
	  2568	  2580	  2582	  2593	  2600	  2602	  2603	  2607	  2608	  2610	  2612	  2613	  2626	  2627
	  2628	  2629	  2630	  2633	  2634	  2635	  2636	  2640	  2641	  2643	  2645	  2646	  2648	  2651
	  2652	  2653	  2656	  2657	  2659	  2660	  2661	  2667	  2668	  2669	  2671	  2672	  2674	  2675
	  2677	  2678	  2680	  2681	  2683	  2694	  2792	  2793	  2795	  2796	  2799	  2800	  2803	  2804
	  2806	  2808	  2809	  2811	  2812	  2815	  2818	  2819	  2820	  2822	  2823	  2856	  2858	  2860
	  2862	  2867	  2868	  2880	  2882	  2886	  2888	  2891	  2893	  2896	  2899	  2901	  2903	  2956
	  2966	  2968	  2973	  2975	  2979	  2980	  2989	  2990	  3092	  3093	  3107	  3108	  3110	  3177
	  3199	  3200	  3223	  3224	  3233	  3234	  3235	  3236	  3237	  3238	  3239	  3240	  3241	  3242
	  3243	  3244	  3245	  3246	  3247	  3248	  3279	  3280	  3310	  3311	  3318	  3323	  3326	  3329
	  3331	  3377	  3378	  3379	  3380	  3382	  3385	  3386	  3390	  3391	  3515	  3516	  3517	  3518
	  3521	  3552	  3579	  3580	  3584	  3585	  3658	  3660	  3666	  3668	  3674	  3676	  3688	  3694
	  3728	  3729	  3733	  3734	  3735	  3736	  3737	  3738	  3743	  3744	  3745	  3757	  3764	  3771
	  3776	  3778	  3781	  3787	  3796	  3799	  3820	  3821	  3822	  3828	  3829	  3840	  3841	  3844
	  3848	  3851	  3854	  3859	  3867	  3876	  3877	  3879	  3881	  3896	  3911	  3923	  3937	  3953
	  3954	  3955	  3956	  3960	  3961	  3980	  3981	  3982	  3987	  3988	  3989	  3990	  3991	  4005
	  4009	  4048	  4067	  4068	  4073	  4075	  4077	  4078	  4079	  4080	  4090	  4091	  4092	  4099
	  4100	  4102	  4103	  4104	  4106	  4107	  4115	  4127	  4128	  4135	  4139	  4143	  4144	  4151
	  4152	  4153	  4154	  4165	  4168	  4169	  4174	  4176	  4177	  4178	  4179	  4181	  4182	  4185
	  4188	  4191	  4192	  4197	  4198	  4204	  4205	  4207	  4209	  4212	  4224	  4238	  4240	  4242
	  4244	  4246	  4247	  4249	  4250	  4261	  4266	  4268	  4270	  4276	  4284	  4286	  4288	  4292
	  4293	  4404	  4405	  4407	  4409	  4513	  4514	  4520	  4522	  4525	  4526	  4529	  4537	  4539
	  4546	  4564	  4565	  4566	  4567	  4574	  4581	  4648	  4649	  4653	  4654	  4659	  4660	  4661
	  4662	  4663	  4736	  4739	  4744	  4745	  4767	  4769	  4770	  4787	  4788	  4790	  4794	  4803
	  4804	  4805	  4827	  4828	  4829	  4846	  4847	  4848	  4849	  4850	  4851	  4854	  4855	  4856
	  4857	  4896	  4897	  4901	  4902	  4926	  4927	  4929	  4930	  4932	  4934	  4935	  4937	  4938
	  4941	  4942	  4943	  4944	  4948	  4950	  4951	  4952	  4953	  4954	  4966	  4967	  4972	  4973
	  4976	  4978	  4981	  4982	  4988	  4992	  4993	  4995	  5022	  5023	  5024	  5026	  5032	  5037
	  5042	  5043	  5044	  5059	  5069	  5087	  5088	  5091	  5092	  5094	  5095	  5102	  5103	  5104
	  5106	  5111	  5113	  5117	  5118	  5127	  5141	  5153	  5155	  5164	  5165	  5166	  5167	  5170
	  5171	  5172	  5173	  5174	  5175	  5176	  5177	  5179	  5180	  5181	  5182	  5184	  5223	  5224
	  5230	  5231	  5232	  5720	  5751	  5752	  5756	  5766	  5767	  5770	  5771	  5773	  5781
T2	  1138#	  1671	  1672	  1673	  1685	  1693	  1697	  1841	  1852	  1858	  1879	  1880	  1881	  1882
	  1884	  1885	  1886	  1979	  1985	  2001	  2003	  2004	  2030	  2031	  2060	  2061	  2065	  2081
	  2083	  2086	  2090	  2093	  2111	  2112	  2114	  2116	  2131	  2132	  2134	  2136	  2138	  2139
	  2166	  2167	  2168	  2169	  2216	  2531	  2538	  2622	  2624	  2626	  2627	  2629	  2633	  2634
	  2638	  2639	  2651	  2652	  2655	  2814	  2815	  2816	  2817	  2818	  2825	  2827	  2828	  2883
	  2887	  2890	  2957	  2995	  2996	  3006	  3009	  3013	  3109	  3110	  3111	  3178	  3179	  3312
	  3319	  3320	  3330	  3369	  3394	  3395	  3396	  3511	  3513	  3517	  3520	  3739	  3746	  3758
	  3787	  3788	  3800	  3878	  3879	  3897	  3901	  3904	  3932	  3935	  3961	  4004	  4005	  4006
	  4008	  4011	  4021	  4022	  4024	  4025	  4026	  4043	  4047	  4050	  4069	  4070	  4071	  4072
	  4074	  4085	  4109	  4110	  4111	  4116	  4117	  4118	  4129	  4130	  4132	  4225	  4252	  4574
	  4581	  4737	  4738	  4741	  4744	  4950	  4951	  4980	  4985	  4987	  4991	  4992	  5029	  5030
	  5031	  5038	  5052	  5072	  5114	  5126	  5143	  5157	  5190	  5757	  5782
T3	  1139#	  1693	  1694	  1695	  1706	  1707	  1842	  1844	  1847	  1859	  1980	  1986	  2002	  2006
	  2056	  2058	  2059	  2063	  2600	  2603	  2607	  2613	  2701	  2714	  2855	  2905	  3007	  3010
	  3012	  3313	  3315	  3376	  3377	  3382	  3385	  3387	  3740	  3747	  3957	  3959	  3960	  4012
	  4015	  4016	  4071	  4086	  4087	  4088	  4089	  4092	  4118	  4119	  4121	  4122	  4123	  4126
	  4128	  4134	  4136	  4138	  4149	  4150	  4152	  4154	  4738	  4739	  5054	  5055	  5115	  5125
	  5136	  5138	  5139	  5146	  5149	  5150	  5152	  5153	  5154	  5155	  5758	  5783
T4	  1140#	  1981	  1982	  1984	  1985	  2866	  2868	  2882	  3170	  3171	  3315	  3316	  3318	  3365
	  3366	  3367	  3370	  3376	  3790	  3791	  3793	  3794	  3796	  3797	  3974	  4009	  4010	  4041
	  4042	  4043	  4044	  4108	  4110	  4120	  4124	  4125	  4126	  4130	  4131	  4132	  4133	  4134
	  4135	  4141	  4142	  4144	  4146	  5023	  5028	  5029	  5046	  5047	  5049	  5107	  5116	  5124
T7.1RC	   969#
T7.BSR	   979#
T7.CDP	   968#
T7.ICD	   961#
T7.RDF	   980#
T7.RDY	   972#
T7.REW	   977#
T7.SER	   967#
T7.SNS	   978#
T7.TMR	   976#
T8.IDX	  1152#
TA.BAD	  4582	  4588#
TA.NXT	  4579#	  4585
TAPHTE	  4620#
TAPNDR	  4634#
TAPTYP	  1347#	  3180
TDX20	  2535#
TFIL	  3116	  3122#
TIMOUT	  1031#	  2883	  4225
TIMSET	  4012#	  4029
TM.IDX	  1150#
TMCD16	   924#
TMCD8	   923#
TMCVER	  2583	  3553	  3579#
TMSDRY	   917#
TMSIDB	   918#
TMSMOL	   916#	  2103
TMSPIP	   915#
TO11DB	  1865	  3055#	  3080
TOP2	  1258	  1746#
TOPBAS	  1404#	  1785	  5091	  5094
TOPTOP	  1405#	  1788	  5092
TRAP	  1907	  1918#
TRAPPC	  1914#	  1918	  1922
TRYTYP	  2546	  2573#
TSSTRT	  3222	  3226#
TSTADD	  1816	  1820	  4511#	  4540	  4545	  4548	  4852	  4853	  4854	  4855	  4858
TSTADR	  4564#	  4646	  4767	  4824
TSTCOR	  1594#
TSTM1	  1812	  1816#
TSTMEM	  1807#
TSTSLT	  1822	  4508#	  4538	  4539	  4546	  4547	  4846	  4851	  4857
TYI	  2960	  3067#	  3068
TYO	  2696	  2703	  2709	  2716	  2739	  2972	  2976	  2978	  3000	  3002	  3070	  3077#	  3583	  3588
	  3595	  3599	  3615	  3643	  3692	  3696	  3701	  3705	  3709
TYPBVR	  1937	  3541	  3592#
TYPDX2	  2577	  2725#
TYPFIL	  3124	  3700#
TYPST1	  3690#	  3694
TYPSTR	  3121	  3688#
TYPSZ	  1384#	  1385	  2119	  4312	  4318	  4324
UBSTR	  1298#	  3303	  3502
UKPORT	  4020	  4258#
UPRLIM	  1317#	  3307	  3326	  4566	  4944	  4954
UPTPFN	  1483#	  1576	  1648	  1932
UPTPFO	  1484#	  2914	  2915	  2922	  2936	  5728	  5729
UPTPFW	  1482#	  2940
V%EDIT	   832#	  1544	  3600
V%MAJO	   830#	  1544	  3592
V%MINO	   831#	  1544	  3596
V%WHO	   829#	  1544
VBADR	  1088#	  5177
VBCNT	  1087#	  5175
VBDDAT	  1452#
VBEND	  1451#
VBEPT	  1450#
VBOOT	  3169#	  3238	  5704
VBOOT1	  2035	  3175#
VBSIZ	  1086#	  5173
VBSTRT	  1449#
VBTRET	  2036#	  3170
VBTYP	  1085#	  5171
VERNUM	  1315#	  3263	  3293	  3747
VERSTR	  1296#	  3267	  3291	  3484
VFREE	  1215#	  1221	  1221#	  1223	  1223#	  1225	  1225#	  1227	  1227#	  1229	  1229#	  1231	  1231#	  1233
	  1233#	  1235	  1235#	  1237	  1237#	  1239	  1239#	  1241	  1244	  1244#	  1814	  3305	  4508	  4511
VORG	  1214#	  1215	  1216	  1242	  1673	  4584
VR.NUM	  3577#	  3580
WRTDIR	  4994	  4998	  5164#
WRTPAG	  3896#	  3910	  4986
WRTWAT	  3910#	  5191
XADR	  1368#	  3955	  4041
XBNUM	  1358#	  3798	  3808	  4785	  4788	  4794	  4968	  5103	  5111	  5117
XCHAN	  1371#	  1372	  3954	  4010
XCNT	  1370#	  1371	  3960	  3961	  4043	  4044
XDSK	  1369#	  3956	  4042
XI	  2594	  2609	  2647	  2649	  2667#
XIO1	  2231	  2233	  2241	  2245	  2251#	  3653	  4175
Z.END	  1337#	  1957
Z.STRT	  1285#	  1955	  1956
ZERO	  3420#
ZOOT	  1438#
$DIDIR	  5167#
$DIFIL	  4758#
$DIPRO	  4756#
$DIRPT	  4754#
$EBSIZ	  5182#
$EBTYP	  5180#
$ED.NU	  3585#
$FBADR	  3799#
$FBBYV	  3796#
$FBCTL	  3787#
$FBEXL	  3771#
$FBEXT	  3764#
$FBGEN	  3776#
$FBGNL	  3781#
$FBNAM	  3859#
$IDXAD	  3805#	  4790#	  5029#	  5049#	  5118#	  5186#
$RPT	  5139#	  5146#
$SYMAD	  3854#
$SYMET	  3848#
$SYMVL	  3851#
$VBADR	  5177#
$VBCNT	  5175#
$VBSIZ	  5173#
$VBTYP	  5171#
$VR.NU	  3580#
%COUNT	  4606#	  4611	  4611#	  4612	  4612#	  4613	  4613#	  4614	  4614#	  4615	  4615#	  4616	  4616#	  4617
	  4617#	  4618	  4618#	  4620	  4620#	  4621	  4621#	  4622	  4622#	  4623	  4623#	  4624	  4624#	  4625
	  4625#	  4626	  4626#	  4627	  4627#	  4628	  4628#	  4629	  4629#	  4630	  4630#	  4631	  4631#	  4632
	  4632#	  4633	  4633#	  4634	  4634#
%DIDIR	  5167
%DIFIL	  4758
%DIPRO	  4756
%DIRPT	  4754
%DVSTS	  3127	  4609#	  4611	  4611#	  4612	  4612#	  4613	  4613#	  4614	  4614#	  4615	  4615#	  4616	  4616#
	  4617	  4617#	  4618	  4618#	  4620	  4620#	  4637	  4637#
%EBSIZ	  5182
%EBTYP	  5180
%ED.NU	  3585
%FBADR	  3799
%FBBYV	  3796
%FBCTL	  3787
%FBEXL	  3771
%FBEXT	  3764
%FBGEN	  3776
%FBGNL	  3781
%FBNAM	  3859
%FNAM	  3122	  4608#	  4611	  4611#	  4612	  4612#	  4613	  4613#	  4614	  4614#	  4615	  4615#	  4616	  4616#
	  4621	  4621#	  4622	  4622#	  4623	  4623#	  4636	  4636#
%IDXAD	  3805	  4790	  5029	  5049	  5118	  5186
%RPT	  5139	  5146
%SNAM	  3114	  4607#	  4611	  4611#	  4612	  4612#	  4613	  4613#	  4614	  4614#	  4615	  4615#	  4616	  4616#
	  4617	  4617#	  4621	  4621#	  4622	  4622#	  4623	  4623#	  4624	  4624#	  4625	  4625#	  4626	  4626#
	  4635	  4635#
%SYMAD	  3854
%SYMET	  3848
%SYMVL	  3851
%VBADR	  5177
%VBCNT	  5175
%VBSIZ	  5173
%VBTYP	  5171
%VR.NU	  3580
..0005	  4823	  4831#
..0006	  4830	  4834#
..CSC	  3580#	  3580	  3581	  3581#	  3585#	  3585	  3586	  3586#	  3764#	  3764	  3765	  3765#	  3771#	  3771
	  3772	  3772#	  3776#	  3776	  3777	  3777#	  3781#	  3781	  3782	  3782#	  3787#	  3787	  3788	  3788#
	  3796#	  3796	  3797	  3797#	  3799#	  3799	  3800	  3800#	  3805#	  3805	  3806	  3806#	  3848#	  3848
	  3849	  3849#	  3851#	  3851	  3852	  3852#	  3854#	  3854	  3855	  3855#	  3859#	  3859	  3860	  3860#
	  4754#	  4754	  4755	  4755#	  4756#	  4756	  4757	  4757#	  4758#	  4758	  4759	  4759#	  4790#	  4790
	  4791	  4791#	  5029#	  5029	  5030	  5030#	  5049#	  5049	  5050	  5050#	  5118#	  5118	  5119	  5119#
	  5139#	  5139	  5140	  5140#	  5146#	  5146	  5147	  5147#	  5167#	  5167	  5168	  5168#	  5171#	  5171
	  5172	  5172#	  5173#	  5173	  5174	  5174#	  5175#	  5175	  5176	  5176#	  5177#	  5177	  5178	  5178#
	  5180#	  5180	  5181	  5181#	  5182#	  5182	  5183	  5183#	  5186#	  5186	  5187	  5187#
..CSN	  3580#	  3580	  3585#	  3585	  3764#	  3764	  3771#	  3771	  3776#	  3776	  3781#	  3781	  3787#	  3787
	  3796#	  3796	  3799#	  3799	  3805#	  3805	  3848#	  3848	  3851#	  3851	  3854#	  3854	  3859#	  3859
	  4754#	  4754	  4756#	  4756	  4758#	  4758	  4790#	  4790	  5029#	  5029	  5049#	  5049	  5118#	  5118
	  5139#	  5139	  5146#	  5146	  5167#	  5167	  5171#	  5171	  5173#	  5173	  5175#	  5175	  5177#	  5177
	  5180#	  5180	  5182#	  5182	  5186#	  5186
..MX1	  2168#	  2168	  2610#	  2610	  2643#	  2643	  2683#	  2683	  2858#	  2858	  2891#	  2891	  3658#	  3658
	  3666#	  3666	  3674#	  3674	  3959#	  3959	  4004#	  4004	  4011#	  4011	  4099#	  4099	  4109#	  4109
	  4151#	  4151	  4179#	  4179	  4204#	  4204
..MX2	  2168#	  2169	  2610#	  2610	  2643#	  2643	  2644	  2683#	  2683	  2684	  2858#	  2858	  2859	  2891#
	  2891	  2892	  3658#	  3658	  3659	  3666#	  3666	  3667	  3674#	  3674	  3675	  3959#	  3959	  3960
	  4004#	  4005	  4011#	  4012	  4099#	  4099	  4100	  4109#	  4110	  4151#	  4151	  4152	  4179#	  4179
	  4180	  4204#	  4204	  4205
..PST	  3580#	  3580	  3585#	  3585	  3764#	  3764	  3771#	  3771	  3776#	  3776	  3781#	  3781	  3787#	  3787
	  3796#	  3796	  3799#	  3799	  3805#	  3805	  3848#	  3848	  3851#	  3851	  3854#	  3854	  3859#	  3859
	  4754#	  4754	  4756#	  4756	  4758#	  4758	  4790#	  4790	  5029#	  5029	  5049#	  5049	  5118#	  5118
	  5139#	  5139	  5146#	  5146	  5167#	  5167	  5171#	  5171	  5173#	  5173	  5175#	  5175	  5177#	  5177
	  5180#	  5180	  5182#	  5182	  5186#	  5186
..TX1	  1694#	  1694	  1798#	  1798	  1821#	  1821	  1947#	  1947	  2000#	  2000	  2031#	  2031	  2058#	  2058
	  2167#	  2167	  2565#	  2565	  2568#	  2568	  2636#	  2636	  2641#	  2641	  2657#	  2657	  2661#	  2661
	  2669#	  2669	  2672#	  2672	  2675#	  2675	  2678#	  2678	  2681#	  2681	  2860#	  2860	  2886#	  2886
	  2893#	  2893	  2896#	  2896	  3006#	  3006	  3009#	  3009	  3093#	  3093	  3221#	  3221	  3281#	  3281
	  3295#	  3295	  3296#	  3296	  3298#	  3298	  3304#	  3304	  3325#	  3325	  3389#	  3389	  3788#	  3788
	  3800#	  3800	  3902#	  3902	  3933#	  3933	  3958#	  3958	  4045#	  4045	  4046#	  4046	  4067#	  4067
	  4089#	  4089	  4104#	  4104	  4107#	  4107	  4127#	  4127	  4140#	  4140	  4242#	  4242	  4246#	  4246
	  4247#	  4247	  4268#	  4268	  4286#	  4286	  4292#	  4292	  4293#	  4293	  4515#	  4515	  4525#	  4525
	  4537#	  4537	  4732#	  4732	  4759#	  4759	  4764#	  4764	  4768#	  4768	  4797#	  4797	  4822#	  4822
	  4850#	  4850	  4947#	  4947	  4975#	  4975	  4997#	  4997	  5120#	  5120	  5123#	  5123	  5183#	  5183
	  5197#	  5197	  5201#	  5201	  5222#	  5222	  5752#	  5752
..TX2	  1694#	  1694	  1695	  1798#	  1798	  1799	  1821#	  1821	  1822	  1947#	  1947	  1948	  2000#	  2000
	  2001	  2031#	  2031	  2032	  2058#	  2058	  2059	  2167#	  2167	  2168	  2565#	  2565	  2566	  2568#
	  2568	  2569	  2636#	  2636	  2637	  2641#	  2641	  2642	  2657#	  2657	  2658	  2661#	  2661	  2662
	  2669#	  2669	  2670	  2672#	  2672	  2673	  2675#	  2675	  2676	  2678#	  2678	  2679	  2681#	  2681
	  2682	  2860#	  2861	  2886#	  2887	  2893#	  2894	  2896#	  2897	  3006#	  3006	  3007	  3009#	  3009
	  3010	  3093#	  3093	  3094	  3221#	  3221	  3222	  3281#	  3281	  3282	  3295#	  3295	  3296	  3296#
	  3297	  3298#	  3298	  3299	  3304#	  3304	  3305	  3325#	  3325	  3326	  3389#	  3389	  3390	  3788#
	  3788	  3789	  3800#	  3800	  3801	  3902#	  3902	  3903	  3933#	  3933	  3934	  3958#	  3958	  3959
	  4045#	  4045	  4046	  4046#	  4047	  4067#	  4067	  4068	  4089#	  4089	  4090	  4104#	  4104	  4105
	  4107#	  4107	  4108	  4127#	  4127	  4128	  4140#	  4140	  4141	  4242#	  4243	  4246#	  4247	  4247#
	  4248	  4268#	  4269	  4286#	  4287	  4292#	  4293	  4293#	  4294	  4515#	  4515	  4516	  4525#	  4525
	  4526	  4537#	  4537	  4538	  4732#	  4732	  4733	  4759#	  4759	  4760	  4764#	  4764	  4765	  4768#
	  4768	  4769	  4797#	  4797	  4798	  4822#	  4822	  4823	  4850#	  4850	  4851	  4947#	  4947	  4948
	  4975#	  4975	  4976	  4997#	  4997	  4998	  5120#	  5120	  5121	  5123#	  5123	  5124	  5183#	  5183
	  5184	  5197#	  5197	  5198	  5201#	  5201	  5202	  5222#	  5222	  5223	  5752#	  5752	  5753
..XXX	  4306#	  4307	  4307#	  4308	  4308#	  4309	  4309#	  4310	  4310#	  4311	  4311#	  4312	  4312#	  4313
	  4313#	  4314	  4314#	  4315	  4315#	  4316	  4316#	  4317	  4317#	  4318	  4318#	  4319	  4319#	  4320
	  4320#	  4321	  4321#	  4322	  4322#	  4323	  4323#	  4324	  4324#
.CHCRT	  3007	  3010
.DISIZ	  1092#	  4815	  4816
.DRSIZ	  1061#	  5149
.DTMMN	  1863	  3037#
.DTTYO	  3036#	  3078
.DXATP	   927#	  2531
.DXBTP	   928#	  2538
.EBSIZ	  1093#	  5181
.EXDIR	  1051#	  4709	  5166
.EXEND	  1052#	  4710	  5179
.EXENT	  1053#	  4711	  5170
.EXPDV	  1054#	  4712
.FBADR	  3799
.FBBYV	  3796
.FBCTL	  3787
.FBEXL	  3771
.FBEXT	  3764
.FBGEN	  3776
.FBGNL	  3781
.FBNAM	  3859
.FHSLF	  5756	  5757	  5782
.JBSYM	  1073#	  4948
.R4TYP	  1017#	  2092	  2114	  2132	  2138	  2160
.R5TYP	  1018#	  2093	  2136	  2161
.R6TYP	  1019#	  2131	  2163
.R7TYP	  1020#	  2116	  2134	  2164
.RHAIE	   903#	  4209
.RHCLP	   902#
.RHCTE	   900#	  2888	  2899
.RHDON	   905#	  2886	  2888	  4014	  4209
.RHIVR	   908#	  4179	  4204
.RHMBE	   901#	  2185	  2188	  2220	  2888	  2899	  2901	  4177
.RHMBR	   899#	  2183	  2899
.RHRAE	   898#	  2218	  2220	  2888
.RHSBR	   906#	  2850	  2852	  4107
.RHSTP	   904#	  2899
.RHSTR	   907#	  2866	  4141	  4142
.SYMAD	  3848	  3854
.SYMVL	  3851
.T7BC	   970#
.T7FMT	   966#
.T7ICD	   960#
.T7ICN	   973#
.T7ND0	   974#
.T7SR	   971#
.T7TMS	   975#
.T8TYP	   959#
.TDATB	   954#
.TDAYR	   942#
.TDCEB	   955#
.TDCIB	   948#	  2590	  2656	  2671
.TDDEB	   931#
.TDDNR	   932#
.TDE0R	   935#	   943#
.TDE1R	   944#
.TDERR	   952#
.TDFLR	   941#
.TDIBR	   951#	  2610
.TDICB	   947#	  2564	  2598	  2640	  2677
.TDIRR	   945#	  2636	  2643	  2661	  2675
.TDMNR	   936#	  2568	  2669	  2681	  2683
.TDMOD	   933#
.TDMPR	   956#
.TDPCR	   946#	  2565	  2590	  2598	  2641	  2657	  2672	  2678
.TDPEB	   949#	  2564	  2590	  2598	  2640	  2656	  2671
.TDPIB	   950#	  2564	  2677
.TDSCB	   937#	  2668	  2680
.TDSTB	   938#	  2567	  2680
.TDSTR	   930#	   939#
.TDSTS	   953#
.TDTCR	   940#
.TDTER	   934#
.TMATR	   919#
.TMBSF	   911#
.TMCSR	   909#
.TMDSR	   913#	  2100	  4266	  4288
.TMDTR	   921#	  2214
.TMERR	   914#
.TMFCR	   920#
.TMRDF	   910#
.TMRWF	   912#
.TMTCR	   922#
.VBSIZ	  1094#	  5172	  5178

ADJBP	  2975
ALLOC	  1275#	  1287	  1288	  1293	  1294	  1295	  1296	  1297	  1298	  1299	  1300	  1305	  1306	  1307
	  1308	  1309	  1310	  1311	  1312	  1313	  1315	  1316	  1317	  1318	  1322	  1323	  1331	  1332
	  1333	  1334	  1335	  1342	  1343	  1344	  1345	  1346	  1349	  1355	  1357	  1358	  1360	  1361
	  1362	  1363	  1364	  1365	  1372	  1373	  1374	  1385	  1400	  1402	  1403	  1404	  1405	  1406
	  1408	  1409	  1410	  1411	  1412	  1413	  1414	  1415	  1416	  1424	  1425	  1428	  1429	  1432
	  1433	  1435	  1436	  1437	  1438	  1442	  1443	  1444	  1445
CALL	  1921	  1923	  1924	  1934	  1936	  1937	  1961	  1970	  1972	  2028	  2035	  2068	  2071	  2085
	  2099	  2101	  2108	  2109	  2121	  2124	  2184	  2186	  2187	  2215	  2217	  2221	  2231	  2233
	  2241	  2245	  2546	  2552	  2554	  2555	  2559	  2566	  2574	  2576	  2577	  2579	  2583	  2585
	  2601	  2609	  2611	  2631	  2637	  2642	  2644	  2647	  2649	  2654	  2658	  2670	  2673	  2676
	  2679	  2682	  2696	  2697	  2698	  2700	  2703	  2704	  2706	  2709	  2710	  2712	  2716	  2717
	  2727	  2729	  2734	  2736	  2857	  2859	  2863	  2881	  2884	  2885	  2889	  2892	  2895	  2900
	  2902	  2904	  2931	  2933	  2935	  2937	  2939	  2941	  2960	  2963	  2972	  2976	  2978	  2994
	  3000	  3070	  3098	  3100	  3103	  3118	  3121	  3124	  3126	  3129	  3181	  3182	  3184	  3189
	  3191	  3198	  3202	  3204	  3206	  3209	  3211	  3214	  3218	  3219	  3254	  3258	  3262	  3268
	  3284	  3292	  3300	  3306	  3333	  3540	  3541	  3548	  3551	  3553	  3569	  3581	  3583	  3586
	  3588	  3593	  3595	  3597	  3599	  3601	  3604	  3615	  3643	  3652	  3653	  3655	  3657	  3659
	  3662	  3663	  3665	  3667	  3670	  3673	  3675	  3678	  3680	  3692	  3696	  3701	  3703	  3705
	  3707	  3709	  3711	  3725	  3727	  3741	  3742	  3760	  3762	  3767	  3770	  3775	  3780	  3786
	  3803	  3810	  3826	  3847	  3857	  3862	  3866	  3874	  3898	  3899	  3900	  3903	  3905	  3910
	  3912	  3924	  3925	  3926	  3934	  3936	  3938	  3942	  3943	  3967	  3969	  3971	  3973	  3985
	  3986	  3992	  4013	  4017	  4020	  4028	  4049	  4051	  4093	  4095	  4097	  4101	  4105	  4112
	  4113	  4175	  4180	  4200	  4202	  4206	  4208	  4232	  4234	  4239	  4241	  4245	  4262	  4264
	  4267	  4271	  4285	  4289	  4406	  4408	  4527	  4569	  4579	  4646	  4726	  4733	  4770	  4799
	  4806	  4810	  4824	  4831	  4833	  4895	  4963	  4965	  4979	  4986	  4989	  5025	  5033	  5048
	  5056	  5097	  5105	  5121	  5185	  5191	  5196	  5202	  5205	  5207	  5210	  5212	  5213	  5225
	  5227	  5229	  5233	  5234	  5235
CALLRE	  2569	  2594	  2662	  2684	  2739	  3002	  3334
CLRPT	  1492#	  1802	  4540	  4548	  4852	  4858
CODLFT	  5700#	  5701
DEFSTR	  1039	  1077	  1078	  1079	  1080	  1081	  1082	  1083	  1085	  1086	  1087	  1088	  1089	  1090
	  1103	  1104	  3576	  3577
ELSE.	  4823	  4823#	  4830	  4831#	  4834#
ENDIF.	  4823	  4823#	  4834	  4834#
ERSTR	  4596#	  4611	  4612	  4613	  4614	  4615	  4616	  4617	  4618	  4620	  4621	  4622	  4623	  4624
	  4625	  4626	  4627	  4628	  4629	  4630	  4631	  4632	  4633	  4634
FLD	   882	  1661	  1718
HALTF	  5785
IFSKP.	  4823
IOOP	  1112#	  3967	  3973	  4013	  4017	  4093	  4200	  4232	  4262
LOAD	  3580	  3585	  3764	  3771	  3776	  3781	  3787	  3796	  3799	  3805	  3848	  3851	  3854	  3859
	  4754	  4756	  4758	  4790	  5029	  5049	  5118	  5139	  5186
MOVX	  2168	  2610	  2643	  2683	  2858	  2891	  3658	  3666	  3674	  3959	  4004	  4011	  4099	  4109
	  4151	  4179	  4204
MSKSTR	  1047	  1068
PG	  1209#	  1221	  1223	  1225	  1227	  1229	  1231	  1233	  1235	  1237	  1239
PMAP	  5759	  5784
RET	  2192	  2219	  2235	  2243	  2247	  2254	  2539	  2541	  2560	  2586	  2604	  2614	  2718	  2794
	  2797	  2801	  2805	  2810	  2897	  2906	  2950	  2997	  3014	  3073	  3084	  3192	  3228	  3339
	  3393	  3397	  3530	  3570	  3589	  3605	  3682	  3697	  3712	  3812	  3831	  3868	  3880	  3906
	  3913	  3939	  3944	  3962	  3972	  3975	  3993	  4027	  4058	  4081	  4147	  4186	  4213	  4259
	  4278	  4287	  4294	  4410	  4523	  4528	  4556	  4568	  4570	  4590	  4645	  4859	  4945	  4949
	  4955	  5074	  5090	  5098	  5108	  5112	  5128	  5147	  5214
RETSKP	  2189	  2194	  2830	  3883	  3914	  3940	  4007	  4023	  4222	  4530	  5099
STOR	  5146	  5167	  5171	  5173	  5175	  5177	  5180	  5182
TXNE	  2031	  2893	  3093	  3295	  3298	  3304	  3325	  3788	  3958	  4246	  4292	  4515	  4732	  4768
	  4822
TXNN	  2167	  2860	  2886	  2896	  3221	  3800	  4140	  4242	  4268	  4286	  4293	  4947	  5752
TXO	  1694	  1798	  1821	  2000	  2565	  2568	  2636	  2641	  2657	  2661	  2669	  2672	  2675	  2678
	  2681	  3389	  3902	  4089	  4104	  4107	  4127	  4537	  4764	  4850	  4975	  4997	  5123	  5222
TXOA	  4045
TXZ	  1947	  2058	  3281	  3296	  3933	  4046	  4067	  4247	  4525	  4759	  4797	  5120	  5183
TXZE	  3006	  3009	  5197
TXZN	  5201
TYPTAB	  4300#	  4306	  4312	  4318
XCTU	  1489#	  1725	  1726	  1728
XJRSTF	  3136
XMOVEI	  3170	  3238
XSFM	  3169	  5750
$ERROR	  1506#	  2148	  2149	  2155	  2813	  2824	  2829	  3287	  3317	  3375	  3519	  3726	  3773	  3783
	  3804	  3807	  3811	  3827	  3850	  3865	  4098	  4114	  4580	  4727	  4742	  4792	  4800	  4807
	  4893	  5122	  5151	  5188	  5192	  5198
%DI%WR	  1080#
%DIDIR	  1077#	  5167
%DIFIL	  1081#	  4758
%DIFLG	  1079#
%DIPRO	  1083#	  4756
%DIRPT	  1082#	  4754
%DISIZ	  1078#
%EBSIZ	  1090#	  5182
%EBTYP	  1089#	  5180
%ED.NU	  3576#	  3585
%FBADR	  3799
%FBBYV	  1104#	  3796
%FBCTL	  1103#	  3787
%FBEXL	  3771
%FBEXT	  3764
%FBGEN	  3776
%FBGNL	  3781
%FBNAM	  3859
%IDXAD	  1047#	  3805	  4790	  5029	  5049	  5118	  5186
%KLP.V	  1039#
%RPT	  1068#	  5139	  5146
%SYMAD	  3854
%SYMET	  3848
%SYMVL	  3851
%VBADR	  1088#	  5177
%VBCNT	  1087#	  5175
%VBSIZ	  1086#	  5173
%VBTYP	  1085#	  5171
%VR.NU	  3577#	  3580
..0001	  4823#	  4834
..0002	  4823#	  4834
..0003	  4823#	  4834
..0004	  4823#	  4834
..INDF	  4823
..RSDF	  4834
..SVDF	  4823
..TAGE	  4823	  4824#	  4830	  4831	  4834#
..TAGF	  4823	  4824#	  4831	  4831#	  4834	  4834#
.POPX	  4834
.POPX2	  4834
.POPX3	  4834
.POPX4	  4834
.PSHX	  4823
.PSHX1	  4823	  4823#	  4834	  4834#
.PSHX2	  4823
   